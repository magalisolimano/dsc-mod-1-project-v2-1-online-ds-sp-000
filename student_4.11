{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final Project Submission\n",
    "\n",
    "Please fill out:\n",
    "* Student name: Magali Solimano\n",
    "* Student pace: self paced \n",
    "* Scheduled project review date/time: \n",
    "* Instructor name: Jeff Herman\n",
    "* Blog post URL:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline \n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Load the data (11 files)\n",
    "df1 = pd.read_csv('zippedData/bom.movie_gross.csv.gz', compression='gzip')\n",
    "df2 = pd.read_csv('zippedData/imdb.name.basics.csv.gz', compression='gzip')\n",
    "df3 = pd.read_csv('zippedData/imdb.title.akas.csv.gz', compression='gzip')\n",
    "df4 = pd.read_csv('zippedData/imdb.title.basics.csv.gz', compression='gzip') \n",
    "df5 = pd.read_csv('zippedData/imdb.title.crew.csv.gz', compression='gzip')\n",
    "df6 = pd.read_csv('zippedData/imdb.title.principals.csv.gz', compression='gzip')\n",
    "df7 = pd.read_csv('zippedData/imdb.title.ratings.csv.gz', compression='gzip')\n",
    "df8 = pd.read_csv('zippedData/rt.movie_info.tsv.gz', delimiter='\\t', compression='gzip')\n",
    "df9 = pd.read_csv('zippedData/rt.reviews.tsv.gz', compression='gzip', delimiter='\\t', encoding='iso-8859-1')\n",
    "df10 = pd.read_csv('zippedData/tmdb.movies.csv.gz', compression='gzip')\n",
    "df11 = pd.read_csv('zippedData/tn.movie_budgets.csv.gz', compression='gzip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3387 entries, 0 to 3386\n",
      "Data columns (total 5 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   title           3387 non-null   object \n",
      " 1   studio          3382 non-null   object \n",
      " 2   domestic_gross  3359 non-null   float64\n",
      " 3   foreign_gross   2037 non-null   object \n",
      " 4   year            3387 non-null   int64  \n",
      "dtypes: float64(1), int64(1), object(3)\n",
      "memory usage: 132.4+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>studio</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toy Story 3</td>\n",
       "      <td>BV</td>\n",
       "      <td>415000000.0</td>\n",
       "      <td>652000000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alice in Wonderland (2010)</td>\n",
       "      <td>BV</td>\n",
       "      <td>334200000.0</td>\n",
       "      <td>691300000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Harry Potter and the Deathly Hallows Part 1</td>\n",
       "      <td>WB</td>\n",
       "      <td>296000000.0</td>\n",
       "      <td>664300000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Inception</td>\n",
       "      <td>WB</td>\n",
       "      <td>292600000.0</td>\n",
       "      <td>535700000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Shrek Forever After</td>\n",
       "      <td>P/DW</td>\n",
       "      <td>238700000.0</td>\n",
       "      <td>513900000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         title studio  domestic_gross  \\\n",
       "0                                  Toy Story 3     BV     415000000.0   \n",
       "1                   Alice in Wonderland (2010)     BV     334200000.0   \n",
       "2  Harry Potter and the Deathly Hallows Part 1     WB     296000000.0   \n",
       "3                                    Inception     WB     292600000.0   \n",
       "4                          Shrek Forever After   P/DW     238700000.0   \n",
       "\n",
       "  foreign_gross  year  \n",
       "0     652000000  2010  \n",
       "1     691300000  2010  \n",
       "2     664300000  2010  \n",
       "3     535700000  2010  \n",
       "4     513900000  2010  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Explore the dataframes and data types\n",
    "print(df1.info())\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 606648 entries, 0 to 606647\n",
      "Data columns (total 6 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   nconst              606648 non-null  object \n",
      " 1   primary_name        606648 non-null  object \n",
      " 2   birth_year          82736 non-null   float64\n",
      " 3   death_year          6783 non-null    float64\n",
      " 4   primary_profession  555308 non-null  object \n",
      " 5   known_for_titles    576444 non-null  object \n",
      "dtypes: float64(2), object(4)\n",
      "memory usage: 27.8+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nconst</th>\n",
       "      <th>primary_name</th>\n",
       "      <th>birth_year</th>\n",
       "      <th>death_year</th>\n",
       "      <th>primary_profession</th>\n",
       "      <th>known_for_titles</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nm0061671</td>\n",
       "      <td>Mary Ellen Bauder</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>miscellaneous,production_manager,producer</td>\n",
       "      <td>tt0837562,tt2398241,tt0844471,tt0118553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>nm0061865</td>\n",
       "      <td>Joseph Bauer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>composer,music_department,sound_department</td>\n",
       "      <td>tt0896534,tt6791238,tt0287072,tt1682940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>nm0062070</td>\n",
       "      <td>Bruce Baum</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>miscellaneous,actor,writer</td>\n",
       "      <td>tt1470654,tt0363631,tt0104030,tt0102898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>nm0062195</td>\n",
       "      <td>Axel Baumann</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>camera_department,cinematographer,art_department</td>\n",
       "      <td>tt0114371,tt2004304,tt1618448,tt1224387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>nm0062798</td>\n",
       "      <td>Pete Baxter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>production_designer,art_department,set_decorator</td>\n",
       "      <td>tt0452644,tt0452692,tt3458030,tt2178256</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      nconst       primary_name  birth_year  death_year  \\\n",
       "0  nm0061671  Mary Ellen Bauder         NaN         NaN   \n",
       "1  nm0061865       Joseph Bauer         NaN         NaN   \n",
       "2  nm0062070         Bruce Baum         NaN         NaN   \n",
       "3  nm0062195       Axel Baumann         NaN         NaN   \n",
       "4  nm0062798        Pete Baxter         NaN         NaN   \n",
       "\n",
       "                                 primary_profession  \\\n",
       "0         miscellaneous,production_manager,producer   \n",
       "1        composer,music_department,sound_department   \n",
       "2                        miscellaneous,actor,writer   \n",
       "3  camera_department,cinematographer,art_department   \n",
       "4  production_designer,art_department,set_decorator   \n",
       "\n",
       "                          known_for_titles  \n",
       "0  tt0837562,tt2398241,tt0844471,tt0118553  \n",
       "1  tt0896534,tt6791238,tt0287072,tt1682940  \n",
       "2  tt1470654,tt0363631,tt0104030,tt0102898  \n",
       "3  tt0114371,tt2004304,tt1618448,tt1224387  \n",
       "4  tt0452644,tt0452692,tt3458030,tt2178256  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df2.info())\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 331703 entries, 0 to 331702\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count   Dtype  \n",
      "---  ------             --------------   -----  \n",
      " 0   title_id           331703 non-null  object \n",
      " 1   ordering           331703 non-null  int64  \n",
      " 2   title              331703 non-null  object \n",
      " 3   region             278410 non-null  object \n",
      " 4   language           41715 non-null   object \n",
      " 5   types              168447 non-null  object \n",
      " 6   attributes         14925 non-null   object \n",
      " 7   is_original_title  331678 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(6)\n",
      "memory usage: 20.2+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>ordering</th>\n",
       "      <th>title</th>\n",
       "      <th>region</th>\n",
       "      <th>language</th>\n",
       "      <th>types</th>\n",
       "      <th>attributes</th>\n",
       "      <th>is_original_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>10</td>\n",
       "      <td>Джурасик свят</td>\n",
       "      <td>BG</td>\n",
       "      <td>bg</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>11</td>\n",
       "      <td>Jurashikku warudo</td>\n",
       "      <td>JP</td>\n",
       "      <td>NaN</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>12</td>\n",
       "      <td>Jurassic World: O Mundo dos Dinossauros</td>\n",
       "      <td>BR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>13</td>\n",
       "      <td>O Mundo dos Dinossauros</td>\n",
       "      <td>BR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>short title</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0369610</td>\n",
       "      <td>14</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>FR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>imdbDisplay</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id  ordering                                    title region  \\\n",
       "0  tt0369610        10                            Джурасик свят     BG   \n",
       "1  tt0369610        11                        Jurashikku warudo     JP   \n",
       "2  tt0369610        12  Jurassic World: O Mundo dos Dinossauros     BR   \n",
       "3  tt0369610        13                  O Mundo dos Dinossauros     BR   \n",
       "4  tt0369610        14                           Jurassic World     FR   \n",
       "\n",
       "  language        types   attributes  is_original_title  \n",
       "0       bg          NaN          NaN                0.0  \n",
       "1      NaN  imdbDisplay          NaN                0.0  \n",
       "2      NaN  imdbDisplay          NaN                0.0  \n",
       "3      NaN          NaN  short title                0.0  \n",
       "4      NaN  imdbDisplay          NaN                0.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df3.info())\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 146144 entries, 0 to 146143\n",
      "Data columns (total 6 columns):\n",
      " #   Column           Non-Null Count   Dtype  \n",
      "---  ------           --------------   -----  \n",
      " 0   tconst           146144 non-null  object \n",
      " 1   primary_title    146144 non-null  object \n",
      " 2   original_title   146123 non-null  object \n",
      " 3   start_year       146144 non-null  int64  \n",
      " 4   runtime_minutes  114405 non-null  float64\n",
      " 5   genres           140736 non-null  object \n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 6.7+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tconst</th>\n",
       "      <th>primary_title</th>\n",
       "      <th>original_title</th>\n",
       "      <th>start_year</th>\n",
       "      <th>runtime_minutes</th>\n",
       "      <th>genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0063540</td>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>Sunghursh</td>\n",
       "      <td>2013</td>\n",
       "      <td>175.0</td>\n",
       "      <td>Action,Crime,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0066787</td>\n",
       "      <td>One Day Before the Rainy Season</td>\n",
       "      <td>Ashad Ka Ek Din</td>\n",
       "      <td>2019</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Biography,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0069049</td>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>The Other Side of the Wind</td>\n",
       "      <td>2018</td>\n",
       "      <td>122.0</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0069204</td>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>Sabse Bada Sukh</td>\n",
       "      <td>2018</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedy,Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0100275</td>\n",
       "      <td>The Wandering Soap Opera</td>\n",
       "      <td>La Telenovela Errante</td>\n",
       "      <td>2017</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Comedy,Drama,Fantasy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      tconst                    primary_title              original_title  \\\n",
       "0  tt0063540                        Sunghursh                   Sunghursh   \n",
       "1  tt0066787  One Day Before the Rainy Season             Ashad Ka Ek Din   \n",
       "2  tt0069049       The Other Side of the Wind  The Other Side of the Wind   \n",
       "3  tt0069204                  Sabse Bada Sukh             Sabse Bada Sukh   \n",
       "4  tt0100275         The Wandering Soap Opera       La Telenovela Errante   \n",
       "\n",
       "   start_year  runtime_minutes                genres  \n",
       "0        2013            175.0    Action,Crime,Drama  \n",
       "1        2019            114.0       Biography,Drama  \n",
       "2        2018            122.0                 Drama  \n",
       "3        2018              NaN          Comedy,Drama  \n",
       "4        2017             80.0  Comedy,Drama,Fantasy  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df4.info())\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 146144 entries, 0 to 146143\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count   Dtype \n",
      "---  ------     --------------   ----- \n",
      " 0   tconst     146144 non-null  object\n",
      " 1   directors  140417 non-null  object\n",
      " 2   writers    110261 non-null  object\n",
      "dtypes: object(3)\n",
      "memory usage: 3.3+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tconst</th>\n",
       "      <th>directors</th>\n",
       "      <th>writers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0285252</td>\n",
       "      <td>nm0899854</td>\n",
       "      <td>nm0899854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0438973</td>\n",
       "      <td>NaN</td>\n",
       "      <td>nm0175726,nm1802864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0462036</td>\n",
       "      <td>nm1940585</td>\n",
       "      <td>nm1940585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0835418</td>\n",
       "      <td>nm0151540</td>\n",
       "      <td>nm0310087,nm0841532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0878654</td>\n",
       "      <td>nm0089502,nm2291498,nm2292011</td>\n",
       "      <td>nm0284943</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      tconst                      directors              writers\n",
       "0  tt0285252                      nm0899854            nm0899854\n",
       "1  tt0438973                            NaN  nm0175726,nm1802864\n",
       "2  tt0462036                      nm1940585            nm1940585\n",
       "3  tt0835418                      nm0151540  nm0310087,nm0841532\n",
       "4  tt0878654  nm0089502,nm2291498,nm2292011            nm0284943"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df5.info())\n",
    "df5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1028186 entries, 0 to 1028185\n",
      "Data columns (total 6 columns):\n",
      " #   Column      Non-Null Count    Dtype \n",
      "---  ------      --------------    ----- \n",
      " 0   tconst      1028186 non-null  object\n",
      " 1   ordering    1028186 non-null  int64 \n",
      " 2   nconst      1028186 non-null  object\n",
      " 3   category    1028186 non-null  object\n",
      " 4   job         177684 non-null   object\n",
      " 5   characters  393360 non-null   object\n",
      "dtypes: int64(1), object(5)\n",
      "memory usage: 47.1+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tconst</th>\n",
       "      <th>ordering</th>\n",
       "      <th>nconst</th>\n",
       "      <th>category</th>\n",
       "      <th>job</th>\n",
       "      <th>characters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>1</td>\n",
       "      <td>nm0246005</td>\n",
       "      <td>actor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[\"The Man\"]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>2</td>\n",
       "      <td>nm0398271</td>\n",
       "      <td>director</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt0111414</td>\n",
       "      <td>3</td>\n",
       "      <td>nm3739909</td>\n",
       "      <td>producer</td>\n",
       "      <td>producer</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt0323808</td>\n",
       "      <td>10</td>\n",
       "      <td>nm0059247</td>\n",
       "      <td>editor</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt0323808</td>\n",
       "      <td>1</td>\n",
       "      <td>nm3579312</td>\n",
       "      <td>actress</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[\"Beth Boothby\"]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      tconst  ordering     nconst  category       job        characters\n",
       "0  tt0111414         1  nm0246005     actor       NaN       [\"The Man\"]\n",
       "1  tt0111414         2  nm0398271  director       NaN               NaN\n",
       "2  tt0111414         3  nm3739909  producer  producer               NaN\n",
       "3  tt0323808        10  nm0059247    editor       NaN               NaN\n",
       "4  tt0323808         1  nm3579312   actress       NaN  [\"Beth Boothby\"]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df6.info())\n",
    "df6.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 73856 entries, 0 to 73855\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   tconst         73856 non-null  object \n",
      " 1   averagerating  73856 non-null  float64\n",
      " 2   numvotes       73856 non-null  int64  \n",
      "dtypes: float64(1), int64(1), object(1)\n",
      "memory usage: 1.7+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tconst</th>\n",
       "      <th>averagerating</th>\n",
       "      <th>numvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tt10356526</td>\n",
       "      <td>8.3</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tt10384606</td>\n",
       "      <td>8.9</td>\n",
       "      <td>559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tt1042974</td>\n",
       "      <td>6.4</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>tt1043726</td>\n",
       "      <td>4.2</td>\n",
       "      <td>50352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tt1060240</td>\n",
       "      <td>6.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       tconst  averagerating  numvotes\n",
       "0  tt10356526            8.3        31\n",
       "1  tt10384606            8.9       559\n",
       "2   tt1042974            6.4        20\n",
       "3   tt1043726            4.2     50352\n",
       "4   tt1060240            6.5        21"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df7.info())\n",
    "df7.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1560 entries, 0 to 1559\n",
      "Data columns (total 12 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   id            1560 non-null   int64 \n",
      " 1   synopsis      1498 non-null   object\n",
      " 2   rating        1557 non-null   object\n",
      " 3   genre         1552 non-null   object\n",
      " 4   director      1361 non-null   object\n",
      " 5   writer        1111 non-null   object\n",
      " 6   theater_date  1201 non-null   object\n",
      " 7   dvd_date      1201 non-null   object\n",
      " 8   currency      340 non-null    object\n",
      " 9   box_office    340 non-null    object\n",
      " 10  runtime       1530 non-null   object\n",
      " 11  studio        494 non-null    object\n",
      "dtypes: int64(1), object(11)\n",
      "memory usage: 146.4+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>synopsis</th>\n",
       "      <th>rating</th>\n",
       "      <th>genre</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>theater_date</th>\n",
       "      <th>dvd_date</th>\n",
       "      <th>currency</th>\n",
       "      <th>box_office</th>\n",
       "      <th>runtime</th>\n",
       "      <th>studio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>This gritty, fast-paced, and innovative police...</td>\n",
       "      <td>R</td>\n",
       "      <td>Action and Adventure|Classics|Drama</td>\n",
       "      <td>William Friedkin</td>\n",
       "      <td>Ernest Tidyman</td>\n",
       "      <td>Oct 9, 1971</td>\n",
       "      <td>Sep 25, 2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>104 minutes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>New York City, not-too-distant-future: Eric Pa...</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama|Science Fiction and Fantasy</td>\n",
       "      <td>David Cronenberg</td>\n",
       "      <td>David Cronenberg|Don DeLillo</td>\n",
       "      <td>Aug 17, 2012</td>\n",
       "      <td>Jan 1, 2013</td>\n",
       "      <td>$</td>\n",
       "      <td>600,000</td>\n",
       "      <td>108 minutes</td>\n",
       "      <td>Entertainment One</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>Illeana Douglas delivers a superb performance ...</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama|Musical and Performing Arts</td>\n",
       "      <td>Allison Anders</td>\n",
       "      <td>Allison Anders</td>\n",
       "      <td>Sep 13, 1996</td>\n",
       "      <td>Apr 18, 2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>116 minutes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>Michael Douglas runs afoul of a treacherous su...</td>\n",
       "      <td>R</td>\n",
       "      <td>Drama|Mystery and Suspense</td>\n",
       "      <td>Barry Levinson</td>\n",
       "      <td>Paul Attanasio|Michael Crichton</td>\n",
       "      <td>Dec 9, 1994</td>\n",
       "      <td>Aug 27, 1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>128 minutes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NR</td>\n",
       "      <td>Drama|Romance</td>\n",
       "      <td>Rodney Bennett</td>\n",
       "      <td>Giles Cooper</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>200 minutes</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                           synopsis rating  \\\n",
       "0   1  This gritty, fast-paced, and innovative police...      R   \n",
       "1   3  New York City, not-too-distant-future: Eric Pa...      R   \n",
       "2   5  Illeana Douglas delivers a superb performance ...      R   \n",
       "3   6  Michael Douglas runs afoul of a treacherous su...      R   \n",
       "4   7                                                NaN     NR   \n",
       "\n",
       "                                 genre          director  \\\n",
       "0  Action and Adventure|Classics|Drama  William Friedkin   \n",
       "1    Drama|Science Fiction and Fantasy  David Cronenberg   \n",
       "2    Drama|Musical and Performing Arts    Allison Anders   \n",
       "3           Drama|Mystery and Suspense    Barry Levinson   \n",
       "4                        Drama|Romance    Rodney Bennett   \n",
       "\n",
       "                            writer  theater_date      dvd_date currency  \\\n",
       "0                   Ernest Tidyman   Oct 9, 1971  Sep 25, 2001      NaN   \n",
       "1     David Cronenberg|Don DeLillo  Aug 17, 2012   Jan 1, 2013        $   \n",
       "2                   Allison Anders  Sep 13, 1996  Apr 18, 2000      NaN   \n",
       "3  Paul Attanasio|Michael Crichton   Dec 9, 1994  Aug 27, 1997      NaN   \n",
       "4                     Giles Cooper           NaN           NaN      NaN   \n",
       "\n",
       "  box_office      runtime             studio  \n",
       "0        NaN  104 minutes                NaN  \n",
       "1    600,000  108 minutes  Entertainment One  \n",
       "2        NaN  116 minutes                NaN  \n",
       "3        NaN  128 minutes                NaN  \n",
       "4        NaN  200 minutes                NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df8.info())\n",
    "df8.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54432 entries, 0 to 54431\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   id          54432 non-null  int64 \n",
      " 1   review      48869 non-null  object\n",
      " 2   rating      40915 non-null  object\n",
      " 3   fresh       54432 non-null  object\n",
      " 4   critic      51710 non-null  object\n",
      " 5   top_critic  54432 non-null  int64 \n",
      " 6   publisher   54123 non-null  object\n",
      " 7   date        54432 non-null  object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 3.3+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>review</th>\n",
       "      <th>rating</th>\n",
       "      <th>fresh</th>\n",
       "      <th>critic</th>\n",
       "      <th>top_critic</th>\n",
       "      <th>publisher</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>A distinctly gallows take on contemporary fina...</td>\n",
       "      <td>3/5</td>\n",
       "      <td>fresh</td>\n",
       "      <td>PJ Nabarro</td>\n",
       "      <td>0</td>\n",
       "      <td>Patrick Nabarro</td>\n",
       "      <td>November 10, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>It's an allegory in search of a meaning that n...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>rotten</td>\n",
       "      <td>Annalee Newitz</td>\n",
       "      <td>0</td>\n",
       "      <td>io9.com</td>\n",
       "      <td>May 23, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>... life lived in a bubble in financial dealin...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fresh</td>\n",
       "      <td>Sean Axmaker</td>\n",
       "      <td>0</td>\n",
       "      <td>Stream on Demand</td>\n",
       "      <td>January 4, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Continuing along a line introduced in last yea...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fresh</td>\n",
       "      <td>Daniel Kasman</td>\n",
       "      <td>0</td>\n",
       "      <td>MUBI</td>\n",
       "      <td>November 16, 2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>... a perverse twist on neorealism...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fresh</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>Cinema Scope</td>\n",
       "      <td>October 12, 2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                             review rating   fresh  \\\n",
       "0   3  A distinctly gallows take on contemporary fina...    3/5   fresh   \n",
       "1   3  It's an allegory in search of a meaning that n...    NaN  rotten   \n",
       "2   3  ... life lived in a bubble in financial dealin...    NaN   fresh   \n",
       "3   3  Continuing along a line introduced in last yea...    NaN   fresh   \n",
       "4   3             ... a perverse twist on neorealism...     NaN   fresh   \n",
       "\n",
       "           critic  top_critic         publisher               date  \n",
       "0      PJ Nabarro           0   Patrick Nabarro  November 10, 2018  \n",
       "1  Annalee Newitz           0           io9.com       May 23, 2018  \n",
       "2    Sean Axmaker           0  Stream on Demand    January 4, 2018  \n",
       "3   Daniel Kasman           0              MUBI  November 16, 2017  \n",
       "4             NaN           0      Cinema Scope   October 12, 2017  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df9.info())\n",
    "df9.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 26517 entries, 0 to 26516\n",
      "Data columns (total 10 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Unnamed: 0         26517 non-null  int64  \n",
      " 1   genre_ids          26517 non-null  object \n",
      " 2   id                 26517 non-null  int64  \n",
      " 3   original_language  26517 non-null  object \n",
      " 4   original_title     26517 non-null  object \n",
      " 5   popularity         26517 non-null  float64\n",
      " 6   release_date       26517 non-null  object \n",
      " 7   title              26517 non-null  object \n",
      " 8   vote_average       26517 non-null  float64\n",
      " 9   vote_count         26517 non-null  int64  \n",
      "dtypes: float64(2), int64(3), object(5)\n",
      "memory usage: 2.0+ MB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>genre_ids</th>\n",
       "      <th>id</th>\n",
       "      <th>original_language</th>\n",
       "      <th>original_title</th>\n",
       "      <th>popularity</th>\n",
       "      <th>release_date</th>\n",
       "      <th>title</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>vote_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[12, 14, 10751]</td>\n",
       "      <td>12444</td>\n",
       "      <td>en</td>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 1</td>\n",
       "      <td>33.533</td>\n",
       "      <td>2010-11-19</td>\n",
       "      <td>Harry Potter and the Deathly Hallows: Part 1</td>\n",
       "      <td>7.7</td>\n",
       "      <td>10788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[14, 12, 16, 10751]</td>\n",
       "      <td>10191</td>\n",
       "      <td>en</td>\n",
       "      <td>How to Train Your Dragon</td>\n",
       "      <td>28.734</td>\n",
       "      <td>2010-03-26</td>\n",
       "      <td>How to Train Your Dragon</td>\n",
       "      <td>7.7</td>\n",
       "      <td>7610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[12, 28, 878]</td>\n",
       "      <td>10138</td>\n",
       "      <td>en</td>\n",
       "      <td>Iron Man 2</td>\n",
       "      <td>28.515</td>\n",
       "      <td>2010-05-07</td>\n",
       "      <td>Iron Man 2</td>\n",
       "      <td>6.8</td>\n",
       "      <td>12368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[16, 35, 10751]</td>\n",
       "      <td>862</td>\n",
       "      <td>en</td>\n",
       "      <td>Toy Story</td>\n",
       "      <td>28.005</td>\n",
       "      <td>1995-11-22</td>\n",
       "      <td>Toy Story</td>\n",
       "      <td>7.9</td>\n",
       "      <td>10174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[28, 878, 12]</td>\n",
       "      <td>27205</td>\n",
       "      <td>en</td>\n",
       "      <td>Inception</td>\n",
       "      <td>27.920</td>\n",
       "      <td>2010-07-16</td>\n",
       "      <td>Inception</td>\n",
       "      <td>8.3</td>\n",
       "      <td>22186</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0            genre_ids     id original_language  \\\n",
       "0           0      [12, 14, 10751]  12444                en   \n",
       "1           1  [14, 12, 16, 10751]  10191                en   \n",
       "2           2        [12, 28, 878]  10138                en   \n",
       "3           3      [16, 35, 10751]    862                en   \n",
       "4           4        [28, 878, 12]  27205                en   \n",
       "\n",
       "                                 original_title  popularity release_date  \\\n",
       "0  Harry Potter and the Deathly Hallows: Part 1      33.533   2010-11-19   \n",
       "1                      How to Train Your Dragon      28.734   2010-03-26   \n",
       "2                                    Iron Man 2      28.515   2010-05-07   \n",
       "3                                     Toy Story      28.005   1995-11-22   \n",
       "4                                     Inception      27.920   2010-07-16   \n",
       "\n",
       "                                          title  vote_average  vote_count  \n",
       "0  Harry Potter and the Deathly Hallows: Part 1           7.7       10788  \n",
       "1                      How to Train Your Dragon           7.7        7610  \n",
       "2                                    Iron Man 2           6.8       12368  \n",
       "3                                     Toy Story           7.9       10174  \n",
       "4                                     Inception           8.3       22186  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df10.info())\n",
    "df10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5782 entries, 0 to 5781\n",
      "Data columns (total 6 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   id                 5782 non-null   int64 \n",
      " 1   release_date       5782 non-null   object\n",
      " 2   movie              5782 non-null   object\n",
      " 3   production_budget  5782 non-null   object\n",
      " 4   domestic_gross     5782 non-null   object\n",
      " 5   worldwide_gross    5782 non-null   object\n",
      "dtypes: int64(1), object(5)\n",
      "memory usage: 271.2+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>movie</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Dec 18, 2009</td>\n",
       "      <td>Avatar</td>\n",
       "      <td>$425,000,000</td>\n",
       "      <td>$760,507,625</td>\n",
       "      <td>$2,776,345,279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>May 20, 2011</td>\n",
       "      <td>Pirates of the Caribbean: On Stranger Tides</td>\n",
       "      <td>$410,600,000</td>\n",
       "      <td>$241,063,875</td>\n",
       "      <td>$1,045,663,875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Jun 7, 2019</td>\n",
       "      <td>Dark Phoenix</td>\n",
       "      <td>$350,000,000</td>\n",
       "      <td>$42,762,350</td>\n",
       "      <td>$149,762,350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>May 1, 2015</td>\n",
       "      <td>Avengers: Age of Ultron</td>\n",
       "      <td>$330,600,000</td>\n",
       "      <td>$459,005,868</td>\n",
       "      <td>$1,403,013,963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Dec 15, 2017</td>\n",
       "      <td>Star Wars Ep. VIII: The Last Jedi</td>\n",
       "      <td>$317,000,000</td>\n",
       "      <td>$620,181,382</td>\n",
       "      <td>$1,316,721,747</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  release_date                                        movie  \\\n",
       "0   1  Dec 18, 2009                                       Avatar   \n",
       "1   2  May 20, 2011  Pirates of the Caribbean: On Stranger Tides   \n",
       "2   3   Jun 7, 2019                                 Dark Phoenix   \n",
       "3   4   May 1, 2015                      Avengers: Age of Ultron   \n",
       "4   5  Dec 15, 2017            Star Wars Ep. VIII: The Last Jedi   \n",
       "\n",
       "  production_budget domestic_gross worldwide_gross  \n",
       "0      $425,000,000   $760,507,625  $2,776,345,279  \n",
       "1      $410,600,000   $241,063,875  $1,045,663,875  \n",
       "2      $350,000,000    $42,762,350    $149,762,350  \n",
       "3      $330,600,000   $459,005,868  $1,403,013,963  \n",
       "4      $317,000,000   $620,181,382  $1,316,721,747  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df11.info())\n",
    "df11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## QUESTION 1: What movies are the top revenue, ROI generators?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1 and #df11 have revenue cols -- compare these results. Can the dfs be joined?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5782 entries, 0 to 5781\n",
      "Data columns (total 7 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   id                 5782 non-null   int64         \n",
      " 1   release_date       5782 non-null   datetime64[ns]\n",
      " 2   movie              5782 non-null   object        \n",
      " 3   production_budget  5782 non-null   float64       \n",
      " 4   domestic_gross     5782 non-null   float64       \n",
      " 5   worldwide_gross    5782 non-null   float64       \n",
      " 6   year               5782 non-null   int64         \n",
      "dtypes: datetime64[ns](1), float64(3), int64(2), object(1)\n",
      "memory usage: 316.3+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert budget and revenue cols to float dtype; release_date to datetime. Remove '$' and ','.\n",
    "df11['production_budget'] = df11['production_budget'].map(lambda x: float(x.replace(\"$\", \"\").replace(',','')))\n",
    "df11['domestic_gross'] = df11['domestic_gross'].map(lambda x: float(x.replace(\"$\", \"\").replace(',','')))\n",
    "df11['worldwide_gross'] = df11['worldwide_gross'].map(lambda x: float(x.replace(\"$\", \"\").replace(',','')))\n",
    "df11['release_date'] = pd.to_datetime(df11['release_date'])\n",
    "df11['year'] = pd.DatetimeIndex(df11['release_date']).year\n",
    "\n",
    "# Confirm that dtype conversions worked and that null values did not increase\n",
    "display(df11.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>title</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2009-12-18</td>\n",
       "      <td>Avatar</td>\n",
       "      <td>425000000.0</td>\n",
       "      <td>760507625.0</td>\n",
       "      <td>2.776345e+09</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2011-05-20</td>\n",
       "      <td>Pirates of the Caribbean: On Stranger Tides</td>\n",
       "      <td>410600000.0</td>\n",
       "      <td>241063875.0</td>\n",
       "      <td>1.045664e+09</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-06-07</td>\n",
       "      <td>Dark Phoenix</td>\n",
       "      <td>350000000.0</td>\n",
       "      <td>42762350.0</td>\n",
       "      <td>1.497624e+08</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2015-05-01</td>\n",
       "      <td>Avengers: Age of Ultron</td>\n",
       "      <td>330600000.0</td>\n",
       "      <td>459005868.0</td>\n",
       "      <td>1.403014e+09</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-12-15</td>\n",
       "      <td>Star Wars Ep. VIII: The Last Jedi</td>\n",
       "      <td>317000000.0</td>\n",
       "      <td>620181382.0</td>\n",
       "      <td>1.316722e+09</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id release_date                                        title  \\\n",
       "0   1   2009-12-18                                       Avatar   \n",
       "1   2   2011-05-20  Pirates of the Caribbean: On Stranger Tides   \n",
       "2   3   2019-06-07                                 Dark Phoenix   \n",
       "3   4   2015-05-01                      Avengers: Age of Ultron   \n",
       "4   5   2017-12-15            Star Wars Ep. VIII: The Last Jedi   \n",
       "\n",
       "   production_budget  domestic_gross  worldwide_gross  year  \n",
       "0        425000000.0     760507625.0     2.776345e+09  2009  \n",
       "1        410600000.0     241063875.0     1.045664e+09  2011  \n",
       "2        350000000.0      42762350.0     1.497624e+08  2019  \n",
       "3        330600000.0     459005868.0     1.403014e+09  2015  \n",
       "4        317000000.0     620181382.0     1.316722e+09  2017  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df11 = df11.rename(columns={\"movie\": \"title\"})\n",
    "df11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare top gross: df1 vs df11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>studio</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1872</th>\n",
       "      <td>Star Wars: The Force Awakens</td>\n",
       "      <td>BV</td>\n",
       "      <td>936700000.0</td>\n",
       "      <td>1,131.6</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3080</th>\n",
       "      <td>Black Panther</td>\n",
       "      <td>BV</td>\n",
       "      <td>700100000.0</td>\n",
       "      <td>646900000</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3079</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>BV</td>\n",
       "      <td>678800000.0</td>\n",
       "      <td>1,369.5</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1873</th>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>Uni.</td>\n",
       "      <td>652300000.0</td>\n",
       "      <td>1,019.4</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>727</th>\n",
       "      <td>Marvel's The Avengers</td>\n",
       "      <td>BV</td>\n",
       "      <td>623400000.0</td>\n",
       "      <td>895500000</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2758</th>\n",
       "      <td>Star Wars: The Last Jedi</td>\n",
       "      <td>BV</td>\n",
       "      <td>620200000.0</td>\n",
       "      <td>712400000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3082</th>\n",
       "      <td>Incredibles 2</td>\n",
       "      <td>BV</td>\n",
       "      <td>608600000.0</td>\n",
       "      <td>634200000</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>Rogue One: A Star Wars Story</td>\n",
       "      <td>BV</td>\n",
       "      <td>532200000.0</td>\n",
       "      <td>523900000</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2759</th>\n",
       "      <td>Beauty and the Beast (2017)</td>\n",
       "      <td>BV</td>\n",
       "      <td>504000000.0</td>\n",
       "      <td>759500000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2324</th>\n",
       "      <td>Finding Dory</td>\n",
       "      <td>BV</td>\n",
       "      <td>486300000.0</td>\n",
       "      <td>542300000</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1875</th>\n",
       "      <td>Avengers: Age of Ultron</td>\n",
       "      <td>BV</td>\n",
       "      <td>459000000.0</td>\n",
       "      <td>946400000</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>729</th>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>WB</td>\n",
       "      <td>448100000.0</td>\n",
       "      <td>636800000</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1131</th>\n",
       "      <td>The Hunger Games: Catching Fire</td>\n",
       "      <td>LGF</td>\n",
       "      <td>424700000.0</td>\n",
       "      <td>440300000</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3081</th>\n",
       "      <td>Jurassic World: Fallen Kingdom</td>\n",
       "      <td>Uni.</td>\n",
       "      <td>417700000.0</td>\n",
       "      <td>891800000</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toy Story 3</td>\n",
       "      <td>BV</td>\n",
       "      <td>415000000.0</td>\n",
       "      <td>652000000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2767</th>\n",
       "      <td>Wonder Woman</td>\n",
       "      <td>WB</td>\n",
       "      <td>412600000.0</td>\n",
       "      <td>409300000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1128</th>\n",
       "      <td>Iron Man 3</td>\n",
       "      <td>BV</td>\n",
       "      <td>409000000.0</td>\n",
       "      <td>805800000</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2322</th>\n",
       "      <td>Captain America: Civil War</td>\n",
       "      <td>BV</td>\n",
       "      <td>408100000.0</td>\n",
       "      <td>745200000</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>735</th>\n",
       "      <td>The Hunger Games</td>\n",
       "      <td>LGF</td>\n",
       "      <td>408000000.0</td>\n",
       "      <td>286400000</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2762</th>\n",
       "      <td>Jumanji: Welcome to the Jungle</td>\n",
       "      <td>Sony</td>\n",
       "      <td>404500000.0</td>\n",
       "      <td>557600000</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                title studio  domestic_gross foreign_gross  \\\n",
       "1872     Star Wars: The Force Awakens     BV     936700000.0       1,131.6   \n",
       "3080                    Black Panther     BV     700100000.0     646900000   \n",
       "3079           Avengers: Infinity War     BV     678800000.0       1,369.5   \n",
       "1873                   Jurassic World   Uni.     652300000.0       1,019.4   \n",
       "727             Marvel's The Avengers     BV     623400000.0     895500000   \n",
       "2758         Star Wars: The Last Jedi     BV     620200000.0     712400000   \n",
       "3082                    Incredibles 2     BV     608600000.0     634200000   \n",
       "2323     Rogue One: A Star Wars Story     BV     532200000.0     523900000   \n",
       "2759      Beauty and the Beast (2017)     BV     504000000.0     759500000   \n",
       "2324                     Finding Dory     BV     486300000.0     542300000   \n",
       "1875          Avengers: Age of Ultron     BV     459000000.0     946400000   \n",
       "729             The Dark Knight Rises     WB     448100000.0     636800000   \n",
       "1131  The Hunger Games: Catching Fire    LGF     424700000.0     440300000   \n",
       "3081   Jurassic World: Fallen Kingdom   Uni.     417700000.0     891800000   \n",
       "0                         Toy Story 3     BV     415000000.0     652000000   \n",
       "2767                     Wonder Woman     WB     412600000.0     409300000   \n",
       "1128                       Iron Man 3     BV     409000000.0     805800000   \n",
       "2322       Captain America: Civil War     BV     408100000.0     745200000   \n",
       "735                  The Hunger Games    LGF     408000000.0     286400000   \n",
       "2762   Jumanji: Welcome to the Jungle   Sony     404500000.0     557600000   \n",
       "\n",
       "      year  \n",
       "1872  2015  \n",
       "3080  2018  \n",
       "3079  2018  \n",
       "1873  2015  \n",
       "727   2012  \n",
       "2758  2017  \n",
       "3082  2018  \n",
       "2323  2016  \n",
       "2759  2017  \n",
       "2324  2016  \n",
       "1875  2015  \n",
       "729   2012  \n",
       "1131  2013  \n",
       "3081  2018  \n",
       "0     2010  \n",
       "2767  2017  \n",
       "1128  2013  \n",
       "2322  2016  \n",
       "735   2012  \n",
       "2762  2017  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>title</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2015-12-18</td>\n",
       "      <td>Star Wars Ep. VII: The Force Awakens</td>\n",
       "      <td>306000000.0</td>\n",
       "      <td>936662225.0</td>\n",
       "      <td>2.053311e+09</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2009-12-18</td>\n",
       "      <td>Avatar</td>\n",
       "      <td>425000000.0</td>\n",
       "      <td>760507625.0</td>\n",
       "      <td>2.776345e+09</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42</td>\n",
       "      <td>2018-02-16</td>\n",
       "      <td>Black Panther</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>700059566.0</td>\n",
       "      <td>1.348258e+09</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2018-04-27</td>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>300000000.0</td>\n",
       "      <td>678815482.0</td>\n",
       "      <td>2.048134e+09</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>43</td>\n",
       "      <td>1997-12-19</td>\n",
       "      <td>Titanic</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>659363944.0</td>\n",
       "      <td>2.208208e+09</td>\n",
       "      <td>1997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>2015-06-12</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>215000000.0</td>\n",
       "      <td>652270625.0</td>\n",
       "      <td>1.648855e+09</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>2012-05-04</td>\n",
       "      <td>The Avengers</td>\n",
       "      <td>225000000.0</td>\n",
       "      <td>623279547.0</td>\n",
       "      <td>1.517936e+09</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-12-15</td>\n",
       "      <td>Star Wars Ep. VIII: The Last Jedi</td>\n",
       "      <td>317000000.0</td>\n",
       "      <td>620181382.0</td>\n",
       "      <td>1.316722e+09</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>44</td>\n",
       "      <td>2018-06-15</td>\n",
       "      <td>Incredibles 2</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>608581744.0</td>\n",
       "      <td>1.242521e+09</td>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>75</td>\n",
       "      <td>2008-07-18</td>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>185000000.0</td>\n",
       "      <td>533720947.0</td>\n",
       "      <td>1.001996e+09</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>45</td>\n",
       "      <td>2016-12-16</td>\n",
       "      <td>Rogue One: A Star Wars Story</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>532177324.0</td>\n",
       "      <td>1.049103e+09</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>35</td>\n",
       "      <td>2017-03-17</td>\n",
       "      <td>Beauty and the Beast</td>\n",
       "      <td>160000000.0</td>\n",
       "      <td>504014165.0</td>\n",
       "      <td>1.259200e+09</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>46</td>\n",
       "      <td>2016-06-17</td>\n",
       "      <td>Finding Dory</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>486295561.0</td>\n",
       "      <td>1.021215e+09</td>\n",
       "      <td>2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>4</td>\n",
       "      <td>1999-05-19</td>\n",
       "      <td>Star Wars Ep. I: The Phantom Menace</td>\n",
       "      <td>115000000.0</td>\n",
       "      <td>474544677.0</td>\n",
       "      <td>1.027045e+09</td>\n",
       "      <td>1999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3464</th>\n",
       "      <td>65</td>\n",
       "      <td>1977-05-25</td>\n",
       "      <td>Star Wars Ep. IV: A New Hope</td>\n",
       "      <td>11000000.0</td>\n",
       "      <td>460998007.0</td>\n",
       "      <td>7.865980e+08</td>\n",
       "      <td>1977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2015-05-01</td>\n",
       "      <td>Avengers: Age of Ultron</td>\n",
       "      <td>330600000.0</td>\n",
       "      <td>459005868.0</td>\n",
       "      <td>1.403014e+09</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>2012-07-20</td>\n",
       "      <td>The Dark Knight Rises</td>\n",
       "      <td>275000000.0</td>\n",
       "      <td>448139099.0</td>\n",
       "      <td>1.084439e+09</td>\n",
       "      <td>2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>692</th>\n",
       "      <td>93</td>\n",
       "      <td>2004-05-19</td>\n",
       "      <td>Shrek 2</td>\n",
       "      <td>70000000.0</td>\n",
       "      <td>441226247.0</td>\n",
       "      <td>9.370081e+08</td>\n",
       "      <td>2004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3525</th>\n",
       "      <td>26</td>\n",
       "      <td>1982-06-11</td>\n",
       "      <td>ET: The Extra-Terrestrial</td>\n",
       "      <td>10500000.0</td>\n",
       "      <td>435110554.0</td>\n",
       "      <td>7.929653e+08</td>\n",
       "      <td>1982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>2019-03-08</td>\n",
       "      <td>Captain Marvel</td>\n",
       "      <td>175000000.0</td>\n",
       "      <td>426525952.0</td>\n",
       "      <td>1.123062e+09</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id release_date                                 title  \\\n",
       "5      6   2015-12-18  Star Wars Ep. VII: The Force Awakens   \n",
       "0      1   2009-12-18                                Avatar   \n",
       "41    42   2018-02-16                         Black Panther   \n",
       "6      7   2018-04-27                Avengers: Infinity War   \n",
       "42    43   1997-12-19                               Titanic   \n",
       "33    34   2015-06-12                        Jurassic World   \n",
       "26    27   2012-05-04                          The Avengers   \n",
       "4      5   2017-12-15     Star Wars Ep. VIII: The Last Jedi   \n",
       "43    44   2018-06-15                         Incredibles 2   \n",
       "74    75   2008-07-18                       The Dark Knight   \n",
       "44    45   2016-12-16          Rogue One: A Star Wars Story   \n",
       "134   35   2017-03-17                  Beauty and the Beast   \n",
       "45    46   2016-06-17                          Finding Dory   \n",
       "303    4   1999-05-19   Star Wars Ep. I: The Phantom Menace   \n",
       "3464  65   1977-05-25          Star Wars Ep. IV: A New Hope   \n",
       "3      4   2015-05-01               Avengers: Age of Ultron   \n",
       "10    11   2012-07-20                 The Dark Knight Rises   \n",
       "692   93   2004-05-19                               Shrek 2   \n",
       "3525  26   1982-06-11             ET: The Extra-Terrestrial   \n",
       "95    96   2019-03-08                        Captain Marvel   \n",
       "\n",
       "      production_budget  domestic_gross  worldwide_gross  year  \n",
       "5           306000000.0     936662225.0     2.053311e+09  2015  \n",
       "0           425000000.0     760507625.0     2.776345e+09  2009  \n",
       "41          200000000.0     700059566.0     1.348258e+09  2018  \n",
       "6           300000000.0     678815482.0     2.048134e+09  2018  \n",
       "42          200000000.0     659363944.0     2.208208e+09  1997  \n",
       "33          215000000.0     652270625.0     1.648855e+09  2015  \n",
       "26          225000000.0     623279547.0     1.517936e+09  2012  \n",
       "4           317000000.0     620181382.0     1.316722e+09  2017  \n",
       "43          200000000.0     608581744.0     1.242521e+09  2018  \n",
       "74          185000000.0     533720947.0     1.001996e+09  2008  \n",
       "44          200000000.0     532177324.0     1.049103e+09  2016  \n",
       "134         160000000.0     504014165.0     1.259200e+09  2017  \n",
       "45          200000000.0     486295561.0     1.021215e+09  2016  \n",
       "303         115000000.0     474544677.0     1.027045e+09  1999  \n",
       "3464         11000000.0     460998007.0     7.865980e+08  1977  \n",
       "3           330600000.0     459005868.0     1.403014e+09  2015  \n",
       "10          275000000.0     448139099.0     1.084439e+09  2012  \n",
       "692          70000000.0     441226247.0     9.370081e+08  2004  \n",
       "3525         10500000.0     435110554.0     7.929653e+08  1982  \n",
       "95          175000000.0     426525952.0     1.123062e+09  2019  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display(df1.sort_values(by=['domestic_gross'], ascending=False).head(20))\n",
    "df11.sort_values(by=['domestic_gross'], ascending=False).head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# There is overlap between df1 & df11. But, df11 has more movie entries (incl. several top revenue generators) that are not in df1.\n",
    "# df1 might not have a particular studio's movies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set index to title.\n",
    "# Join df11 and df1--left join to bring in df1's studio info. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studio</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Toy Story 3</th>\n",
       "      <td>BV</td>\n",
       "      <td>415000000.0</td>\n",
       "      <td>652000000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alice in Wonderland (2010)</th>\n",
       "      <td>BV</td>\n",
       "      <td>334200000.0</td>\n",
       "      <td>691300000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Harry Potter and the Deathly Hallows Part 1</th>\n",
       "      <td>WB</td>\n",
       "      <td>296000000.0</td>\n",
       "      <td>664300000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Inception</th>\n",
       "      <td>WB</td>\n",
       "      <td>292600000.0</td>\n",
       "      <td>535700000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shrek Forever After</th>\n",
       "      <td>P/DW</td>\n",
       "      <td>238700000.0</td>\n",
       "      <td>513900000</td>\n",
       "      <td>2010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            studio  domestic_gross  \\\n",
       "title                                                                \n",
       "Toy Story 3                                     BV     415000000.0   \n",
       "Alice in Wonderland (2010)                      BV     334200000.0   \n",
       "Harry Potter and the Deathly Hallows Part 1     WB     296000000.0   \n",
       "Inception                                       WB     292600000.0   \n",
       "Shrek Forever After                           P/DW     238700000.0   \n",
       "\n",
       "                                            foreign_gross  year  \n",
       "title                                                            \n",
       "Toy Story 3                                     652000000  2010  \n",
       "Alice in Wonderland (2010)                      691300000  2010  \n",
       "Harry Potter and the Deathly Hallows Part 1     664300000  2010  \n",
       "Inception                                       535700000  2010  \n",
       "Shrek Forever After                             513900000  2010  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.set_index('title', inplace = True)\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Avatar</th>\n",
       "      <td>1</td>\n",
       "      <td>2009-12-18</td>\n",
       "      <td>425000000.0</td>\n",
       "      <td>760507625.0</td>\n",
       "      <td>2.776345e+09</td>\n",
       "      <td>2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pirates of the Caribbean: On Stranger Tides</th>\n",
       "      <td>2</td>\n",
       "      <td>2011-05-20</td>\n",
       "      <td>410600000.0</td>\n",
       "      <td>241063875.0</td>\n",
       "      <td>1.045664e+09</td>\n",
       "      <td>2011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dark Phoenix</th>\n",
       "      <td>3</td>\n",
       "      <td>2019-06-07</td>\n",
       "      <td>350000000.0</td>\n",
       "      <td>42762350.0</td>\n",
       "      <td>1.497624e+08</td>\n",
       "      <td>2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avengers: Age of Ultron</th>\n",
       "      <td>4</td>\n",
       "      <td>2015-05-01</td>\n",
       "      <td>330600000.0</td>\n",
       "      <td>459005868.0</td>\n",
       "      <td>1.403014e+09</td>\n",
       "      <td>2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Star Wars Ep. VIII: The Last Jedi</th>\n",
       "      <td>5</td>\n",
       "      <td>2017-12-15</td>\n",
       "      <td>317000000.0</td>\n",
       "      <td>620181382.0</td>\n",
       "      <td>1.316722e+09</td>\n",
       "      <td>2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             id release_date  \\\n",
       "title                                                          \n",
       "Avatar                                        1   2009-12-18   \n",
       "Pirates of the Caribbean: On Stranger Tides   2   2011-05-20   \n",
       "Dark Phoenix                                  3   2019-06-07   \n",
       "Avengers: Age of Ultron                       4   2015-05-01   \n",
       "Star Wars Ep. VIII: The Last Jedi             5   2017-12-15   \n",
       "\n",
       "                                             production_budget  \\\n",
       "title                                                            \n",
       "Avatar                                             425000000.0   \n",
       "Pirates of the Caribbean: On Stranger Tides        410600000.0   \n",
       "Dark Phoenix                                       350000000.0   \n",
       "Avengers: Age of Ultron                            330600000.0   \n",
       "Star Wars Ep. VIII: The Last Jedi                  317000000.0   \n",
       "\n",
       "                                             domestic_gross  worldwide_gross  \\\n",
       "title                                                                          \n",
       "Avatar                                          760507625.0     2.776345e+09   \n",
       "Pirates of the Caribbean: On Stranger Tides     241063875.0     1.045664e+09   \n",
       "Dark Phoenix                                     42762350.0     1.497624e+08   \n",
       "Avengers: Age of Ultron                         459005868.0     1.403014e+09   \n",
       "Star Wars Ep. VIII: The Last Jedi               620181382.0     1.316722e+09   \n",
       "\n",
       "                                             year  \n",
       "title                                              \n",
       "Avatar                                       2009  \n",
       "Pirates of the Caribbean: On Stranger Tides  2011  \n",
       "Dark Phoenix                                 2019  \n",
       "Avengers: Age of Ultron                      2015  \n",
       "Star Wars Ep. VIII: The Last Jedi            2017  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df11.set_index('title', inplace = True)\n",
    "df11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 5782 entries, #Horror to é·æ±ä¸è (CJ7)\n",
      "Data columns (total 10 columns):\n",
      " #   Column                Non-Null Count  Dtype         \n",
      "---  ------                --------------  -----         \n",
      " 0   id                    5782 non-null   int64         \n",
      " 1   release_date          5782 non-null   datetime64[ns]\n",
      " 2   production_budget     5782 non-null   float64       \n",
      " 3   domestic_gross        5782 non-null   float64       \n",
      " 4   worldwide_gross       5782 non-null   float64       \n",
      " 5   year                  5782 non-null   int64         \n",
      " 6   studio                1246 non-null   object        \n",
      " 7   domestic_gross_right  1245 non-null   float64       \n",
      " 8   foreign_gross         1086 non-null   object        \n",
      " 9   year_right            1247 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(5), int64(2), object(2)\n",
      "memory usage: 496.9+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>domestic_gross_right</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>year_right</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>#Horror</th>\n",
       "      <td>16</td>\n",
       "      <td>2015-11-20</td>\n",
       "      <td>1500000.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(500) Days of Summer</th>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Cloverfield Lane</th>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>72100000.0</td>\n",
       "      <td>38100000</td>\n",
       "      <td>2016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Days in a Madhouse</th>\n",
       "      <td>48</td>\n",
       "      <td>2015-11-11</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Things I Hate About You</th>\n",
       "      <td>63</td>\n",
       "      <td>1999-03-31</td>\n",
       "      <td>13000000.0</td>\n",
       "      <td>38177966.0</td>\n",
       "      <td>60413950.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            id release_date  production_budget  \\\n",
       "title                                                            \n",
       "#Horror                     16   2015-11-20          1500000.0   \n",
       "(500) Days of Summer        55   2009-07-17          7500000.0   \n",
       "10 Cloverfield Lane         54   2016-03-11          5000000.0   \n",
       "10 Days in a Madhouse       48   2015-11-11         12000000.0   \n",
       "10 Things I Hate About You  63   1999-03-31         13000000.0   \n",
       "\n",
       "                            domestic_gross  worldwide_gross  year studio  \\\n",
       "title                                                                      \n",
       "#Horror                                0.0              0.0  2015    NaN   \n",
       "(500) Days of Summer            32425665.0       34439060.0  2009    NaN   \n",
       "10 Cloverfield Lane             72082999.0      108286422.0  2016   Par.   \n",
       "10 Days in a Madhouse              14616.0          14616.0  2015    NaN   \n",
       "10 Things I Hate About You      38177966.0       60413950.0  1999    NaN   \n",
       "\n",
       "                            domestic_gross_right foreign_gross  year_right  \n",
       "title                                                                       \n",
       "#Horror                                      NaN           NaN         NaN  \n",
       "(500) Days of Summer                         NaN           NaN         NaN  \n",
       "10 Cloverfield Lane                   72100000.0      38100000      2016.0  \n",
       "10 Days in a Madhouse                        NaN           NaN         NaN  \n",
       "10 Things I Hate About You                   NaN           NaN         NaN  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials = df11.join(df1, how='left', rsuffix='_right')\n",
    "display(df_financials.info())\n",
    "df_financials.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop df1 revenue data since they seem to round, while df11's revenue data is more precise.\n",
    "# Drop foreign_gross, year_right."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_financials = df_financials.drop(columns=['domestic_gross_right', 'foreign_gross', 'year_right'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>#Horror</th>\n",
       "      <td>16</td>\n",
       "      <td>2015-11-20</td>\n",
       "      <td>1500000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(500) Days of Summer</th>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Cloverfield Lane</th>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Days in a Madhouse</th>\n",
       "      <td>48</td>\n",
       "      <td>2015-11-11</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Things I Hate About You</th>\n",
       "      <td>63</td>\n",
       "      <td>1999-03-31</td>\n",
       "      <td>13000000.0</td>\n",
       "      <td>38177966.0</td>\n",
       "      <td>60413950.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10,000 B.C.</th>\n",
       "      <td>51</td>\n",
       "      <td>2008-03-07</td>\n",
       "      <td>105000000.0</td>\n",
       "      <td>94784201.0</td>\n",
       "      <td>269065678.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102 Dalmatians</th>\n",
       "      <td>6</td>\n",
       "      <td>2000-11-22</td>\n",
       "      <td>85000000.0</td>\n",
       "      <td>66941559.0</td>\n",
       "      <td>66941559.0</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10th &amp; Wolf</th>\n",
       "      <td>32</td>\n",
       "      <td>2006-08-18</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>54702.0</td>\n",
       "      <td>143782.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11:14</th>\n",
       "      <td>90</td>\n",
       "      <td>2005-08-12</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12 Angry Men</th>\n",
       "      <td>36</td>\n",
       "      <td>1957-04-13</td>\n",
       "      <td>340000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1957</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            id release_date  production_budget  \\\n",
       "title                                                            \n",
       "#Horror                     16   2015-11-20          1500000.0   \n",
       "(500) Days of Summer        55   2009-07-17          7500000.0   \n",
       "10 Cloverfield Lane         54   2016-03-11          5000000.0   \n",
       "10 Days in a Madhouse       48   2015-11-11         12000000.0   \n",
       "10 Things I Hate About You  63   1999-03-31         13000000.0   \n",
       "10,000 B.C.                 51   2008-03-07        105000000.0   \n",
       "102 Dalmatians               6   2000-11-22         85000000.0   \n",
       "10th & Wolf                 32   2006-08-18          8000000.0   \n",
       "11:14                       90   2005-08-12          6000000.0   \n",
       "12 Angry Men                36   1957-04-13           340000.0   \n",
       "\n",
       "                            domestic_gross  worldwide_gross  year studio  \n",
       "title                                                                     \n",
       "#Horror                                NaN              NaN  2015    NaN  \n",
       "(500) Days of Summer            32425665.0       34439060.0  2009    NaN  \n",
       "10 Cloverfield Lane             72082999.0      108286422.0  2016   Par.  \n",
       "10 Days in a Madhouse              14616.0          14616.0  2015    NaN  \n",
       "10 Things I Hate About You      38177966.0       60413950.0  1999    NaN  \n",
       "10,000 B.C.                     94784201.0      269065678.0  2008    NaN  \n",
       "102 Dalmatians                  66941559.0       66941559.0  2000    NaN  \n",
       "10th & Wolf                        54702.0         143782.0  2006    NaN  \n",
       "11:14                                  NaN              NaN  2005    NaN  \n",
       "12 Angry Men                           NaN              NaN  1957    NaN  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert \"0\" values to NaN\n",
    "df_financials['production_budget'] = df_financials['production_budget'].replace(0.0, np.nan)\n",
    "df_financials['domestic_gross'] = df_financials['domestic_gross'].replace(0.0, np.nan)\n",
    "df_financials['worldwide_gross'] = df_financials['worldwide_gross'].replace(0.0, np.nan)\n",
    "df_financials.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>#Horror</th>\n",
       "      <td>16</td>\n",
       "      <td>2015-11-20</td>\n",
       "      <td>1500000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(500) Days of Summer</th>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2013395.0</td>\n",
       "      <td>26939060.0</td>\n",
       "      <td>3.59</td>\n",
       "      <td>359.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Cloverfield Lane</th>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>36203423.0</td>\n",
       "      <td>103286422.0</td>\n",
       "      <td>20.66</td>\n",
       "      <td>2065.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Days in a Madhouse</th>\n",
       "      <td>48</td>\n",
       "      <td>2015-11-11</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-11985384.0</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-99.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10 Things I Hate About You</th>\n",
       "      <td>63</td>\n",
       "      <td>1999-03-31</td>\n",
       "      <td>13000000.0</td>\n",
       "      <td>38177966.0</td>\n",
       "      <td>60413950.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22235984.0</td>\n",
       "      <td>47413950.0</td>\n",
       "      <td>3.65</td>\n",
       "      <td>364.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            id release_date  production_budget  \\\n",
       "title                                                            \n",
       "#Horror                     16   2015-11-20          1500000.0   \n",
       "(500) Days of Summer        55   2009-07-17          7500000.0   \n",
       "10 Cloverfield Lane         54   2016-03-11          5000000.0   \n",
       "10 Days in a Madhouse       48   2015-11-11         12000000.0   \n",
       "10 Things I Hate About You  63   1999-03-31         13000000.0   \n",
       "\n",
       "                            domestic_gross  worldwide_gross  year studio  \\\n",
       "title                                                                      \n",
       "#Horror                                NaN              NaN  2015    NaN   \n",
       "(500) Days of Summer            32425665.0       34439060.0  2009    NaN   \n",
       "10 Cloverfield Lane             72082999.0      108286422.0  2016   Par.   \n",
       "10 Days in a Madhouse              14616.0          14616.0  2015    NaN   \n",
       "10 Things I Hate About You      38177966.0       60413950.0  1999    NaN   \n",
       "\n",
       "                            foreign_gross  net_revenue    ROI   ROIpct  \n",
       "title                                                                   \n",
       "#Horror                               NaN          NaN    NaN      NaN  \n",
       "(500) Days of Summer            2013395.0   26939060.0   3.59   359.19  \n",
       "10 Cloverfield Lane            36203423.0  103286422.0  20.66  2065.73  \n",
       "10 Days in a Madhouse                 0.0  -11985384.0  -1.00   -99.88  \n",
       "10 Things I Hate About You     22235984.0   47413950.0   3.65   364.72  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create new cols for foreign_gross, net_revenue, ROI\n",
    "df_financials['foreign_gross'] = df_financials['worldwide_gross'] - df_financials['domestic_gross']\n",
    "df_financials['net_revenue'] = df_financials['worldwide_gross'] - df_financials['production_budget']\n",
    "df_financials['ROI'] = ((df_financials['worldwide_gross'] - df_financials['production_budget']) / df_financials['production_budget']).round(2)\n",
    "df_financials['ROIpct'] = (((df_financials['worldwide_gross'] - df_financials['production_budget']) / df_financials['production_budget'])*100).round(2)\n",
    "df_financials.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reset index\n",
    "df_financials.reset_index(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Halloween             3\n",
       "King Kong             3\n",
       "Home                  3\n",
       "Godzilla              2\n",
       "The Island            2\n",
       "                     ..\n",
       "Burn Your Maps        1\n",
       "Stigmata              1\n",
       "The Dark Half         1\n",
       "Sex and the City 2    1\n",
       "Fight Valley          1\n",
       "Name: title, Length: 5698, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for duplicates. Explore if need to remove or can keep.\n",
    "df_financials['title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>20,000 Leagues Under the Sea</td>\n",
       "      <td>15</td>\n",
       "      <td>1916-12-24</td>\n",
       "      <td>200000.0</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>1916</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800000.0</td>\n",
       "      <td>39.00</td>\n",
       "      <td>3900.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141</th>\n",
       "      <td>A Nightmare on Elm Street</td>\n",
       "      <td>17</td>\n",
       "      <td>1984-11-09</td>\n",
       "      <td>1800000.0</td>\n",
       "      <td>25504513.0</td>\n",
       "      <td>25504513.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>23704513.0</td>\n",
       "      <td>13.17</td>\n",
       "      <td>1316.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Aladdin</td>\n",
       "      <td>33</td>\n",
       "      <td>1992-11-11</td>\n",
       "      <td>28000000.0</td>\n",
       "      <td>217350219.0</td>\n",
       "      <td>504050219.0</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>286700000.0</td>\n",
       "      <td>476050219.0</td>\n",
       "      <td>17.00</td>\n",
       "      <td>1700.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>Alice in Wonderland</td>\n",
       "      <td>60</td>\n",
       "      <td>1951-07-28</td>\n",
       "      <td>3000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1951</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406</th>\n",
       "      <td>Around the World in 80 Days</td>\n",
       "      <td>21</td>\n",
       "      <td>1956-10-17</td>\n",
       "      <td>6000000.0</td>\n",
       "      <td>42000000.0</td>\n",
       "      <td>42000000.0</td>\n",
       "      <td>1956</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36000000.0</td>\n",
       "      <td>6.00</td>\n",
       "      <td>600.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5351</th>\n",
       "      <td>Trance</td>\n",
       "      <td>31</td>\n",
       "      <td>2012-12-31</td>\n",
       "      <td>950000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2012</td>\n",
       "      <td>FoxS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5408</th>\n",
       "      <td>Twilight</td>\n",
       "      <td>20</td>\n",
       "      <td>1998-03-06</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>15055091.0</td>\n",
       "      <td>15055091.0</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-4944909.0</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-24.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5463</th>\n",
       "      <td>Unforgettable</td>\n",
       "      <td>4</td>\n",
       "      <td>2017-04-21</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>11368012.0</td>\n",
       "      <td>16221211.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4853199.0</td>\n",
       "      <td>4221211.0</td>\n",
       "      <td>0.35</td>\n",
       "      <td>35.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5472</th>\n",
       "      <td>Unknown</td>\n",
       "      <td>84</td>\n",
       "      <td>2006-11-03</td>\n",
       "      <td>3700000.0</td>\n",
       "      <td>26403.0</td>\n",
       "      <td>3355048.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>WB</td>\n",
       "      <td>3328645.0</td>\n",
       "      <td>-344952.0</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>-9.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5512</th>\n",
       "      <td>Venom</td>\n",
       "      <td>14</td>\n",
       "      <td>2005-09-16</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>881745.0</td>\n",
       "      <td>881745.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-24118255.0</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>-96.47</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>84 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             title  id release_date  production_budget  \\\n",
       "33    20,000 Leagues Under the Sea  15   1916-12-24           200000.0   \n",
       "141      A Nightmare on Elm Street  17   1984-11-09          1800000.0   \n",
       "232                        Aladdin  33   1992-11-11         28000000.0   \n",
       "246            Alice in Wonderland  60   1951-07-28          3000000.0   \n",
       "406    Around the World in 80 Days  21   1956-10-17          6000000.0   \n",
       "...                            ...  ..          ...                ...   \n",
       "5351                        Trance  31   2012-12-31           950000.0   \n",
       "5408                      Twilight  20   1998-03-06         20000000.0   \n",
       "5463                 Unforgettable   4   2017-04-21         12000000.0   \n",
       "5472                       Unknown  84   2006-11-03          3700000.0   \n",
       "5512                         Venom  14   2005-09-16         25000000.0   \n",
       "\n",
       "      domestic_gross  worldwide_gross  year studio  foreign_gross  \\\n",
       "33         8000000.0        8000000.0  1916    NaN            0.0   \n",
       "141       25504513.0       25504513.0  1984    NaN            0.0   \n",
       "232      217350219.0      504050219.0  1992    NaN    286700000.0   \n",
       "246              NaN              NaN  1951    NaN            NaN   \n",
       "406       42000000.0       42000000.0  1956    NaN            0.0   \n",
       "...              ...              ...   ...    ...            ...   \n",
       "5351             NaN              NaN  2012   FoxS            NaN   \n",
       "5408      15055091.0       15055091.0  1998    NaN            0.0   \n",
       "5463      11368012.0       16221211.0  2017    NaN      4853199.0   \n",
       "5472         26403.0        3355048.0  2006     WB      3328645.0   \n",
       "5512        881745.0         881745.0  2005    NaN            0.0   \n",
       "\n",
       "      net_revenue    ROI   ROIpct  \n",
       "33      7800000.0  39.00  3900.00  \n",
       "141    23704513.0  13.17  1316.92  \n",
       "232   476050219.0  17.00  1700.18  \n",
       "246           NaN    NaN      NaN  \n",
       "406    36000000.0   6.00   600.00  \n",
       "...           ...    ...      ...  \n",
       "5351          NaN    NaN      NaN  \n",
       "5408   -4944909.0  -0.25   -24.72  \n",
       "5463    4221211.0   0.35    35.18  \n",
       "5472    -344952.0  -0.09    -9.32  \n",
       "5512  -24118255.0  -0.96   -96.47  \n",
       "\n",
       "[84 rows x 12 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials[df_financials['title'].duplicated() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>Aladdin</td>\n",
       "      <td>81</td>\n",
       "      <td>2019-05-24</td>\n",
       "      <td>182000000.0</td>\n",
       "      <td>246734314.0</td>\n",
       "      <td>6.192343e+08</td>\n",
       "      <td>2019</td>\n",
       "      <td>NaN</td>\n",
       "      <td>372500000.0</td>\n",
       "      <td>437234314.0</td>\n",
       "      <td>2.40</td>\n",
       "      <td>240.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Aladdin</td>\n",
       "      <td>33</td>\n",
       "      <td>1992-11-11</td>\n",
       "      <td>28000000.0</td>\n",
       "      <td>217350219.0</td>\n",
       "      <td>5.040502e+08</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>286700000.0</td>\n",
       "      <td>476050219.0</td>\n",
       "      <td>17.00</td>\n",
       "      <td>1700.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>Alatriste</td>\n",
       "      <td>81</td>\n",
       "      <td>2007-12-31</td>\n",
       "      <td>28000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.286048e+07</td>\n",
       "      <td>2007</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-5139523.0</td>\n",
       "      <td>-0.18</td>\n",
       "      <td>-18.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>Albert Nobbs</td>\n",
       "      <td>67</td>\n",
       "      <td>2011-12-21</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>3014696.0</td>\n",
       "      <td>8.539003e+06</td>\n",
       "      <td>2011</td>\n",
       "      <td>RAtt.</td>\n",
       "      <td>5524307.0</td>\n",
       "      <td>1039003.0</td>\n",
       "      <td>0.14</td>\n",
       "      <td>13.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>Albino Alligator</td>\n",
       "      <td>65</td>\n",
       "      <td>1997-01-17</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>353480.0</td>\n",
       "      <td>3.534800e+05</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-4646520.0</td>\n",
       "      <td>-0.93</td>\n",
       "      <td>-92.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>Alex &amp; Emma</td>\n",
       "      <td>70</td>\n",
       "      <td>2003-06-20</td>\n",
       "      <td>30000000.0</td>\n",
       "      <td>14208384.0</td>\n",
       "      <td>1.535858e+07</td>\n",
       "      <td>2003</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1150199.0</td>\n",
       "      <td>-14641417.0</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-48.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>Alex Cross</td>\n",
       "      <td>100</td>\n",
       "      <td>2012-10-19</td>\n",
       "      <td>35000000.0</td>\n",
       "      <td>25888412.0</td>\n",
       "      <td>3.542676e+07</td>\n",
       "      <td>2012</td>\n",
       "      <td>LG/S</td>\n",
       "      <td>9538347.0</td>\n",
       "      <td>426759.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>Alex Rider: Operation Stormbreaker</td>\n",
       "      <td>34</td>\n",
       "      <td>2006-10-13</td>\n",
       "      <td>40000000.0</td>\n",
       "      <td>659210.0</td>\n",
       "      <td>2.072245e+07</td>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20063240.0</td>\n",
       "      <td>-19277550.0</td>\n",
       "      <td>-0.48</td>\n",
       "      <td>-48.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>Alexander</td>\n",
       "      <td>51</td>\n",
       "      <td>2004-11-24</td>\n",
       "      <td>155000000.0</td>\n",
       "      <td>34297191.0</td>\n",
       "      <td>1.672972e+08</td>\n",
       "      <td>2004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>133000000.0</td>\n",
       "      <td>12297191.0</td>\n",
       "      <td>0.08</td>\n",
       "      <td>7.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>Alexander and the Terrible, Horrible, No Good,...</td>\n",
       "      <td>44</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>28000000.0</td>\n",
       "      <td>66954149.0</td>\n",
       "      <td>1.013793e+08</td>\n",
       "      <td>2014</td>\n",
       "      <td>BV</td>\n",
       "      <td>34425138.0</td>\n",
       "      <td>73379287.0</td>\n",
       "      <td>2.62</td>\n",
       "      <td>262.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>Alexander's Ragtime Band</td>\n",
       "      <td>18</td>\n",
       "      <td>1938-05-24</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>4000000.0</td>\n",
       "      <td>4.000000e+06</td>\n",
       "      <td>1938</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>100.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>Alfie</td>\n",
       "      <td>12</td>\n",
       "      <td>2004-11-05</td>\n",
       "      <td>40000000.0</td>\n",
       "      <td>13395939.0</td>\n",
       "      <td>3.519594e+07</td>\n",
       "      <td>2004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21800000.0</td>\n",
       "      <td>-4804061.0</td>\n",
       "      <td>-0.12</td>\n",
       "      <td>-12.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>Ali</td>\n",
       "      <td>45</td>\n",
       "      <td>2001-12-25</td>\n",
       "      <td>109000000.0</td>\n",
       "      <td>58183966.0</td>\n",
       "      <td>8.768397e+07</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29500000.0</td>\n",
       "      <td>-21316034.0</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>-19.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>Alice Through the Looking Glass</td>\n",
       "      <td>26</td>\n",
       "      <td>2016-05-27</td>\n",
       "      <td>170000000.0</td>\n",
       "      <td>77042381.0</td>\n",
       "      <td>2.769281e+08</td>\n",
       "      <td>2016</td>\n",
       "      <td>BV</td>\n",
       "      <td>199885731.0</td>\n",
       "      <td>106928112.0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>62.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>Alice in Wonderland</td>\n",
       "      <td>60</td>\n",
       "      <td>1951-07-28</td>\n",
       "      <td>3000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1951</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>Alice in Wonderland</td>\n",
       "      <td>51</td>\n",
       "      <td>2010-03-05</td>\n",
       "      <td>200000000.0</td>\n",
       "      <td>334191110.0</td>\n",
       "      <td>1.025491e+09</td>\n",
       "      <td>2010</td>\n",
       "      <td>NaN</td>\n",
       "      <td>691300000.0</td>\n",
       "      <td>825491110.0</td>\n",
       "      <td>4.13</td>\n",
       "      <td>412.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>Alien</td>\n",
       "      <td>21</td>\n",
       "      <td>1979-05-25</td>\n",
       "      <td>10700000.0</td>\n",
       "      <td>80930630.0</td>\n",
       "      <td>2.036289e+08</td>\n",
       "      <td>1979</td>\n",
       "      <td>NaN</td>\n",
       "      <td>122698317.0</td>\n",
       "      <td>192928947.0</td>\n",
       "      <td>18.03</td>\n",
       "      <td>1803.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>Alien 3</td>\n",
       "      <td>17</td>\n",
       "      <td>1992-05-22</td>\n",
       "      <td>55000000.0</td>\n",
       "      <td>54927174.0</td>\n",
       "      <td>1.585000e+08</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103572826.0</td>\n",
       "      <td>103500000.0</td>\n",
       "      <td>1.88</td>\n",
       "      <td>188.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>Alien Uprising</td>\n",
       "      <td>44</td>\n",
       "      <td>2013-06-21</td>\n",
       "      <td>2500000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 title   id release_date  \\\n",
       "231                                            Aladdin   81   2019-05-24   \n",
       "232                                            Aladdin   33   1992-11-11   \n",
       "233                                          Alatriste   81   2007-12-31   \n",
       "234                                       Albert Nobbs   67   2011-12-21   \n",
       "235                                   Albino Alligator   65   1997-01-17   \n",
       "236                                        Alex & Emma   70   2003-06-20   \n",
       "237                                         Alex Cross  100   2012-10-19   \n",
       "238                 Alex Rider: Operation Stormbreaker   34   2006-10-13   \n",
       "239                                          Alexander   51   2004-11-24   \n",
       "240  Alexander and the Terrible, Horrible, No Good,...   44   2014-10-10   \n",
       "241                           Alexander's Ragtime Band   18   1938-05-24   \n",
       "242                                              Alfie   12   2004-11-05   \n",
       "243                                                Ali   45   2001-12-25   \n",
       "244                    Alice Through the Looking Glass   26   2016-05-27   \n",
       "246                                Alice in Wonderland   60   1951-07-28   \n",
       "245                                Alice in Wonderland   51   2010-03-05   \n",
       "247                                              Alien   21   1979-05-25   \n",
       "248                                            Alien 3   17   1992-05-22   \n",
       "249                                     Alien Uprising   44   2013-06-21   \n",
       "\n",
       "     production_budget  domestic_gross  worldwide_gross  year studio  \\\n",
       "231        182000000.0     246734314.0     6.192343e+08  2019    NaN   \n",
       "232         28000000.0     217350219.0     5.040502e+08  1992    NaN   \n",
       "233         28000000.0             NaN     2.286048e+07  2007    NaN   \n",
       "234          7500000.0       3014696.0     8.539003e+06  2011  RAtt.   \n",
       "235          5000000.0        353480.0     3.534800e+05  1997    NaN   \n",
       "236         30000000.0      14208384.0     1.535858e+07  2003    NaN   \n",
       "237         35000000.0      25888412.0     3.542676e+07  2012   LG/S   \n",
       "238         40000000.0        659210.0     2.072245e+07  2006    NaN   \n",
       "239        155000000.0      34297191.0     1.672972e+08  2004    NaN   \n",
       "240         28000000.0      66954149.0     1.013793e+08  2014     BV   \n",
       "241          2000000.0       4000000.0     4.000000e+06  1938    NaN   \n",
       "242         40000000.0      13395939.0     3.519594e+07  2004    NaN   \n",
       "243        109000000.0      58183966.0     8.768397e+07  2001    NaN   \n",
       "244        170000000.0      77042381.0     2.769281e+08  2016     BV   \n",
       "246          3000000.0             NaN              NaN  1951    NaN   \n",
       "245        200000000.0     334191110.0     1.025491e+09  2010    NaN   \n",
       "247         10700000.0      80930630.0     2.036289e+08  1979    NaN   \n",
       "248         55000000.0      54927174.0     1.585000e+08  1992    NaN   \n",
       "249          2500000.0             NaN              NaN  2013    NaN   \n",
       "\n",
       "     foreign_gross  net_revenue    ROI   ROIpct  \n",
       "231    372500000.0  437234314.0   2.40   240.24  \n",
       "232    286700000.0  476050219.0  17.00  1700.18  \n",
       "233            NaN   -5139523.0  -0.18   -18.36  \n",
       "234      5524307.0    1039003.0   0.14    13.85  \n",
       "235            0.0   -4646520.0  -0.93   -92.93  \n",
       "236      1150199.0  -14641417.0  -0.49   -48.80  \n",
       "237      9538347.0     426759.0   0.01     1.22  \n",
       "238     20063240.0  -19277550.0  -0.48   -48.19  \n",
       "239    133000000.0   12297191.0   0.08     7.93  \n",
       "240     34425138.0   73379287.0   2.62   262.07  \n",
       "241            0.0    2000000.0   1.00   100.00  \n",
       "242     21800000.0   -4804061.0  -0.12   -12.01  \n",
       "243     29500000.0  -21316034.0  -0.20   -19.56  \n",
       "244    199885731.0  106928112.0   0.63    62.90  \n",
       "246            NaN          NaN    NaN      NaN  \n",
       "245    691300000.0  825491110.0   4.13   412.75  \n",
       "247    122698317.0  192928947.0  18.03  1803.07  \n",
       "248    103572826.0  103500000.0   1.88   188.18  \n",
       "249            NaN          NaN    NaN      NaN  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# view selection of rows with duplicate titles\n",
    "df_financials.sort_values('title').iloc[231:250, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#Horror</td>\n",
       "      <td>16</td>\n",
       "      <td>2015-11-20</td>\n",
       "      <td>1500000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#Horror-2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(500) Days of Summer</td>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2013395.0</td>\n",
       "      <td>26939060.0</td>\n",
       "      <td>3.59</td>\n",
       "      <td>359.19</td>\n",
       "      <td>(500) Days of Summer-2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10 Cloverfield Lane</td>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>36203423.0</td>\n",
       "      <td>103286422.0</td>\n",
       "      <td>20.66</td>\n",
       "      <td>2065.73</td>\n",
       "      <td>10 Cloverfield Lane-2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10 Days in a Madhouse</td>\n",
       "      <td>48</td>\n",
       "      <td>2015-11-11</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-11985384.0</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-99.88</td>\n",
       "      <td>10 Days in a Madhouse-2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10 Things I Hate About You</td>\n",
       "      <td>63</td>\n",
       "      <td>1999-03-31</td>\n",
       "      <td>13000000.0</td>\n",
       "      <td>38177966.0</td>\n",
       "      <td>60413950.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22235984.0</td>\n",
       "      <td>47413950.0</td>\n",
       "      <td>3.65</td>\n",
       "      <td>364.72</td>\n",
       "      <td>10 Things I Hate About You-1999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        title  id release_date  production_budget  \\\n",
       "0                     #Horror  16   2015-11-20          1500000.0   \n",
       "1        (500) Days of Summer  55   2009-07-17          7500000.0   \n",
       "2         10 Cloverfield Lane  54   2016-03-11          5000000.0   \n",
       "3       10 Days in a Madhouse  48   2015-11-11         12000000.0   \n",
       "4  10 Things I Hate About You  63   1999-03-31         13000000.0   \n",
       "\n",
       "   domestic_gross  worldwide_gross  year studio  foreign_gross  net_revenue  \\\n",
       "0             NaN              NaN  2015    NaN            NaN          NaN   \n",
       "1      32425665.0       34439060.0  2009    NaN      2013395.0   26939060.0   \n",
       "2      72082999.0      108286422.0  2016   Par.     36203423.0  103286422.0   \n",
       "3         14616.0          14616.0  2015    NaN            0.0  -11985384.0   \n",
       "4      38177966.0       60413950.0  1999    NaN     22235984.0   47413950.0   \n",
       "\n",
       "     ROI   ROIpct                         title_yr  \n",
       "0    NaN      NaN                     #Horror-2015  \n",
       "1   3.59   359.19        (500) Days of Summer-2009  \n",
       "2  20.66  2065.73         10 Cloverfield Lane-2016  \n",
       "3  -1.00   -99.88       10 Days in a Madhouse-2015  \n",
       "4   3.65   364.72  10 Things I Hate About You-1999  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Duplicate movie titles are due to movie being re-released years later. \n",
    "# Keep all rows and create new col 'title_yr'. \n",
    "df_financials['title_yr'] = df_financials['title'].str.cat(df_financials.year.astype(str), sep = '-')\n",
    "df_financials.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020</th>\n",
       "      <td>Home</td>\n",
       "      <td>60</td>\n",
       "      <td>2009-04-23</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>15433.0</td>\n",
       "      <td>44793168.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44777735.0</td>\n",
       "      <td>44293168.0</td>\n",
       "      <td>88.59</td>\n",
       "      <td>8858.63</td>\n",
       "      <td>Home-2009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     title  id release_date  production_budget  domestic_gross  \\\n",
       "2020  Home  60   2009-04-23           500000.0         15433.0   \n",
       "\n",
       "      worldwide_gross  year studio  foreign_gross  net_revenue    ROI  \\\n",
       "2020       44793168.0  2009    NaN     44777735.0   44293168.0  88.59   \n",
       "\n",
       "       ROIpct   title_yr  \n",
       "2020  8858.63  Home-2009  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials[df_financials['title_yr'].duplicated() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Holy Motors</td>\n",
       "      <td>25</td>\n",
       "      <td>2012-10-17</td>\n",
       "      <td>4000000.0</td>\n",
       "      <td>641054.0</td>\n",
       "      <td>4230426.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>IM</td>\n",
       "      <td>3589372.0</td>\n",
       "      <td>230426.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Holy Motors-2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020</th>\n",
       "      <td>Home</td>\n",
       "      <td>60</td>\n",
       "      <td>2009-04-23</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>15433.0</td>\n",
       "      <td>44793168.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44777735.0</td>\n",
       "      <td>44293168.0</td>\n",
       "      <td>88.59</td>\n",
       "      <td>8858.63</td>\n",
       "      <td>Home-2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>Home</td>\n",
       "      <td>56</td>\n",
       "      <td>2009-06-05</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Home-2009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Home</td>\n",
       "      <td>44</td>\n",
       "      <td>2015-03-27</td>\n",
       "      <td>130000000.0</td>\n",
       "      <td>177397510.0</td>\n",
       "      <td>385997896.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>208600386.0</td>\n",
       "      <td>255997896.0</td>\n",
       "      <td>1.97</td>\n",
       "      <td>196.92</td>\n",
       "      <td>Home-2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>Home Again</td>\n",
       "      <td>57</td>\n",
       "      <td>2017-09-08</td>\n",
       "      <td>15000000.0</td>\n",
       "      <td>27020284.0</td>\n",
       "      <td>37336874.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>ORF</td>\n",
       "      <td>10316590.0</td>\n",
       "      <td>22336874.0</td>\n",
       "      <td>1.49</td>\n",
       "      <td>148.91</td>\n",
       "      <td>Home Again-2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            title  id release_date  production_budget  domestic_gross  \\\n",
       "2017  Holy Motors  25   2012-10-17          4000000.0        641054.0   \n",
       "2020         Home  60   2009-04-23           500000.0         15433.0   \n",
       "2019         Home  56   2009-06-05         12000000.0             NaN   \n",
       "2018         Home  44   2015-03-27        130000000.0     177397510.0   \n",
       "2021   Home Again  57   2017-09-08         15000000.0      27020284.0   \n",
       "\n",
       "      worldwide_gross  year studio  foreign_gross  net_revenue    ROI  \\\n",
       "2017        4230426.0  2012     IM      3589372.0     230426.0   0.06   \n",
       "2020       44793168.0  2009    NaN     44777735.0   44293168.0  88.59   \n",
       "2019              NaN  2009    NaN            NaN          NaN    NaN   \n",
       "2018      385997896.0  2015    NaN    208600386.0  255997896.0   1.97   \n",
       "2021       37336874.0  2017    ORF     10316590.0   22336874.0   1.49   \n",
       "\n",
       "       ROIpct          title_yr  \n",
       "2017     5.76  Holy Motors-2012  \n",
       "2020  8858.63         Home-2009  \n",
       "2019      NaN         Home-2009  \n",
       "2018   196.92         Home-2015  \n",
       "2021   148.91   Home Again-2017  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials.sort_values('title').iloc[2017:2022, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Home movie - Double entry for 2009 release--unable to determine which one has accurate data, both appear to have notable outliers. Remove two 2009 entries.\n",
    "df_financials = df_financials.drop([2019, 2020])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [title, id, release_date, production_budget, domestic_gross, worldwide_gross, year, studio, foreign_gross, net_revenue, ROI, ROIpct, title_yr]\n",
       "Index: []"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials[df_financials['title_yr'].duplicated() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>Holy Motors</td>\n",
       "      <td>25</td>\n",
       "      <td>2012-10-17</td>\n",
       "      <td>4000000.0</td>\n",
       "      <td>641054.0</td>\n",
       "      <td>4230426.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>IM</td>\n",
       "      <td>3589372.0</td>\n",
       "      <td>230426.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Holy Motors-2012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>Home</td>\n",
       "      <td>44</td>\n",
       "      <td>2015-03-27</td>\n",
       "      <td>130000000.0</td>\n",
       "      <td>177397510.0</td>\n",
       "      <td>385997896.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>208600386.0</td>\n",
       "      <td>255997896.0</td>\n",
       "      <td>1.97</td>\n",
       "      <td>196.92</td>\n",
       "      <td>Home-2015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>Home Again</td>\n",
       "      <td>57</td>\n",
       "      <td>2017-09-08</td>\n",
       "      <td>15000000.0</td>\n",
       "      <td>27020284.0</td>\n",
       "      <td>37336874.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>ORF</td>\n",
       "      <td>10316590.0</td>\n",
       "      <td>22336874.0</td>\n",
       "      <td>1.49</td>\n",
       "      <td>148.91</td>\n",
       "      <td>Home Again-2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022</th>\n",
       "      <td>Home Alone</td>\n",
       "      <td>92</td>\n",
       "      <td>1990-11-16</td>\n",
       "      <td>15000000.0</td>\n",
       "      <td>285761243.0</td>\n",
       "      <td>476684675.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>190923432.0</td>\n",
       "      <td>461684675.0</td>\n",
       "      <td>30.78</td>\n",
       "      <td>3077.90</td>\n",
       "      <td>Home Alone-1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023</th>\n",
       "      <td>Home Alone 2: Lost in New York</td>\n",
       "      <td>89</td>\n",
       "      <td>1992-11-20</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>173585516.0</td>\n",
       "      <td>358994850.0</td>\n",
       "      <td>1992</td>\n",
       "      <td>NaN</td>\n",
       "      <td>185409334.0</td>\n",
       "      <td>338994850.0</td>\n",
       "      <td>16.95</td>\n",
       "      <td>1694.97</td>\n",
       "      <td>Home Alone 2: Lost in New York-1992</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               title  id release_date  production_budget  \\\n",
       "2017                     Holy Motors  25   2012-10-17          4000000.0   \n",
       "2018                            Home  44   2015-03-27        130000000.0   \n",
       "2021                      Home Again  57   2017-09-08         15000000.0   \n",
       "2022                      Home Alone  92   1990-11-16         15000000.0   \n",
       "2023  Home Alone 2: Lost in New York  89   1992-11-20         20000000.0   \n",
       "\n",
       "      domestic_gross  worldwide_gross  year studio  foreign_gross  \\\n",
       "2017        641054.0        4230426.0  2012     IM      3589372.0   \n",
       "2018     177397510.0      385997896.0  2015    NaN    208600386.0   \n",
       "2021      27020284.0       37336874.0  2017    ORF     10316590.0   \n",
       "2022     285761243.0      476684675.0  1990    NaN    190923432.0   \n",
       "2023     173585516.0      358994850.0  1992    NaN    185409334.0   \n",
       "\n",
       "      net_revenue    ROI   ROIpct                             title_yr  \n",
       "2017     230426.0   0.06     5.76                     Holy Motors-2012  \n",
       "2018  255997896.0   1.97   196.92                            Home-2015  \n",
       "2021   22336874.0   1.49   148.91                      Home Again-2017  \n",
       "2022  461684675.0  30.78  3077.90                      Home Alone-1990  \n",
       "2023  338994850.0  16.95  1694.97  Home Alone 2: Lost in New York-1992  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_financials.sort_values('title').iloc[2017:2022, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "      <th>month_num</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#Horror</td>\n",
       "      <td>16</td>\n",
       "      <td>2015-11-20</td>\n",
       "      <td>1500000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#Horror-2015</td>\n",
       "      <td>11</td>\n",
       "      <td>Nov</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(500) Days of Summer</td>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2013395.0</td>\n",
       "      <td>26939060.0</td>\n",
       "      <td>3.59</td>\n",
       "      <td>359.19</td>\n",
       "      <td>(500) Days of Summer-2009</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10 Cloverfield Lane</td>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>36203423.0</td>\n",
       "      <td>103286422.0</td>\n",
       "      <td>20.66</td>\n",
       "      <td>2065.73</td>\n",
       "      <td>10 Cloverfield Lane-2016</td>\n",
       "      <td>3</td>\n",
       "      <td>Mar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10 Days in a Madhouse</td>\n",
       "      <td>48</td>\n",
       "      <td>2015-11-11</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>14616.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-11985384.0</td>\n",
       "      <td>-1.00</td>\n",
       "      <td>-99.88</td>\n",
       "      <td>10 Days in a Madhouse-2015</td>\n",
       "      <td>11</td>\n",
       "      <td>Nov</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10 Things I Hate About You</td>\n",
       "      <td>63</td>\n",
       "      <td>1999-03-31</td>\n",
       "      <td>13000000.0</td>\n",
       "      <td>38177966.0</td>\n",
       "      <td>60413950.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22235984.0</td>\n",
       "      <td>47413950.0</td>\n",
       "      <td>3.65</td>\n",
       "      <td>364.72</td>\n",
       "      <td>10 Things I Hate About You-1999</td>\n",
       "      <td>3</td>\n",
       "      <td>Mar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        title  id release_date  production_budget  \\\n",
       "0                     #Horror  16   2015-11-20          1500000.0   \n",
       "1        (500) Days of Summer  55   2009-07-17          7500000.0   \n",
       "2         10 Cloverfield Lane  54   2016-03-11          5000000.0   \n",
       "3       10 Days in a Madhouse  48   2015-11-11         12000000.0   \n",
       "4  10 Things I Hate About You  63   1999-03-31         13000000.0   \n",
       "\n",
       "   domestic_gross  worldwide_gross  year studio  foreign_gross  net_revenue  \\\n",
       "0             NaN              NaN  2015    NaN            NaN          NaN   \n",
       "1      32425665.0       34439060.0  2009    NaN      2013395.0   26939060.0   \n",
       "2      72082999.0      108286422.0  2016   Par.     36203423.0  103286422.0   \n",
       "3         14616.0          14616.0  2015    NaN            0.0  -11985384.0   \n",
       "4      38177966.0       60413950.0  1999    NaN     22235984.0   47413950.0   \n",
       "\n",
       "     ROI   ROIpct                         title_yr  month_num month  \n",
       "0    NaN      NaN                     #Horror-2015         11   Nov  \n",
       "1   3.59   359.19        (500) Days of Summer-2009          7   Jul  \n",
       "2  20.66  2065.73         10 Cloverfield Lane-2016          3   Mar  \n",
       "3  -1.00   -99.88       10 Days in a Madhouse-2015         11   Nov  \n",
       "4   3.65   364.72  10 Things I Hate About You-1999          3   Mar  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create month col\n",
    "df_financials['month_num'] = pd.DatetimeIndex(df_financials['release_date']).month\n",
    "df_financials['month'] = pd.to_datetime(df_financials['month_num'], format='%m').dt.month_name().str.slice(stop=3)\n",
    "df_financials.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Examine distribution of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5780 entries, 0 to 5781\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   title              5780 non-null   object        \n",
      " 1   id                 5780 non-null   int64         \n",
      " 2   release_date       5780 non-null   datetime64[ns]\n",
      " 3   production_budget  5780 non-null   float64       \n",
      " 4   domestic_gross     5233 non-null   float64       \n",
      " 5   worldwide_gross    5414 non-null   float64       \n",
      " 6   year               5780 non-null   int64         \n",
      " 7   studio             1246 non-null   object        \n",
      " 8   foreign_gross      5233 non-null   float64       \n",
      " 9   net_revenue        5414 non-null   float64       \n",
      " 10  ROI                5414 non-null   float64       \n",
      " 11  ROIpct             5414 non-null   float64       \n",
      " 12  title_yr           5780 non-null   object        \n",
      " 13  month_num          5780 non-null   int64         \n",
      " 14  month              5780 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(7), int64(3), object(4)\n",
      "memory usage: 722.5+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.159652e+07</td>\n",
       "      <td>4.626630e+07</td>\n",
       "      <td>9.769777e+07</td>\n",
       "      <td>5.450590e+07</td>\n",
       "      <td>6.438370e+07</td>\n",
       "      <td>4.109852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median</th>\n",
       "      <td>1.700000e+07</td>\n",
       "      <td>2.199526e+07</td>\n",
       "      <td>3.331993e+07</td>\n",
       "      <td>9.400000e+06</td>\n",
       "      <td>1.189567e+07</td>\n",
       "      <td>0.880000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.181652e+07</td>\n",
       "      <td>7.030032e+07</td>\n",
       "      <td>1.788742e+08</td>\n",
       "      <td>1.177941e+08</td>\n",
       "      <td>1.498716e+08</td>\n",
       "      <td>30.468579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        production_budget  domestic_gross  worldwide_gross  foreign_gross  \\\n",
       "mean         3.159652e+07    4.626630e+07     9.769777e+07   5.450590e+07   \n",
       "median       1.700000e+07    2.199526e+07     3.331993e+07   9.400000e+06   \n",
       "std          4.181652e+07    7.030032e+07     1.788742e+08   1.177941e+08   \n",
       "\n",
       "         net_revenue        ROI  \n",
       "mean    6.438370e+07   4.109852  \n",
       "median  1.189567e+07   0.880000  \n",
       "std     1.498716e+08  30.468579  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id                   7.500000e+01\n",
       "production_budget    4.000000e+07\n",
       "domestic_gross       5.759825e+07\n",
       "worldwide_gross      1.044737e+08\n",
       "year                 2.012000e+03\n",
       "foreign_gross        5.330000e+07\n",
       "net_revenue          6.739077e+07\n",
       "ROI                  2.967500e+00\n",
       "ROIpct               2.965375e+02\n",
       "month_num            1.000000e+01\n",
       "Name: 0.75, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id                   8.500000e+01\n",
       "production_budget    6.000000e+07\n",
       "domestic_gross       8.983580e+07\n",
       "worldwide_gross      1.823860e+08\n",
       "year                 2.015000e+03\n",
       "foreign_gross        1.035665e+08\n",
       "net_revenue          1.295985e+08\n",
       "ROI                  5.000000e+00\n",
       "ROIpct               5.000075e+02\n",
       "month_num            1.100000e+01\n",
       "Name: 0.85, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id                   9.000000e+01\n",
       "production_budget    8.000000e+07\n",
       "domestic_gross       1.196277e+08\n",
       "worldwide_gross      2.596225e+08\n",
       "year                 2.016000e+03\n",
       "foreign_gross        1.531800e+08\n",
       "net_revenue          1.884296e+08\n",
       "ROI                  7.157000e+00\n",
       "ROIpct               7.157060e+02\n",
       "month_num            1.200000e+01\n",
       "Name: 0.9, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id                   9.500000e+01\n",
       "production_budget    1.200000e+08\n",
       "domestic_gross       1.766168e+08\n",
       "worldwide_gross      4.102847e+08\n",
       "year                 2.017000e+03\n",
       "foreign_gross        2.628598e+08\n",
       "net_revenue          3.186646e+08\n",
       "ROI                  1.234350e+01\n",
       "ROIpct               1.234325e+03\n",
       "month_num            1.200000e+01\n",
       "Name: 0.95, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "id                   9.900000e+01\n",
       "production_budget    2.000000e+08\n",
       "domestic_gross       3.369421e+08\n",
       "worldwide_gross      8.938658e+08\n",
       "year                 2.019000e+03\n",
       "foreign_gross        5.905149e+08\n",
       "net_revenue          7.644161e+08\n",
       "ROI                  5.426760e+01\n",
       "ROIpct               5.426570e+03\n",
       "month_num            1.200000e+01\n",
       "Name: 0.99, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_financials.info())\n",
    "display(df_financials[[\"production_budget\", \"domestic_gross\", \"worldwide_gross\", \"foreign_gross\", \"net_revenue\", \"ROI\"]].apply(['mean', 'median', 'std']))\n",
    "display(df_financials.quantile(q=0.75))\n",
    "display(df_financials.quantile(q=0.85))\n",
    "display(df_financials.quantile(q=0.90))\n",
    "display(df_financials.quantile(q=0.95))\n",
    "display(df_financials.quantile(q=0.99))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Domestic and worldwide gross revenue, net revenue, ROI are positively skewed--mean is larger than median, with large outliers distorting the mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc172aacc50>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_financials.boxplot(column=['worldwide_gross'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc172aba320>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_financials.boxplot(column=['ROI'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of movies in 75th percentile: 1354\n",
      "Number of movies in 90th percentile: 542\n",
      "Number of movies in 95th percentile: 271\n",
      "Number of movies in 99th percentile: 55\n"
     ]
    }
   ],
   "source": [
    "# Number of movies in 75th, 90th, 99th percentiles - By worldwide gross revenue\n",
    "print(f\"Number of movies in 75th percentile: {len(df_financials[df_financials['worldwide_gross']>1.044737e+08])}\")    \n",
    "print(f\"Number of movies in 90th percentile: {len(df_financials[df_financials['worldwide_gross']>2.596225e+08])}\")\n",
    "print(f\"Number of movies in 95th percentile: {len(df_financials[df_financials['worldwide_gross']>4.102847e+08])}\")\n",
    "print(f\"Number of movies in 99th percentile: {len(df_financials[df_financials['worldwide_gross']>8.938658e+08])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55, 15)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(25, 15)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Q1: What movies are the top gross revenue generators? (including outliers)\n",
    "\n",
    "# Create new df - movies with gross revenue above 90th percentile\n",
    "df_grossrev_99p = df_financials[df_financials.worldwide_gross >= 8.938658e+08].sort_values('worldwide_gross', ascending = False)\n",
    "display(df_grossrev_99p.shape)\n",
    "\n",
    "# top 25\n",
    "df_grossrev_top25 = df_financials.sort_values('worldwide_gross', ascending = False).head(25)\n",
    "display(df_grossrev_top25.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Magali/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/pandas/plotting/_matplotlib/core.py:572: UserWarning: The handle <BarContainer object of 55 artists> has a label of '_nolegend_' which cannot be automatically added to the legend.\n",
      "  ax.legend(handles, labels, loc=\"best\", title=title)\n",
      "/Users/Magali/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 128 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/Magali/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 153 missing from current font.\n",
      "  font.set_text(s, 0.0, flags=flags)\n",
      "/Users/Magali/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 128 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n",
      "/Users/Magali/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py:180: RuntimeWarning: Glyph 153 missing from current font.\n",
      "  font.set_text(s, 0, flags=flags)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6kAAAJcCAYAAAAb9+KtAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdfdzlU73/8dfbmIyMKFScZCQlxDAXMu5GKd2ig5jUQUVOnYpzquP8KqlOHVLpSBKdmhRDQknlLsYwM2bMMGNGiSM6Jje5iYyMGO/fH2tt853L3te15/a6xryfj8d+XN+9vuu71vp+957HYz573ck2EREREREREYPBagPdgIiIiIiIiIiWBKkRERERERExaCRIjYiIiIiIiEEjQWpEREREREQMGglSIyIiIiIiYtBIkBoRERERERGDRoLUiIiIiJWIpDsk7TzQ7VgSkq6SdNBAtyMiBrcEqREREc9TkuY1Xs9IeqLx/pBlXNf1kubXsh+Q9BNJGyzLOgaapDUkfVHS7ZL+JmmupEskvXFFtsP2ZranLOtyJR0lyZK+0iv94Jp++tLWYfuNts9b2nIi4vktQWpERMTzlO3hrRfwf8C7GmlnL4cqP1Trei3wUuCE5VDHgJAk4GLgLcBYYB1gM+A7wDs6XLP6CmvgsvO/wCGSmv9H/CfgtgFqT0SsghKkRkRErKIkrSnp25Lurb2CJ0kaWs+9VdL/SvqCpIcl/UHSgd2Ua/thSkA3slHXEEmfq+U8KOlsSevWcxMkfahX234v6e31eOs6TPQvkn4nab9GvnMlfVPSZZIekzRJ0ib13BaSnu5V7vWS3td4/+Fa18OSfinpHzrc1juA0cC+tqfbfsr2k7Z/afvfGuXdJ+mTkm4B/lrTXi/pWkmPSLpZ0tsa+feVdGtt+92SPl7TXy7p0nrNQ5Ku6lXHrvX4hPosx9cybpbUfO47SppVz50j6UJJn+3j4/sjcCewZ73+ZfVz/HWv57i/pN/W9l0pafOafrykH/fK+11JX12c51+/L6fWXvlH6z28to92R8TzSILUiIiIVdcXgG2A1wOjgDHApxvnRwAvAF4OHAn8UNKm/RVah/nuR+mVa/kUpRdyV+AVwFPAyfXcOZTeydb1o4CXAJdLehFwBfA/wPqUXr3vS3p1o+z3Av9Rr7m33le/JB0MHA28C3gZcBPw4w7Z9wIm2b6/i6IPAt4MrCdpGHAJ8DNgA8pzOL/xHL8P/JPttSnB4LU1/d+B31PueUPg+D7qe3ctZ13gN8A36/0Nq/V+B3gx5YeDd3XR/rMozxngEOB84NlgX9LWwDjgI5Qe82uAi2vP8TnAvpLWrHmHAgfU9EX08/zfSflOblbb/l7gL120PSKeBxKkRkRErLoOAT5v+8EafP0n8P7G+aeBL9j+u+0rgSspAUcn35X0V+DPwJrAMY1zHwaOtX2P7fmUQPKgOoz2p8BoSRvWvO8Fzrf9NCUAm2P7bNsLbN8A/ALYv1H2T2zfaPspSjA0ku58GPhP27fVa78A7Fp7D3tbH7iv9UbSRrUX8VFJj/TKe3K9zyeA3WraN2rv62WUoLu1eNDTwFaS1rb9kO2bavpTwEbAK+vzn9jHfVxl+wrbC4AfNe5/d2C+7dNtP237XGBWF8/lfOCtktaiBKtn9To/FrjI9gTbfwe+Up9Pj+3bKMF1Kxh+K3C/7Zlt6unr+T8FvAjYArDtW2z/uYu2R8TzQILUiIiIVVANDl9OGd7Z8kegOdz1gRpQNs9v1EexH7b9ImD7WvZGjbo2Bn5VA7tHKL1mqwHr1eHBVwDvUZkLeRDQmjO7CbB767p67f6U3sWW+xrHfwOG9/sAFpZ9eqPcByhB4yva5H2oWWcNQtcFdgGG9cp7d+N4I+D/bLuR1nzO+9X7+b86pLmnpn8ZuAe4WmXY9b/2cR+d7n8jYG4fbWvL9mOUHtnPA0Ntz+iVZSMa35saHP+pcU/NnvH3svCz7K2v5/9rSu/5d4H7JZ0mqdvPNSJWcglSIyIiVkE1aLqPEii0vJISbLSsX4eMNs/f00XZNwFfBU5t1PUn4I221228htl+sF42nhLY7EEJVCbX9LuBy3tdN9z20V3c5uPAEElrNNJe3ji+GzisV9lrtgnKoARtozv0sj7nETSO76E8t6Znn7PtKbbfSRnuejnlOWD7UdufsL0JJYj9rKRduqi76V6eG3Bv3OW1ZwGf5Lm9qFDu6dnvjaQhlAC19d05D9i7zi99F/We2uj4/F18w/Z2lCHp2wKf6LLtEbGSS5AaERGx6hoPfF7SepJeCnyGRedkDgU+J+kFKtusvBm4oMuyvwdsJmnv+v504ARJGwNIeqmk5vzInwNb1TaMb/Q8/gzYTtJBkobWtrxB0mu6aMM9lN65Q+pCPB9h0Z7i0ynB32trm14saf825UCZVzoV+LmknlZbgJ36acO1wGqSjpa0uqQ3U+bmni9pLZXtXV5EGd76GLCgtmUfSZvWXuhHa/qCLu65aSKwpqQja93voQR73biitrPdtjPnAe+WtHudc3ospad5OoDtP1Ge1Thgtu0/dKij4/Ovn3FPnef6OPB3Fv/+I2IllSA1IiJi1XUc8FvgFmAmMInSA9pyF6VX8z7KwjyH9xFwLKLOxzwV+FxN+iplTutVkh6j9JRu38j/N8rCPm+isciO7b8AewOHU3oG76HMnR3aRRsWAB+iDFt9kNKLOKNxfnxt44V1Lu1MSiDerqxnKIv5XEkJ0h4F7gD+EXh7H22YX687gBLIfQM4yPYdNcsHKENnH6XM/zy0pr8OmEAJXCcCX7N9fX/33KvuJ2r7PkZZdGg/4DLgyS6uXWD7StuPtjl3M/BBylDcByif2b51DnHLOZTFpp6zYFKjnL6e/7qUIPcR4A+UZ3RKf+2OiOcHLTpFIiIiIqJsQQOcavvV/WaOlYakWcAJNUCMiBiU0pMaERER8Twlac86tHqopCMpW7pcMdDtiojoy+oD3YCIiIiIWG62ogxPfiFl39p/bCxWFRExKGW4b0RERERERAwaGe4bERERERERg0aG+0bEItZff32PGDFioJsREREREc9zM2bMeND2Br3TE6RGxCJGjBjB9OnTB7oZEREREfE8J+mP7dIz3DdigEh6tyRL2mIJrx8h6b3Lul0REREREQMpPakRA2cscB1wMHD8Elw/AngvfWyU3pukIXVz+45mzABpCVoTERERESuVwbqGbnpSIwaApOHALsAHKUEqks6T9PZGnnGS9q89ptdKurG+RtcsJwC7SZop6ZhO+SSNkXS1pHOA2Sv2TiMiIiIiFk96UiMGxn7ApbZvk/SwpO2Bc4GDgF9JegHwJuCfAQFvtj1f0ubAeKAHOBb4pO13Akh6YYd8ADsCW9u+s11j6gbvR5Z3r1we9xsRERERz2NPPfUUc+fOZf78+c85N2zYMF7xilcwdOjQrspKkBoxMMYC36zH59b3nwNOkbQG8FZgou0nJK0DnCppJLAAeE2HMof2kW9apwAVwPYZwBkAUs8gHfgREREREYPV3LlzWXvttRkxYgRqzB2zzUMPPcTcuXPZdNNNuyorQWrECiZpPeCNwNaSDAwBDHwamADsTelRHV8vOQa4H9iWMkT/uT9P9Z/v8WV6ExERERERDfPnz39OgAogifXWW48HHnig67ISpEaseAcAZ9n+cCtB0jXArpRe1Q9RhukeVk+vA8y1/YykQylBLcBjwNqNcjvlWyyjRkF2oImIiIiIxdU7QO0vvZMsnBSx4o0FLuqVdgFlpd7Lgd2BK23/vZ47DThU0vWUIbytXtGbgaclzZJ0TB/5IiIiIiJWGulJjVjBbI9pk3ZK4+16vc7dDmzTSPqPmv4UZXGlpnb5JlCGEUdEREREDHrpSY2IiIiIiIil5g4br3ZK7yRBasQKJGm9uq/pTEn3SfpT4/3kmmeEpPcuZT3fk7Tlsml1RERERETfhg0bxkMPPfScgLS1uu+wYcO6LkuLG9VGxLIh6Xhgnu2v9UofQ2P/0xXfrh5DVk6KiIh4vsp//2N5WJJ9UiXNsN3TO3/mpEYMEpLm2R4OnAC8TtJM4IeURZZ+BKxVs/6L7ck1mD0eeBDYGpgBvM+2JU2gBLrTJb0V+Apltd8HbfeexxoRERERsVSGDh3a9T6o/UmQGjH4HEujJ1XSC4E3254vaXPK/qmtX5y2A7YC7gEmAbsA17UKkrQBcCawu+07Jb2kXYWSjgSOLO9euRxuKSIiIiKiO5mTGjH4DQXOlDQbOB9ozjWdZnuu7WeAmcCIXte+AZho+04A2w+3q8D2GbZ7ynCLDZb5DUREREREdCs9qRGD3zHA/cC2lB+WmgP9n2wcL+C5/6YFLNbMk1GjYHqmpEZERETEAElPasTg8xiwduP9OsC9tbf0/ZS5pd2aAuwhaVOATsN9IyIiIiIGi/SkRgw+NwNPS5oFjANOAy6QdCBwNfB4twXZfqDON71Q0mrAn4E3L/smR0REREQsG9mCJiIW0dPT4+kZ7xsRERERy1mnLWgy3DciIiIiIiIGjQz37UXSZ4D3UhaheQb4sO2pko4GzrD9tyUsd13gDmD9uo/lzsBkYGPbcyWtA9xZzz+zTG6m1LsAmN1IOtf2CUtQzp3AW23/vpH2TcrWJ9OoW6ZIOgzosf0vHcp5PWXPTyh7nTxaXw8C/0lj65UlaOPxwBHAAzXpUtvHLklZS1j/dsCNlOd02TIo7y7Ks3xwactaHDNmgLQia4yIiHj+y+DFiO4lSG2ogeM7ge1tPylpfeAF9fTRwI+BroNUSUNsLwCw/Yik+4DXAb8FRgM31b8/oWwVMrXbAFXS6raf7iLrE7ZHdtvmPpwLHAx8oda/GnAAZV/OrnfttT0bGFnLGAdcYvun9f2YZdDOk21/bXEvan5WS2EsZY/SscBSB6kREREREauiDPdd1IbAg7afBLD9oO17JH0c2Ai4WtLVAJK+I2m6pFskfaFVgKS7JB0n6TrgwF7lT6IEpdS/J/d6P7mWcYSkGyTNknSBpBfW9HGSvlHbcKKkPSTNrK+bJK1Nl2o7T5Q0rb5e3c8l4ylBasvuwF22/9htnV0aLumnkm6VdLZU+vQkjZJ0jaQZki6TtGG3BUp6U30+syV9X9IaNX2Rz0rSqyVdWZ/7jZI2q/k+VT+Pm5ufda86RAnaDwPeImlYTf90/f4g6WRJVzXa9ON63Pa71Ch7TUmXSjqivn9f/cxmSvqupCE1fZ6kL9f2Xy/pZTX9QElzavrEbp9bRERERMRASJC6qMuBjSXdJuk0SXsA2D6FMqx1T9t71ryfqZN8t6Fs8bFNo5z5tne1fW6v8iezMCh9FXA+0JooPJoSxAJcaHsH29sCvwM+2CjjNcBetv8N+CTw0dpTuhvwRJt7WrMRyM6UdFDj3F9t7wicCnyzrwdj+2bgGUnb1qSDKYFrR5L2kfTFvvK0sR2l13pLyjPaRdJQ4FvAAbZHAd8Hvtzh+mMa97p3DRbHAQfZfj1l9MA/N/I3P6uzgW/X5z4auFfSW4DNgR0pPcCjJO3ept5dgDtt3wFMAN5e0ydSPhson/Xwej+7AtfW9L6+S8OBXwDn2D5T0uuAg4Bd6ue+ADik5l0LuL62fyJl6DPAccDeNX2fdg9N0pE1UJ6+cLR0RERERMSKlyC1wfY8YBRwJOV/6ufVOZbtvEfSjZQhu1tRgqqW8zpcMwkYrbJn5V2251M64YbXeqfVfFtLulbSbEoAslWjjPMbw1InAd+oPXXrdhj++4TtkY1Xs23jG3937tDmpvHAwZJWB/alBNkd2b7Y9nFdlNs0zfbcOux5JjACeC2wNXCFpJnAZ4FXdLj+5Ma9XlavvdP2bfX8Dym9wC3nAdRe6H+wfVFt+/w6//gt9XUTZb7pFpSgtbexlCHR1L9j6/EMSmC7NvAkZd/SHkrg2gpS+/ou/Rz4ge2z6vs3Ub4rN9Rn8SZKMA/wd+CSRr0j6vEkYFztiW27x6rtM2z3lGB5g3ZZIiIiIiJWiMxJ7aUGgBOACTVIPJTSE/esGmR+EtjB9l9U5lYOa2Rpu4+l7dslvRh4FyVYgRJMHE4JpObVtHHAfrZn1SB5TLuybZ8g6ZeUXrvrJe1l+9bFud0Ox52Mp/Q2XwPcbPvPi1FXt55sHC+gfEcF3GK7m0C6t/6WAGo9z075BPyX7e92rKAMt90f2Edl4S0B60la2/ZjKgsgHU7pSb8Z2BPYDPhdF9+lScDbJJ3jsl+UgB/a/o82TXnKC/eUaj07bB8laSfgHcBMSSNtP9TpfkaNguxAExEREREDJT2pDZJeK6nZSzYSaM25fAxozfl8ESW4ebTO+3vbYlQzBfgEC4PUKZThrZMbedamDDUdysKhnO3au5nt2bZPBKZTevkWx0GNv1P6yghQh7I+BJxAP0N9l7HfAxuoLGyFpKGSturnmpZbgRGNObfvpwTZi7D9V2CupP1qHWuozAW+DPhA7e1G0j9Iemmvy/cCZtne2PYI25sAFwD71fMTKYHoRErv6VHAzBpQ9vddOo7yzE+r738DHNBqg6SXSNqkrwdQvydTa6/2g8DGfeWPiIiIiBhICVIXNRz4oaTfSrqZMuzy+HruDODXkq62PYsyNPMWyvzISe0K62ASJUho9VVNoQzXbAapnwOmAldQgqxOjm4tiEOZj/rrNnl6z0ltbj+zhqSplKD5GOhqHul4SjB8UR956LKsrtj+O2VRohPrvc5k4dze/q6dT+nFPL/2jD8DnN4h+/uBj9fPfjLwctuXA+cAU+r1P2XhjxUtY3nu87iAspURlMB0Q2CK7fuB+TWNLr9LRwPDJH3V9m8pw50vr+28opbdl5NUFo2aQwmUZ/WTPyIiIiJiwMjZtGmVpAHagzMGv56eHk/PeN+IiIiIWM4kzagLiC4iPakRERERERExaGThpFWU7RHLqixJ7wYuBF63mAs3DUqSjgfm2f5aP/nGU1bj/QHwYmCi7Sv7yL8PsGVd8Go/4LY6fLebNm1LWTBpZH0/FvgfYB3bT0l6PXC27W36KqcbM2aA+ltuKiIiIrqWgYsRiydBaiwLY4HrKHunHj+wTVmUpNU7bM2ztOW+HBhdF0nqiu2LgYvr2/0o28V0FaQCs4FNWisGU+bk3krZV3Yai+6z26/l9VwiIiIiIpZWhvvGUqmr3u4CfJASpLbSz5P09sb7cZL2lzRE0kmSbpB0s6QP1/NjJE2Q9FNJt0o6Wyr9eZLeXtOuk3SKpEtq+lqSvl/LuknSvjX9MEnnS/oFZYGhDSVNrAtHzZG022Lc3wRJJ0qaJum2xrWXAy+tZe5W7++Aes1dkr4g6ca6YNEWjXadKmk0sA9lQaOZkjZT2Se1VefmkmY021H3jb0B2KkmjQK+zcIFpEZTF9+SdFx9JnMkndF4jhMkfUXSNZTFsiIiIiIiBp0EqbG09gMutX0b8LCk7Wv6udQtbiS9AHgT8CtKMPuo7R2AHYAjVPYKhdIreDRlVeVXAbtIGgZ8F3ib7V2BDRp1fwa4qpa1JyXoW6ue2xk41PYbKavsXlaHym5LWR0YSd+T9JyJ2m2sbnvH2rbP17R9gDtsj7R9bZtrHrS9PfAdyvYzz7I9mdKj+ql6/R2ULWhG1iyH02tv3moyMLre4zOU/XybQWqrJ/VU2zvY3hpYE3hno4x1be9h++vNgiUdKWm6pOnwQJ8PIyIiIiJieUqQGktrLCUgpf4dW49/DbxR0hqUvT8n2n4CeAvwT5JmUrbZWQ9o7U07zfbc2ms4ExhB2e7mD7bvrHma+7O+BTi2ljUBGAa8sp67wvbD9fgG4PA61/T1dbgstj9ku5tlbC+sf2fUNnVjca/5Xm3jEEpwf06bPJMoweiOwA01uH21pA2A4bb/UPPtKWlq3TLnjZR5sy3ntavc9hm2e8rqahu0yxIRERERsUJkTmosMUnrUYKgrSUZGAJY0qdtz5c0AdibEnS1gksBH7N9Wa+yxgBPNpIWUL6ffS3hI2B/27/vVdZOwOOt97YnStodeAfwI0kn2T5rMW611a5Wm5bHNRdQemmvAmbYfqhNnuspvc+7UvbXBZhLGWbdGuo7DDiNsr3Q3TUwH9Yo43H6MWoUZAeaiIiIiBgo6UmNpXEAcJbtTWyPsL0xcCcliILSs3o4sBvQCkovA/5Z0lAASa9pDNFt51bgVZJG1PcHNc5dBnysMedyu3YFSNoE+LPtMykr4m7fLt8K9hiwduuN7fmU+/kOZbXg56g9wHcDh7EwSJ1CGYY8ub5vBaQP1vnCByzrhkdERERELE8JUmNpjAUu6pV2AWUOKJTFhXYHrrT995r2PcqKtjdKmkOZb9qxp7EOEf4IcKmk64D7gUfr6S8BQ4Gba1lf6lDMGGCmpJuA/YH/hsWak7o8nAt8qi74tFlNOxsw5bl1MglYw/bd9f0UyvzdyQC2HwHOpKwG/DPKUOeIiIiIiJWGnI2bYpCTNNz2vNpj+m3gdtsnD3S7ljVJn6Tse/q5gWxHT0+Pp2e8b0REREQsZ5JmlDVRFpU5qbEyOELSocALgJsova/PK5IuAjajzPGNiIiIiFhlpSc1nvckzbM9fAXXOdn26C7yrQvcAaxv25J2pgzd3dj2XEnrUOb5rl9XPe6m7uOBeba/1it9BHBJ3Zqmj+t7DOlJjYh4Pst//yJiMOjUk5o5qRENdQuYpdZNgFrzPQLcB7yuJo2m9Ba3rn8DMHUxAtSMjoiIiIiIlVqC1FglSBoj6ZLG+1MlHVaP75J0XF2Y6UBJR0i6QdIsSRdIemHNd6CkOTV9Yk3bStI0STMl3Sxp85o+r1HXpyXNrted0KZ5rf1PqX9P7vW+tb3MSEnX13oukvTimj5B0lckXQN8otd9j6r1TgE+ulQPMSIiIiJiBUiQGlHMt72r7XOBC23vYHtb4HfAB2ue44C9a/o+Ne0o4L9tjwR6KPuWPkvS24D9gJ3qdV9tU/dkFgalrwLOr2VR0yfV47OAf7e9DWX13s83yljX9h62v96r7B8AH7e9c183L+lISdMlTYcH+soaEREREbFcJUiNKM5rHG8t6VpJs4FDgK1q+iRgnKQjgNaw4CnA/5P078Amdcucpr2AH9j+G4Dth9vUPQkYLWlT4K66Z6rqPqejgGl1buq6tq+p1/yQsr1Pu/ZDKaD3NT/qdPO2z7DdU+YEbNApW0RERETEcpf5a7GqeJpFf5QZ1uv8443jccB+tmfVIcFjAGwfJWkn4B2UfVdH2j5H0tSadpmkD9m+qlGWKHufdmT79jp0912UoBdgBnA4cGfdfmedfu7v8TZp/dbdzqhRkB1oIiIiImKgpCc1VhV/BLaUtEYN+N7UR961gXslDaX0pAIgaTPbU20fBzwIbCzpVcAfbJ8CXAxs06usy4EPNOa1vqRDnVMo80mnNN4fTZ2PavtR4C+Sdqvn3w9c07uQproo06OSdq1Jh/SVPyIiIiJiMEhPajyv1dVun7R9t6SfADcDt1NW0O3kc8BUSmA7mxK0ApxUF0YS8BtgFnAs8D5JT1FW6f1isyDbl0oaCUyX9HfgV8D/a1PnJODtLNz7ZQplfurkRp5DgdNrwPsHSk9rfw4Hvi/pb8BlXeSPiIiIiBhQ2Sc1ntckbQucaXvHgW7LyqKnp8fTM943IiIiIpaz7JMaqxxJRwHjgc8OdFsiIiIiIqI76UmNWEqSFlCGBbfsZ/uuxbj+e8A3bP92ObRtT8q+qy1bAAfb/lnna3q8cNRxREQsT/lvWESsyjr1pCZIjVhKkubZHr6E1w6xvWBZt6lDXS8B/hd4RWtLnPb5EqRGRKwo+W9YRKzKMtw3YgWSdJikUxvvL5E0ph7Pk/TFunXNzpImSOqp58ZKmi1pjqQTG9fPaxwfIGlcPT6w5p0laWI/zToA+HVfAWpERERExEDL6r4RS29NSTPr8Z22391P/rWAOXUrGyRR/24EnAiMAv4CXC5pv76G5gLHAXvb/pOkdfup92DgG+1OSDoSOLK8e2U/xURERERELD/pSY1Yek/YHllf/QWoAAuAC9qk7wBMsP2A7aeBs4Hd+ylrEjBO0hHAkE6ZJG0IvJ4O29DYPsN2TxlusUEXtxARERERsXykJzVi+XiaRX8EGtY4nt9hHqr6KK85a+nZsmwfJWkn4B3ATEkjbT/U5vr3ABfZfqq/ho8aBdmBJiIiIiIGSnpSI5aPu4CRklaTtDHQzT6tU4E9JK0vaQgwFrimnrtf0uskrQY821sraTPbU+vQ4QeBjTuUPZayHU9ERERExKCWntSI5WMScCdla5o5wI39XWD7Xkn/AVxN6VX9le2f19PHApcAd9fyWqsJnyRp85r/N8Cs3uVKGkEJXq/pfS4iIiIiYrDJFjQRsYienh5Pz3jfiIiIiFjOOm1Bk57UeN6TtB6llxHg5ZSFix4ARgD32N5yKcv/OfBS2zsvTTkREREREZEgNVYBdSGhkQCSjgfm2f5aHQZ7ydKUXbd92R6YJ2lT23cuXWuXLUmr15WCuzZjBqivJZwiImKZyYC2iIjnysJJsaobIulMSbdIulzSmlAWJJJ0qaQZkq6VtEWH6/cHfgGcS9mHFEnrSLqrLnKEpBdKulvS0E7lShon6RRJkyX9QdIBNX01SafV9l0i6VeNc6MkXVPLuqxuM4OkCZK+Iuka4BOSDpQ0R9IsSROX47OMiIiIiFhqCVJjVbc58G3bWwGPUIJOgDOAj9keBXwSOK3D9a1Vc8fXY2w/SlnAaI+a513AZXX7l77K3RDYFXgncEJN+0fKsOTXAx8CdgaQNBT4FnBALev7wJcbZa1rew/bXweOA/a2vS2wT7ubkHSkpOmSppeR0BERERERAyPDfWNVd6ftmfV4BjBC0nBgNHC+Fo57XaP3hZJeBrwauM62JT0taWvbc4DzgIMoK/UeDJzWRbk/s/0M8NtaNpSg9fyafp+kq2v6a4GtgStqWUOAextlndc4ngSMk/QT4MJ2D8H2GZQAGqkng88iIiIiYsAkSI1V3ZON4wXAmpQRBo/YHtnPtQcBLwburIHiiygB6WeBi4H/kvQSYBRwFbBWP+U226Jef3sTcEsfizU93jqwfZSknaqijoAAACAASURBVIB3ADMljazzdCMiIiIiBp0M943oxfZfKYHngQAqtm2TdSzwVtsjbI+gBKMH1zLmAdOA/wYusb1gMcptug7Yv85NfRkwpqb/HthA0rPDfyVt1a4ASZvZnmr7OOBByp6pHY0aVRbyyCuvvPLKa/m/IiLiuRKkRrR3CPBBSbOAW4B9myfrysCvBK5vpdWVff9aey2hDLl9H4sOve2z3DYuAOYCc4DvAlOBR23/HTgAOLGWNZMylLidkyTNljQHmEiZLxsRERERMSjJ+RkvYlCTNNz2vLrf6zRgF9v3La/6enp6PH369OVVfEREREQEAJJm2O7pnZ45qRGD3yV1P9YXAF9angFqRERERMRAy3Df6Jekd0tyH3uFrpTqvqHjV1BdH5f0O0ln90o/TNKpvdImSOqpx3dRhvWOAU61PW5FtDciIiIiYqCkJzW6MZaygM/BwPED25RFSVrd9tNLcN3rKD/S7C5pLduP93fNUvoI8LY6b3VJrFvLeM5+rZKG2F6wNI1rmjED1GlN4YiIVUBmQkVEDKz0pEaf6t6euwAfpK5cW9PPk/T2xvtxkvaXNETSSZJukHSzpA/X82NqD+FPJd0q6WzVfVskvb2mXSfpFEmX1PS1JH2/lnWTpH1r+mGSzpf0C+BySRtKmihppqQ5knbr4tbeC/wIuBzYp3EfO9R2T6n3Maemt72vNs/rX2sb5kg6uqadDrwKuFjSMd0++15OADar93hSfZ5XSzoHmN1H3SNqD+6Zkm6RdLmkNZewDRERERERy12C1OjPfsCltm8DHpa0fU0/l7JPKJJeALwJ+BUlmH3U9g7ADsARkjat12wHHA1sSQnadpE0jLJq7dts7wps0Kj7M8BVtaw9KavUrlXP7QwcavuNlIDzsrr/6LaUlW6R9L3WsNk2DqKsujue0lPc8gPgqLr/aLN3sq/7otY3Cjgc2Al4Q82zne2jgHuAPW2f3KE9/TkWuMP2SNufqmk7Ap+xvWWnumu+zYFv294KeATYv3fhko6UNF3SdHhgCZsYEREREbH0EqRGf8ZSAlLq31ZA92vgjZLWAN4GTLT9BPAW4J8kzaRsl7IeJUgCmGZ7ru1nKIHkCGAL4A+NYbDNOaJvAY6tZU0AhlG2fQG4wvbD9fgG4HBJxwOvt/0YgO0P2X7OMrWSdgAesP1H4DfA9pJeXBcnWtv25Jr1nF5t6XRfLbsCF9l+vO6TeiHQX69up0Fl3Qw2m9Z4bn3VfaftmfV4BuW5L1qZfYbtnrK62ga9T0dERERErDCZkxod1S1P3ghsLcnAEMCSPm17vqQJwN6UXslWcCngY7Yv61XWGODJRtICyvevr9mPAva3/fteZe0EPDuH1PZESbsD7wB+JOkk22f1Ue5YYIu6KBHAiyi9ixf005bn3FebPIvrIeDFvdJeAjzYxbXNebR91d37uWe4b0REREQMWulJjb4cAJxlexPbI2xvDNxJ6bWD0rN6OKXHrhW8XQb8s6ShAJJe0xii286twKskjajvD2qcuwz4WGPu6na0IWkT4M+2zwT+B9i+Xb6adzXgQGCbek8jgH2Bsbb/Ajwm6Q01+8GNS7u5r4nAfpJeWM+9G7i2j3uH0gu8i6SX13J7gDWAu3vlewxYu49ylqTutkaNKouG5JVXXnmtqq+IiBhY6UmNvoylLNjTdAFlDui1lEWHzgIutv33ev57lOGkN9bg8gHKvNa2bD8h6SPApZIeBKY1Tn8J+CZwcy3rLuCdbYoZA3xK0lPAPOCfoMxJBU7vNeR3d+BPtv/USJsIbClpQ8rc0zMlPU4ZYvxot/dl+0ZJ4xr38D3bN3W693rN/ZI+AfyqBtDzKAHzM73yPSRpUl3I6dfAL7upuxH8R0RERESsFOT8ZBgDTNJw2/Nq8Pdt4PalWGBombSlHh8LbGj7EwPRloHS09Pj6dOfM5U3IiIiImKZkjSjrImyqAz3jcHgiLog0S3AOpTVfgfKO1pb2VCGMf/nALYlIiIiImKVkyA1Bpztk+vWKlvaPsT235Z1HZIW1OBzlqQbJY2u6SNae6HWtpxX27K17XfY7rgfi8q+r522uGnm+X2td5Kk1y5h+0dq0X1pj5f0ySUpKyIiIiJiMMuc1FhVPFH3UUXS3sB/AXusoLoPsT1d0pHAScA+S1DGSKCHshftUpM0xPaCdudmzAAtyTrFERGDVGY2RUSsXNKTGquiFwF/6Z1Ye1WvrT2tz/a21nOfljS79oie0Ou61ST9UFJ/Q4MnAq+u1xwn6QZJcySd0VjBeIKkEyVNk3SbpN0kvQD4InBQ7Q1urYC8Zc3/B0kfb7TnffX6mZK+K2lITZ8n6YuSpgI7L/ZTi4iIiIhYARKkxqpizRq03UpZqfdLbfL8GXiz7e0pW+GcAiDpbZSVfHeyvS3w1cY1qwNnA7fZ/mw/bXgXMLsen2p7B9tbU/Ytba5avLrtHYGjgc/XlZOPA1pDkc+r+bag7FO7I/B5SUMlva62fZfac7wAOKTmXwuYY3sn29c1GybpSEnTJU0vCxdHRERERAyMDPeNVUVzuO/OwFmStu6VZyhwqqRWcPeamr4X8IPWXFnbDzeu+S7wE9tf7qPusyU9QdlC52M1bU9JnwZeCLyEsmjUL+q5C+vfGZRtbzr5pe0ngScl/Rl4GfAmYBRwQ+2cXZMSfFPv6YJ2Bdk+AzgDQOrJwLiIiIiIGDAJUmOVY3uKpPWBDXqdOga4H9iWMspgfk0X0Clwm0wJOL9ue36HPIc092qVNAw4Deixfbek44FhjfxP1r8L6Pvf6JON41ZeAT+0/R9t8s/vNA81IiIiImKwSJAaqxxJWwBDgIcoPZkt6wBzbT8j6dCaB+By4DhJ59j+m6SXNHpT/wfYHThf0rttP91FE1oB6YOShgMHAD/t55rHgLW7KPs3wM8lnWz7z5JeAqxt+49dXAvAqFGQbVIjIiIiYqBkTmqsKlpzUmcC5wGHtulVPA04VNL1lKG+jwPYvhS4GJher19k6xfb3wBuBH4kqd9/U7YfAc6kzE/9GXBDF+2/mrJQUnPhpHZl/xb4LHC5pJuBK4ANuyg/IiIiImJQkLMue0Q09PT0eHq6UiMiIiJiOZM0w3ZP7/T0pEZERERERMSgMSiCVEnzer0/TNKpK6DeEZKeqEMofyvp9L6Ga9b87228Hynp7cu7nf3p/fxq2rqSPtJ4P0bSJUtRx/GS/lSf1e2SLpS05VKUt1/z+rrf53N+RVncdrf77nQqu1MeSXfVhZVWiHqPj0q6SdLvJH1+Ma9f5LNuc35e/TtC0pylbW9ERERExPI0KILUpSVp9b7e9+OOujXJNsCWlP0wOxkBvLfxfiSwWEHqYrZtaawLdAxcltDJdZ/OzSnzOq+S1HuF3G7tR3neUVxrezugB3ifpFHdXCRpCMv4s54xA6S88sorr5X/FRERK6dBH6RKepekqbWX6UpJL6vpx0s6Q9LllD0vD5N0vqRfUBaN+ZGkfRvlnC1pn0711FVZJwOvVnGSpDmSZjcWqjkB2K32Jv478EXgoNZiNpLWkvR9STfU9u5b616kbW3u8WeSZki6RdKRjfR5kr4saZak6xv3vqmkKbWeL3W4pROAzWrbTqppwyX9VNKt9XmoljdK0jW1DZdJ6nehHdvn1Xt5b19lSDqitnOWpAskvVDSaGAf4KTavs1qsQdKmibpNkm79XpGq9Ue3A0a7/93cXs8JX1H0vT6rL/QRf5/rd+DOZKOrmmflvTxenyypKvq8Zsk/VjSEEnjGt+fY7ptn+3HKfujblZ7Pq+VdGN9ja71jJF0taRzKIsvtfusIyIiIiJWSoNlC5o1VVZNbXkJZTVVgOuAN9i2pA8Bnwb+rZ4bBexq+wlJhwE7A9vYfljSHpR9L38uaR1gNHBopwZIeiHwJuA44B8pvaTbAusDN0iaCBwLfNL2O+s191P2uvyX+v4rwFW2PyBpXWCapCtrFc+2rU31H6htXrPWdYHth4C1gOttf0bSV4EjgP8E/hv4ju2zJH20wy0dC2xde4mRNAbYDtgKuAeYBOwiaSrwLWBf2w/UgPzLwAc6PauGG4EtJA3to4wLbZ9Z2/CfwAdtf0vSxcAltn9azwGsbntHlSHUnwf2alVUt4X5MXAI8M16bpbtB9u06yBJuzbev7px/Jn6rIcAv5G0je2b292cSm/m4cBOgICpkq4BJlK+g6dQej7XqM9gV+BaynfnH2xvXctZt/49qt7L6Z0eqKT1gDcAXwL+DLzZ9nxJmwPja30AO1I+3zsljaDxWS+J+uNI/YHklUtaTERERETEUhssQeoTzf9g14Cz9Z/xVwDn1Z65FwB3Nq672PYTjfdXtIJA29dI+rakl1KCzgs67GG5WQ2QDfzc9q8lnQyMr1uU3F8Dkx2Av/ZzH28B9pHU2qJkGAv/x39FhwAV4OOS3l2PNwY2p+zh+XegNR9zBvDmerwLsH89/hFwYj/taplmey5AvecRwCPA1sAVNVAcAtzbZXmtwVSv7aOMrWtwui4wHLisj/IurH9n1Lb19n3g55Qg9QPADzqUc17rhwMASRMa595TA7LVKVuzbAm0DVIpQedFtXcTSRcCuwHfAUZJWht4khKs99RzH6fc+6skfQv4JbX3vK/glNJDfxPwDHCC7VvqjyunShoJLKBsi9Myzfad7QpaErbPAM4o99mTJb8jIiIiYsAMliC1L98CvmH74tobeHzj3OO98vZ+/yNKz9vBdO4ZvKNND9SSzmQRsL/t3y+SKO3Upm2tc2MovYI72/5bDaiG1dNPeeEeQQtY9PNakkDiycZxqzwBt9jeeQnK2w6Y3k8Z44D9bM+qPz6M6aJ9ve8VANt3S7pf0hspvZuHLE5jJW1K2eN0B9t/kTSOhc+67SXtEm0/JekuSi/rZEqQuyewGfC72uu/LbA38FHgPfTfM31tq4e+4RjgfkqP/mrA/Ma5tt+niIiIiIiV3aCfkwqsA/ypHnccrtvBOOBoANu3LMZ1EylDRofUOZC7A9OAx4C1G/l6v78M+Jj07FzP7bqoax3gLzVA3YIy1LM/kyiBN3QO1Hq3rZPfAxtI2hlA0lBJW/V3kaT9KT3H4/spY23g3jocttnWbtvX2/eAHwM/qT3di+NFlODuUZX5vW/rJ/9EYL86j3Yt4N2U4bytc5+sf68FjgJm1gB1fWA12xcAnwO2X8x2tqwD3Gv7GeD9lB7qdpb0WbY1ahTYeeWVV14r/ysiIlZOK0OQejxwvqRrgXbzDzuyfT/wOzoPC+3kIkrv2CzgKuDTtu+raU+rLAJ0DHA1sGVdsOYgyjzCocDNKlt9dFrUqOlSYHVJN9f813dxzSeAj0q6gRLIPEed0zqpLt7TcTEd238HDgBOlDQLmEmZv9vOMfVebwfeB7zR9gP9lPE5YCpwBXBro6xzgU+pLDC1Gd27mDJseHE/U2zPAm4CbqEMHZ7UT/4bKT90TKPcw/ds31RPX0sZLjylfs/mszCA/QdgQh1SPQ74DyhzUlvzUrt0GnCopOspQ33b9p52+1lHRERERKwM5OfxT411MaTZwPa2Hx3o9sTSU9nL9GTbu/WbOZZIT0+Pp0+fPtDNiIiIiIjnOUkzbPf0Tl8ZelKXiKS9KD1330qA+vwg6VjgAmrPZEREREREPP88b4NU21fafqXtbw50W7ol6TMq+3feXIfV7lTTj669wkta7rqSHmrMld1ZkiW9or5fR9LDkpbp90HSgnofrdexS1jOnZJea/sE25vYvk7SN1X2Kx0j6ZKa7zBJp9bj4xurLLcrc+9Gu+ZJ+n09PqtZzhK2d5ykA5b0+lpGx89c0oTao9xtWc1ntM+Sfg4RERERESvCyrC67yqhLjr0TsrQ5Cfr4jsvqKePpiwW9LfFKG9Ia2Eh249Iug94HfBbynzRm+rfn1AWa5paF+jppuzVO2zn09siWwsthXMpC0V9oda/GmUO7C7ApktSoO3LqNvh1BWVP2l7en1/2FK3eOkt9mfeDdsXs3AP4rZmzAAt6frWERED5Hk8eykiYpXzvO1JXQltCDxo+0kA2w/avkfSx4GNgKslXQ0g6TuSptde1y+0CpB0l6TjJF0HHNir/EksXMxoNHByr/eTaxlHSLqhLg51Qas3r/YOfqO24URJezR6Im9S2TO0K7WdJ0qaVl+v7ueS8SxczRjKast32f5jt3UugY0kXSrpdklfbSVKeoukKZJulHS+pOHdFCZpuKTf1OtmS9q3pq8l6Zf1ec+RdFC7z7yPctu2R9JbJd1avwv/2Mi/VL3EERERERHLW4LUweNyYGNJt0k6TdIeALZPAe4B9rS9Z837mTrBeBtgD0nbNMqZb3tX2+f2Kn8yC4PSVwHnA60ho6NZuNLthbZ3sL0tZWXkDzbKeA2wl+1/o2y/8tHaU7ob8ESbe1qz13Dfgxrn/mp7R+BUoM8h2bZvBp5R2XsUSsA6vq9rmrT4q+oCjAQOAl5P2Y5o49q7/VnKM9ieskfsv3ZZ3nzg3fW6PYGv1+HXbwXusb2t7a2BSzt85u3uq217JA0DzgTeRflsXt5f4yQdWX/4mA4PdHlLERERERHLXoLUQcL2PGAUcCQlSjivj2Gn75F0I2XI7lbAlo1z53W4ZhIwWtKmlF7I+YBqz9soyjYrAFtLulbSbMq+ps09U89v7E06CfhG7fVbt8Pw3ydsj2y8mm0b3/i7c4c2N40HDpa0OrAvJcjuiu3TbZ/ebf7qN7Yfrc/pt8AmlGHRW1K2e5lJ2bd3ky7LE/AVla2GrqRsU/MyyurTe9We5d0Wc5GvTu3ZArjT9u0uy3f/uL+CbJ9hu6f8+LHBYjQhIiIiImLZypzUQaQGgBMoe2zOpgQd45p5apD5SWAH23+RNA4Y1sjSaS/N2yW9mNK7NqUmzwAOpwQ082raOGA/27NqkDymXdm2T5D0S+DtwPWS9rLd3Ae139vtcNzJeEpv8zXAzbb/vBh1LYknG8cLKP9WBFxhe+wSlHcIJfobZfspSXcBw2zfJmkU5Tn+l6TLbX+xyzLbtkfSSLp7pm2NGgXZgSYiIiIiBkp6UgcJSa+VtHkjaSTQmnP5GNCa8/kiSrD4qKSXAW9bjGqmAJ9gYZA6hbJAz+RGnrWBeyUNpQRWndq7me3Ztk+kDDPdYjHaAWUobevvlL4yAti+A3gIOIHFGOq7jF0P7NKaQyvphZJe0+W16wB/rgHqntQeWEkbAX+z/WPga8D2NX/zM1/c9twKbCpps5pvSYLqiIiIiIgBkZ7UwWM48C1J6wJPA/9LGfoLcAbwa0n32t5T0k3ALcAfWDiXtBuTKD12rX6yKZT5qc0g9XPAVEqAPJvOgdLRNdhaQBkO++s2edasw1BbLrXd2v5kDUlTKT+UjIWyPQrQY/u4DnWOB/4LuKjjHbbRmo+6BEN+F2H7gdq7PF7SGjX5s8BtbbJ/V1Jrru3dlB7sX5Q5n8ykBJJQ5ryeJOkZ4Cngn2v6Ip95r7JXB57s1J7aO3sk8EtJDwLXAVsv+Z1HRERERKw4ctZsjxWsDnXtsf3gQLdlZVOD0f8Ftl7M+atd6+np8fSM942IiIiI5UzSjLog7CIy3DdiJSGph9ILe9ryClAjIiIiIgZaelIHIUnzbHe1/+YyrHOy7dFd5FsXuANY37Yl7UwZLryx7bmS1gHurOef6bLu44F5tr/WK30EcEndmqWv6++izOFsrTz8EduT+8g/z/bwbsvvRl3A6hLbP5X0EuA3wCnAZcAptg9Y2jpqPcv9uyH1eOGI8IiIwSv/hYmIWLl16knNnNSVnKQhjW1hllg3AWrN94ik+4DXUeaijqZshTMa+AllW5SpixGgLqvv4J6DYfhwDdIvA86w/YOavEwC1IiIiIiIVUGG+w5SksZIuqTx/tTWvqmS7pJ0nKTrgAMlHSHpBkmzJF0g6YU134GS5tT0iTVtK0nTJM2UdHNrRWFJ8xp1fVrS7HrdCW2aN4kSlFL/ntzr/eRazkhJ19d6Lqpb4CBpgqSvSLqGstpw875H1XqnAB9diuc3XNJvJN1Y72XffvIPkXRSfY43S/pwTR9T2/tTSbdKOluSOhQznLKA1Dm2v1OvHyFpTj0+TNKFki6VdLukrzbq/6Ck22pdZ0o6taZvKmlKbdeXGvlV2zun3t9BjfZeI+kntbwTJB1SP/PZWrjib0RERETEoJQgdeU13/auts8FLrS9g+1tgd8BH6x5jgP2run71LSjgP+2PRLoAeY2C5X0NmA/YKd63Vd5rsksDEpfBZxfy6Kmt1YcPgv4d9vbUFYK/nyjjHVt72H7673K/gHwcds792rXRpJ+1cfzuLoG3lPr+/nAu21vD+wJfL2P4BLKM3vU9g7ADsARKnvSAmxH2apny3q/u3Qo4xvAdbZP7qOekZRtd14PHCRpY5VtaD5H6YV+M4tu5/PfwHdqu+5rpP9jLWtbYC/KCsEb1nPbUoL/1wPvB15je0fge8DH2jVK0pGSpkuaDg/00fyIiIiIiOUrQerK67zG8daSrpU0m7K36VY1fRIwTtIRwJCaNgX4f5L+HdjE9hO9yt0L+IHtvwHYfrhN3ZOA0TWIu8v2fErn3nBgFDCtDntd1/Y19ZofArt3aD/w7FDZ5jU/ap2zfY/tt3d8GmW470jbO7WKA74i6WbgSuAfgJf1cf1bgH9S2TJnKrAe0Nq3dprtuXUI80xgRIcyrgL2lfTSPur5je1H6zP7LWW/1B2Ba2w/bPspStDfsgsL94X9USN9V2C87QW27weuoQTXADfYvtf2k5T5w5fX9Nmd2m77DNs9ZU7ABn00PyIiIiJi+cqc1MHraRb9EWFYr/OPN47HAfvZnlWHBI8BsH2UpJ34/+zdeZhdRZ3/8feHHVkFAQHBKCI7CXQDioBEEddBGEBgcCQuMC7ooIMObhhQ3HDEBUEjYlBQGNZhk01AFgmQzs4i/JCgIsoiu4gQPr8/qi45ae7tLel0A5/X89wn555Tp6rO6eR58u2q+ha8E5ghaZztX9TRxncCF0v6kO3LG3UJ6DMVhe3b69Tdf6EEvQA9wPuBO20/VgPOvjze5ly/bQ/C/pRoq8v2UyrJlXq/w95tf9z2xQuclHYGnmycmkfnfzenUvYkvVDSeNuPtinTrq6+Rnih/Tvp655mG880vj/DAP7Nd3VBdqCJiIiIiJGSkdTR6y5gU0nL1oDvzX2UXQm4R9LSlOAMAEkb2L7e9uHA/cB6kl4N/N7294BzgS171XUJ8IHGutbVOrR5HWVK6XWN74dQ16PWLVIelLRjvf7vlNG+jmw/BDwsaYd6av++yvdjFeDeGqCOp4xY9uVi4CP1HSLptZJWGGyjtr9Dyex7tqRlBnjbDcAbJb1UJZHUno1r1wL71uPm+7iKMl14SUlrUEapbxhsfyMiIiIiRpsEqaNMDVKetP1HSrbcWcAplAy6nXyRMkX1UuDWxvmja7KcOZSgZiZlPeScOq11Y8q60WfZvogSvE6tZQ7t0Oa1wHrM36vkOsp6zebWLwfUPsyirJ88so9naHk/8IOaOOnZqcgDWJPa2ylAd1ljyf4s+F7aOYEy/XZafV8/YogzDWz/N/BHyvTcfv+N2b4b+CrlZ3hZ7UdrH9T/BD4m6UZK4N1yNuXvxkzKNOPP2G6uWY2IiIiIeF7KPqmjjKSxwI9ropt4kZC0Yp0mvRQlAD3R9tkj0Zfu7m5PzXzfiIiIiBhm6rBPakZSRxFJH6YkyfnCSPclFruJdeR6DnAncM4I9yciIiIiYkRkJDViBEiaR8m227K77bkj1J0FSN2eP4s7ImLk5L8oEREvbJ1GUpPdN2JkPFH3qm1L0lK2n16cHYqIiIiIGA0y3TdilJA0QdLpks4DLlFxtKQ5NQHWPrXckZJm1M/dkn5az79X0g31/I8kLVnPPybpKEkzJU2R1Nd+sRERERERIypBasTIWL4RaDYTJL0eOMD2m4B/pWRFHgvsQsmUvLbtw+so7BuBB4BjJW1Cydz8hnptHvO3rFkBmGJ7LCXL84G9OyPpIElTSzbk+4bniSMiIiIiBiDTfSNGRqfpvpfa/ls93gH4pe15wF8l/QbYBjhXkijb7Bxju0fSwUAXcGO5xPLAvbWefwLn1+Me4C29G7U9CZgErTWpEREREREjI0FqxOjyeONYfZSbCPzJ9k8bZU+y/dk2ZZ/y/Axp8+jn331XF2QHmoiIiIgYKZnuGzF6XQXsI2lJSWsAOwE3SHoXZTT0E42yvwb2krQmgKTVJL1ysfc4IiIiImIhZSQ1YvQ6m7JGdSZg4DO2/yLpv4B1KAErwLm2D5f0BUrCpSWAp4CPAXeNTNcjIiIiIoYm+6RGxAK6u7s9NfN9IyIiImKYddonNdN9IyIiIiIiYtTIdN9YZCTNA2ZTkvjMAw62/dtF3MbuwG22b16U9fbT5mTgfNtn9Do/AbjE9p/r97lAt+37h9DGGOAW4HeU9/c48H7bv1uIrvdu4xBgku2/91WupwfUV8qmiIhhlAleERGRkdRYlJ6wPa7ux/lZ4GvD0MbuwKbDUO9QTKCsDV1U7mi8v5OAzy3CugEOAV6yiOuMiIiIiFikEqTGcFkZeLD1RdKnJd0oaZakIxrnz5HUI+kmSQc1zj/WON5L0mRJ2wO7AUdLmiFpA0nTGuU2lNTTuyOSDqxtz5R0pqSX1POTJX1P0m8l/V7SXvW8JB0r6WZJFwBrtqlzL6AbOKX2Zfl66eOSpkmaLWnjWnYFSSfWPkyX9O7BvL+a3ffoxvv7j3p+RUm/brT37kZ7F9TnnSNpH0mfoATUV0i6YgDtR0RERESMiEz3jUVpeUkzgOWAtYE3AUjaFdgQ2JYylfVcSTvZvgr4gO2/1SDvRkln2n6gXeW2fyvpXBpTbyU9LGmc7RnA+4HJbW49y/aPa/mvAB8Evl+vrQ3sAGwMxiaBEQAAIABJREFUnAucAewBbARsAawF3Ayc2KsvZ0g6GDjU9tRaN8D9treW9FHgUOBDwOeBy21/QNKqlKy8l9lu7okKsEF9fytRRjy3q+c/CDxsextJywLXSroE+COwh+1HJL0MmFLfz9uAP9t+Z+3XKrYflvQpYHy76cj1FwT1lwTrt3mFERERERGLR0ZSY1FqTffdmBIo/Uwlctu1fqYD0ygB4Yb1nk9ImglMAdZrnB+oE4D3S1oS2Af4RZsym0u6WtJsYH9gs8a1c2w/U9e4rlXP7QT80va8ut708kH056z6Zw8wph7vChxWA9ArKUF8u0iwNd13A8rU3EmN+99X778eWJ3yngR8VdIs4DJg3foMs4FdJH1D0o62H+6v07Yn2e4u2dXWGMTjRkREREQsWhlJjWFh+7o6urcGJZj6mu0fNctI2hnYBXi97b9LupISwEHZF7RlOTo7E/gSJZDs6TAKOxnY3fbMmuxo58a1J5tdaj5CH232pVXfPOb/+xKw5yCTIJ0L/LRx/8dtX9wsUJ9lDaDL9lM1cdNytm+T1AW8A/iapEtsHznQhru6IDvQRERERMRIyUhqDIu6HnNJ4AHgYuADklas19aVtCawCvBgDVA3Bl7XqOKvkjaRtARl+m3Lo5TpsADY/ket/3jmB3W9rQTcI2lpykhqf64C9q1rQdcGxncot0Bf+nAxZa2qACRtNYB7dgDuaNz/kdp/JL1W0gqU93dvDVDHA6+s19cB/m77ZOBbwNaD7G9ERERExIjJSGosSq01qVBG/w6wPQ+4RNImwHU1TnsMeC9wEfDhOl31d5Qpvy2HAedT1l3OAVas508FflwTAe1l+w7gFOBfgUs69OuLlGmyd1GmwvYXqJ1NWU87G7gN+E2HcpOBH0p6Anh9H/V9GfgOMKsGqnOBd7Up11qTKuCflPWsUKY0jwGm1fvvo2Q5PgU4T9JUYAZway2/BSW51DPAU8BH6vlJwK8k3WO7U+AdERERETGi5GxIFs9zkg4FVrH9xZHuywtBd3e3p2a+b0REREQMM0k9JSfKgjKSGs9rks4GNqBmEo6IiIiIiOe3BKnxvGZ7j/5LtSfpMdsr9l9y0ZA0EXjM9rckHQlcZfuymvCou/fWMM3yC9HmOMp63ZUpyZyOsn1aX/f09IDUV4mIiEUnE7oiIqK3BKkRC0HSUrafHux9tg8fjv608XfgfbZvrwmVeiRdbPuhxdR+RERERMSgJLtvvOhJ2lnSlZLOkHSrpFMamXi3kfRbSTMl3SBpJUkTJJ0u6TxqsiZJn5Z0o6RZko5o1P15Sb+TdBmwUeP8ZEl7Nbrx6Vr/DZJe06aPG0i6SFJP3fN143p+b0lzav+u6n2f7dts316P/wzcSzZCjYiIiIhRLCOpEcVWwGbAn4FrgTdIugE4DdjH9o2SVgaeqOVfD2xp+2+SdgU2BLalZOY9V9JOwOPAvrXupYBpQE+H9h+xva2k91EyAffO/jsJ+HAdEd0OOI6yDvdw4K2275a0al8PKGlbYBnmb23TvHYQcFD5tn5f1UREREREDKsEqRHFDbb/BFC3gRkDPAzcY/tGANuP1OsAl9r+W7131/qZXr+vSAlaVwLOtv33et+5fbT/y8afxzQv1P1ltwdO1/zFosvWP68FJkv6X+CsTpXX/V5/TtkW6Jne121PogTCSN1ZIRYRERERIyZBakTxZON4HuXfhoBOAdvjjWMBX7P9o2YBSYf0cX9v7nAMZVr+Q7bHPecm+8N1ZPWdwAxJ42w/0KsfKwMXAF+wPaV3Hb11dUF2oImIiIiIkZI1qRGd3QqsI2kbgLoetd0vdi4GPlBHPJG0rqQ1gauAPSQtL2kl4F/6aGufxp/XNS/UEdw7Je1d65eksfV4A9vX10RM9wPrNe+VtAxwNvAz26cP5uEjIiIiIkZCRlIjOrD9T0n7AN+XtDxlPeoubcpdImkT4Lo6Hfcx4L22p0k6DZgB3AVc3Udzy0q6nvKLo/3aXN8fOF7SF4ClgVOBmcDRkjakjOb+up5reg+wE7C6pAn13ATbM/p9ARERERERI0DOBmUR0dDd3e2pme8bEREREcNMUo/t7t7nM903BkTS6pJm1M9fJN1djx+SdPNC1DtB0n2Nun/WT/ndJW061PZ61bWspMtqu/v0ujah7iva+j5X0suG2M4YSU80nnFGnYY7mDou7C97b0RERETEC0Gm+8aA1GQ84wAkTQQes/0tSWOA8xey+tNsHzzAsrvX9oYcGDdsBSzdLiERMAGYQ9mSZlG4o0M7far7tcr2OxZRP/rV0wPzkwhHRAyfTOaKiIh2MpIai8KSkn4s6SZJl9T1m0jaQNJFknokXS1p44FWKOlASTdKminpTEkvkbQ9sBtlHeaMWn+/bUhaTdI5kmZJmiJpy5rY6GRgXKuuRvm9gG7glHpt+Xrp45KmSZrdakfSCpJOrH2dLundg3jGiZIObXyfU0ddx0i6RdJxlL1V12uO5Er6VC07p2YQbo3WzmnUdWj9ZQKSPiHp5vr8pw60fxERERERIyFBaiwKGwI/sL0Z8BCwZz0/Cfi47S7gUOC4Dvfv05gG+/567izb29geC9wCfND2b4FzgU/bHmf7jgG2cQQw3faWwOcomW7vBT4EXN2oCwDbZwBTgf3rtSfqpfttbw0cX9sC+Dxwue1tgPGUAHqFNn3YoPGMP+jwHpo2qv3cyvZdrZOSuoD3A9sBrwMOlLRVP3UdBmxVn//D7QpIOkjSVElT4b4BdC8iIiIiYnhkum8sCnc2ssX2AGNUtmPZHjhd8+eOLtvh/nbTfTeX9BVgVWBFyjYvCxhEGztQA2fbl9f1tasM6MkWdFb9swf413q8K7BbY0R0OWB9SmDdNNjpvnd12NN0B+Bs248DSDoL2JESvHcyizIqfA5wTrsCtidRAn6k7kzAi4iIiIgRkyA1FoUnG8fzgOUpo/QPDWUdZjUZ2N32zLp1ys5tygy0jXYrLIcSiLWecx7z/+0I2NP274ZQ39MsOJthucbx4x3u6bRatK+63knZhmY34IuSNrP99CD7GhERERGxWGS6bwwL248Ad0raG0oCIEljB1HFSsA9kpam7BHa8mi9Npg2rmrVIWlnyrTdR/pp/9l2+nExZa2qav39Tb1tmgtsXe/bGnjVAO65Cti9rtFdAdiDsv/qX4E16yjxssC7ar1LAOvZvgL4DPNHpjvq6irJTPLJJ598hvsTERHRToLUGE77Ax+UNBO4CRhwUiHgi8D1wKXArY3zpwKfrkmKNhhgGxOBbkmzgK8DBwyg/cnAD3slTmrny8DSwKyauOjLA6i75UxgNUkzgI8At/V3g+1ptW83UN7PCban234KOLKeO5/572xJ4GRJs4HpwDG2HxpEHyMiIiIiFis5v8qMiIbu7m5PnTp1pLsRERERES9wknpsd/c+n5HUiIiIiIiIGDUSpEYMgKTHhqneiZIs6TWNc5+s557zW6Uh1L9tY+ubmZL2WNg6IyIiIiKGU7L7RgyRpCVtz1sEVc0G9gW+Ur/vBdy8COoFmAN0235a0trATEnn9ZXdt6cH1CmHcETEEGV1UUREDFRGUiMGQdLOkq6Q9AtKcImkT0maUz+H1HNjJN0i6ceSbpJ0SR8JmM6hJnyS9GrgYeC+RpvHS5pa6zmicX6upCMkTZM0W9LGvSu2/fdGQLocDGnrnYiIiIiIxSZBasTgbQt83vamkrqA9wPbAa8DDmxsQ7Mh8APbmwEPAXt2qO8R4I+SNgf2A07rdf3zdUH5lsAbJW3ZuHa/7a2B44FD21UuaTtJN1GC6g+3G0WVdFANhKc24uOIiIiIiMUuQWrE4N1g+856vANwtu3HbT8GnAXsWK/daXtGPe4BxvRR56mUKb+7A2f3uvYeSdMoW8hsBmzauHZWf/Xbvr4GytsAn5W0XJsyk2x3l2B4jT66GRERERExvBKkRgze443jvlZvPtk4nkffa8DPA/4d+IPtR56tXHoVZYT0zba3BC6gTNvt3UZ/9WP7ltr3zfsqFxERERExkpI4KWLhXAVMlvR1SsC6ByXYHBTbT0j6b+C2XpdWpgSWD0taC3g7cOVA661B7h9r4qRXAhsBc/u6p6sLsk1qRERERIyUBKkRC8H2NEmTgRvqqRNsT5c0Zgh1ndrm3ExJ04GbgN8D1w6y2h2AwyQ9BTwDfNT2/YPtW0RERETE4iInJ3xENHR3d3tqhlIjIiIiYphJ6qkJQheQNakRERERERExaiRIjRhmkizp543vS0m6T9L59ftukg7rp451JJ0x3H2NiIiIiBhpWZMaMfweBzaXtLztJ4C3AHe3Lto+Fzi3rwps/xnYa1h7WfX0gPrKWRwRAWS1UEREDJeMpEYsHr8C3lmP9wN+2bogaYKkY+vxZEnfk/RbSb+XtFc9P0bSnHq8nKSfSpotabqk8Y16zpJ0kaTbJX2znl+y1jun3vPJxfjcERERERGDkpHUiMXjVODwOsV3S+BEYMcOZdemZOXdmDLC2nua78cAbG8haWPgEkmvrdfGAVtR9k/9naTvA2sC69reHEDSqr0blHQQcFD5tv7QnjAiIiIiYhHISGrEYmB7FjCGMop6YT/Fz7H9jO2bgbXaXN8B+Hmt91bgLqAVpP7a9sO2/wHcDLySsnXNqyV9X9LbgEfa9G+S7e6SXW2NwT9gRERERMQikiA1YvE5F/gWjam+HTzZOG63OrSvFaPNe+cBS9l+EBgLXEkZhT2h355GRERERIyQTPeNWHxOBB62PVvSzgtRz1XA/sDldZrv+sDvgK3bFZb0MuCfts+UdAcwua/Ku7og26RGRERExEhJkBqxmNj+E/DdRVDVccAPJc0GngYm2H5SnVPyrgv8VFJr5sRnF0EfIiIiIiKGhZwc8hHR0N3d7akZSo2IiIiIYSapp+REWVDWpEZERERERMSokSA1YiFI2kOS61YwERERERGxkLImNWLh7AdcA+wLTBzZriwaPT3QeXlrRLyYZYVQREQsDhlJjRgiSSsCbwA+SAlSUXGspJslXSDpQkl71Wtza6ZdJHVLurIebyvpt5Km1z83qucnSDpH0nmS7pR0sKRP1XJTJK1Wyx0o6UZJMyWdKekl9fxkSd+rdf6+1Y+IiIiIiNEsQWrE0O0OXGT7NuBvkrYG9gA2ArYADgS2H0A9twI72d4KOBz4auPa5sC/AdsCRwF/r+WuA95Xy5xlexvbY4FbKEFzy9rADsC7gK936oCkgyRNlTQV7htAlyMiIiIihkem+0YM3X7Ad+rxqfX70sAvbc8D/izp8gHUswpwkqQNAdc6Wq6w/SjwqKSHgfPq+dnAlvV4c0lfAVYFVgQubtx/ju1ngJslrdWpA7YnAZMApO5M6IuIiIiIEZMgNWIIJK0OvIkSIBpYkhJgnl3/bOdp5s9eWK5x/suUYHQPSWOAKxvXnmwcP9P4/gzz//1OBna3PVPSBGDnDvdnpWlEREREjHoJUiOGZi/gZ7b/o3VC0m+AvwH7SvoZsCYwHvhFLTIX6AJ+BezZqGsV4O56PGEIfVkJuEfS0sD+jbqGpKsLsk1qRERERIyUrEmNGJr9KKOmTWcCLwdup0zHPR74TeP6EcB3JV0NzGuc/ybwNUnXUkZkB+uLwPXApZT1rRERERERz1ty8slHDBtJk4HzbZ8x0n0ZqO7ubk/NUGpEREREDDNJPba7e5/PSGpERERERESMGos9SJW0uqQZ9fMXSXfX44ck3bwQ9U6QdOwi6uPOks4f5D2/lDRL0id7nd9d0qaN71dKes5vCwbRzrz6vubU/TNXrefXkbRYRuskXV/78AdJ9zV+nmMkPbYQ9e4s6eG6D+itkr41gHvGSXrHUNscKknLSrqsPvc+va5NkLQOgO0JwLda+6MOoZ0xkuY0vh8oaZqkl0o6UtIuC/Mc7fT0gJRPPvnkM/8TERGxOC32xEm2HwDGAUiaCDxm+1s1q+mgAsNFRdKSdcuQod7/cmB7269sc3l3ynMNOQDv5Qnbrfd3EvAx4Cjbf6Yk8xl2trer7U8Aum0f3Lqmhf/fzNW23yVpeWC6pLNtX9tH+XFAN3DhQBtQ6aTq1ixDtRWwdOtn0csEYA7w54Wo/zkk/TvwceBNth+k7KkaEREREfGCMtqm+y4p6ceSbpJ0SQ1UkLSBpIsk9Ui6WtLGA61Q0n6SZteRx280zj9WR6KuB14v6W119O4a4F871LWcpJ/W+qZLGl8vXQKsWUfVdmyU3x7YDTi6XtugXtpb0g2SbmuVl7SkpKMl3VhHZP+D/l0HrFvvH9MacasjeWfVd3a7pG82+vTB2u6V9V0fW8/vXd/RTElXDejldiDpqFrPFNW9OSWtIenM+nw3SnpDX3XYfgKY0Xi+FSSdWO+dLundkpYBjgT2aY1oSpoo6dBGX+bUdzNG0i2SjgOmAevVvwPP6WuvZ1lN0jn1ZzJF0paS1gROBsb1+rkiaS9K0HxKvbZ8vfTxOgI6u/X3t90z9fFO3wMcBuxq+/56bnJtD0lzJR3Rpo01JF1az/9I0l0a4qhuRERERMTiMNqC1A2BH9jeDHiI+dt0TAI+brsLOBQ4biCVqUy5/AZlP8txwDaSdq+XVwDm1FHBqcCPgX8BdqRkaG3nYwC2t6Bkdz1J0nKUQPQO2+NsX90qbPu3wLnAp+u1O+qlpWxvCxwCfKme+yDwsO1tgG2AAyW9qo9nWxJ4c62/nXHAPsAWlCBuvfo+vgi8DngL0Az2DwfeantsfR5UphAPeISyWgGYUuu5Cjiwnv8ucEx9vj2BE/qqRNJLKX8fWgHz54HL6/3jgaOBpWu/T6vv97R++rYRZduYrWzf1Udfm44AptveEvhcvf9e4EOUUd/mz5WaIGkqsH+99kS9dL/trSkZf1tB9HOeSdIKbfrwSuBYSoD6lz6er10bX6ptbE3JRrx+uxslHSRpqqSpcF8fTUREREREDK/RFqTeaXtGPe4BxkhaEdgeOF3SDOBHwNoDrG8b4Erb99l+GjgF2Klem0fZMgRKsHan7dtd0h2f3KG+HYCfA9i+FbgLeO2An26+s+qfPcCYerwr8L76jNcDq1OCtN6Wr2UeAFajbDvSzq9tP2z7H5Spxq8EtgV+Y/tvtp8CTm+UvxaYLOlA6jYotv9se7DrPf/J/GnbzefbBTi29v1cYGVJK7W5f0dJs4C/ULLitoKyXYHD6v1XAsvRIeDqw122pwygr03Nn/nlwOqSVhlku9D5Zz6QZ7oP+APwniG0sQNwKoDti4AH291oe5Lt7pJdbY1+momIiIiIGD6LfU1qP55sHM8DlqcE0g91WPvXn74WSP6j1zrUgezFs6jSR7Secx7zfwaijBZf3M+9T9geVwOl8ymju9/ro41mOx37b/vDkrYD3gnMkDSurh8erKc8f1+j5vMtAby+MbLYSWtN6muBa1TWpM6ofd/T9u+ahWufm55mwV++LNc4fnyAfV2giTbnhrJvU6ef+XOeqY2/A2+nvI97bZ8yyDYGpasLsgNNRERERIyU0TaS+hy2HwHulLQ3lKQ3ksYO8PbrgTdKelmdHrsf8Js25W4FXtVYW7hfh/quAvav/XgtZdSrvwDjUaDdiGFvFwMfkbR0q/4OUz8BsP0w8Ang0NY9A3AD5X28VNJSzJ9OjaQNbF9v+3DgfmC9AdY5UJcAzQRLff7SwfZtwNeA/66nLqas61S9f6t6vvf7nQtsXctsDXScMj1AzZ/5zpQptY/0c89gfubtnuk5bN8HvA34qqS3DqDulmuoI7CSdgVeOoh7IyIiIiIWu1EfpFb7Ax+UNBO4CeiUYGaCpD+1PpRpq58FrgBmAtNs/1/vm+qU2IOAC1QSJ93Vof7jKMmdZgOnARNsP9mhbMupwKdrYpwN+ih3AmVa7jSVBEg/op+RbtvT63Pt208fWuXvBr5KCd4vq+09XC8fXRPuzKEEZjOHuCa1k08A3TUB0c3Ahwdwzw+Bnera3C9T1qDOqn38ci1zBbCp5m8FcyawWp1C+xHgtoXs98RWv4GvAwcM4J7JwA97JU5qp9MztWX7Tsp64RPbjCB3cgSwq6RplNHYeyhBdERERETEqKT5sx3jxUDSirYfqyOpZwMn2j57pPsVw0PSssA8209Lej1wfH9T57u7uz01830jIiIiYphJ6ik5URY02takxvCbKGkXylrNS4BzRrg/MbzWB/5X0hKURFHtMhhHRERERIwaz5fpvrEQJL1c0qmS7gDeAfwZ2M32JzzIoXRJh0h6yQDKnSBp0yH09f8kXTfY+wbZxpE1UF+UdS4t6esq+9LOUdkH9+312oWSVu3j3nUknVGPd5Z0fpsy01vreCUtJelxSe9tXO+pa3AXUDNWb2V7rO1tbN/Y37P09ICUTz755DP/ExERsTglSH2Bq0l5zqZsxbOB7U0p+32uNcQqDwH6DVJtf8j2zYOpuAZyWwOr9rVH7MKQtKTtw21ftoir/jJla6TNbW9O2XN3JQDb77D9UKcb61Y/e/VT/28pWzEBjKUk7NoeoCbYejVlfXK/6lTviIiIiIhRKUHqC994ylYrP2ydsD3D9tWSVpT0a0nTatKkdwNIGiPpVkkn1URHZ0h6iaRPAOsAV0i6opY9XtJUSTdJOqLVhqQrJXXX48ckHSVppqQpkjoFyHsC51GSTe3bqGtybecKSb+X9EZJJ0q6RdLkRrldJV1Xn+d0lT12kTRX0uE1Kdbetb696rVtJP229u0GSSvV57+61jNN0vb0oY4sH0jZQujJ+o7/avt/G+2/TNI3JH20cd9ESf9V25vT50+x7GPb6sf2lKRSrbWl21KSgs2TtG19nun1z41qWxPqOzmPMs07IiIiImJUSpD6wrc50NPh2j+APWxvTQlm/6eOvAJsBEyyvSXwCPBR29+jTBUeb3t8Lff5uth5S8r2Nlu2aWcFYIrtsZTMwZ3WRe4H/LJ+em8D9FLgTcAnKYHsMcBmwBaSxkl6GfAFYJf6PFOBTzWf1fYOtk9tnZC0DCVL83/Wvu0CPAHcC7yl1rMPjX1oa9bg3l4D/GEAW9OcWutreQ9wej/3tDRHUrenvMcnJa1Uv19br90K7GR7K+BwSjbnltcDB9h+U+/KJR1Uf9kwFe4bYJciIiIiIha9TPt7cRNl382dgGeAdZk/DfiPtluBz8mULWS+1aaO90g6iPJ3aW1gU2BWrzL/BFrrLHuAtzynI2V09TXANbYt6WlJm9tujTCeV8/PBv5qe3a97yZgDPCK2va1Nc5eBmiubT2tTd83Au5prdNsBZl1+uyxdQ3oPOC1rRv6y4zbF9vTJa0paR1gDeBB23+QNGYA986VtIyklwMbU6b73ghsRwlSv1+LrgKcJGlDwJQtbloutf23DvVPAiYBSN1J+R0RERERIyZB6gvfTUCn9Y77U4KlLttPSZpLyfoLJcBpek7gUteNHgpsY/vBOvV2ud7lKNONW/fPo/3fu30oo6V31iBzZcqU3y/U6639aJ9pHLe+L1XrvdR27xHYlsfbnFO756KM1v6VsvZzCcqIc1/+H7C+pJVs97cH6RmUn8fLKSOrg3FdvfeeGrBPAd5Ame47pZb5MnCF7T1q8Htl4/527+A5urogO9BERERExEjJdN8XvsuBZSU9O8W2rsN8I2XU7d4aoI4HXtm4b32VfTWhTL29ph4/Sk0IRAkkHwceriOhb1+Ifu4HvM32GNtjgC4a61IHYArwBkmvgbJOVNJr+7nnVmAdSdvUe1aqSYVWoQSCzwD/DizZVyW2/w78BPhenUKMpLXVyL7b0FpvuxclYB2MaykBdGuE+DrgfcBfGomZVgHurscTBll/RERERMSIS5D6AldHMPcA3iLpjjo9diJlbekpQHdZh8j+lKCt5RbgAEmzgNWA4+v5ScCvJF1heyYwnTJaeyLz10UOSh3xW5/5o4HYvhN4RNJ2A3zO+yhB2S9rn6dQpsX2dc8/KSO435c0E7iUMhJ8HOXZp1Cm+j47AtlhTSqUEd/7gJtrEqRzaLO40/ZNlCD/btv3DOTZGq6lZPG9rtZ1DyWA/m2jzDeBr0m6ln6C64iIiIiI0UiD3CYzXgRq0Hh+3UolXmS6u7s9NfN9IyIiImKYSeqpSVgXkJHUiIiIiIiIGDWSOGkESVod+HX9+nJK8p/WFNFt63TURd3mt4G3UrLlHtaujO25lK1rRgVJfwIepCQ6EnAmcFRrT9IB1rEUcL/tVYfYh09Rts650fb7Gue3Bta0fVH9/pXazneG2M41wDq2X904dz6ww1D7Plg9PfDsRkQR8aKUSVYRETGSEqSOINsPAOMAJE0EHrO9wDYvdd9S1SQ+C6XW9SFgddtPDfCepWw/vbBtL4L6drT9kKSVgR9T1o1+cIBtioWfNfBRyv6wf+x1fmtKQH/RQtbf9Jik19meImk1YM1FWHdERERExKiW6b6jkKTXSJoj6YfANGBtSZMkTZV0k6TDG2X/JGmipOmSZrUy2kp6k6SZkmZImlb3/rwAWAG4UdJekl4l6Yp636WSXlHvPVnS/0i6grKP6lckTZZ0iaS5knav1+dIuqCOUrayBv9GUo+kX9WMv0i6RtJRkq4CDpa0b713Zm1jwOpepgdR9mddRdLKki6vzzhL0rs6vcPGO1tD0vWS3tbm3X+m3jdH0sfruRMoiZ0ulPSJRtnlgcOB/et7bm31s0V9D7+X9LFG+QMk3VDLHiep07+/VgZgKFmAz2zUsYSkb9f+zW612cf5XST9WtJZkn4n6WeDeN0REREREYtdgtTRa1PgJ7a3sn03cFhdVDyWkql300bZv9reCjgB+FQ992ngINvjgJ0oe33uBjxqe5ztMyijkSfY3hI4HWhOUd0AeLPtz9TvrwLeAewJ/AK4qCZWegZ4m6Rlge8Ce9ruAk6m7NnZsrLtneo02C/VusdSMg8jaT1J5w7BfMfgAAAgAElEQVTkxdh+GLgLeA3wBPBu21sDuwDHtHuH1G1ZJK0NXAh8tjVFt0XStpQsx9sCrwc+KmlL2x8C7qWM5n6v0Y8ngCOBUxrvFEpG4LcArwOOlLSkpM3rs25ffyZL0XmLnUuBN9Ugdh/gtMa1vetzja1tHCNpzT7OQxnt/Vi9vomk1/VuUNJB9ZcgU9skJY6IiIiIWGwSpI5ed9i+sfF9P0nTKKOCm1ACjpaz6p89wJh6fC3wnToauLLteW3a2I4yagfwM2DHxrXTe00xvrBO050NYPvSen52bXMTYDPgMpVtWg4D1mvcf2rj+FrgZ5I+RP07aPuPtndr08dO1PjzGyrbzlwCrCfpZfVa73e4DHAZ8Enbl7epc0fgTNt/t/0oZRuZHQbRp5bzbf/T9r3A34A1KAH0NsDU+n7eSPlFQDtPUbbQ2YeyjcyfGtd2AH5he57tv1D2r+3u4zzAFNv31L8DM5j/d+RZtifZ7i6/CFljCI8cEREREbFoZE3q6NXcm3ND4D8pyZQeknQyZT/PllYCoXnUn6ntr9SRyXdSpvfuDNw5lPZ7tfEM0Ezo9ExtU8As2zvSXrO+AykB8ruAmXW08sGBdkzSKpQA+HbgfcAqwNa2n1ZJstR6N72f4SnKvq67UoK451Q90D70o5nQqfUzEXCi7S8OsI5TKaPbX+h1vlMf++p7u/501NUF2YEmIiIiIkZKRlKfH1YGHgUeqdNV39rfDZI2sD3L9tcogdlGbYpNAd5Tj98LXLUQfbwZWLdOmUXSMpI261D21banAF+kZO1dd6CNSFoJOJ4y0vsIJUC9twaob+mnLgMTgLGSDm1z/SpgD0nLS1oReDdwdT9dehRYaQBdv4yyjvZl9TlWl7R+H+WvBL7OglN9W33ct04hXgt4AzC1j/MREREREc8rGUl9fphGCQLnAL+nTJftz6GSdqSMdLamwvZ2MPATSZ8F/gq8f6gdtP1kTdbzvRpILgX8D3BTm+LHSHoVZfTvEttzJK0H/KCPKb9Xq+yLsgRlevNX6vmfA+eVtZRMo4yu9tXPpyW9B7hA0qO2f9S4doOkXwKtKcLH257dz6NfDnxa0nTgqD7anS3pCMp06CUoo7ofBv7QofwzwNHw7PY5LWdQ1rrOpATdn7J9r6RO5/vpfkRERETE6CJnM7SIaOju7vbUzPeNiIiIiGEmqacmh11ApvtGRERERETEqJEgNV5QJL1c0qmS7pB0s6QLVfeOHUJdh0h6yQDKndBrS6D+yk+QZElvbpzbo57bq697F5bKnrrt1uM+q6cHpHzyyefF/ImIiBhJCVLjBUNlAebZwJW2N7C9KfA5YK0hVnkI0G+QavtDtm8eZN2zgf0a3/elrCcdsF5rVSMiIiIiXhASpMYLyXjgKds/bJ2wPcP21ZJWlPRrSdMkzZb0bgBJYyTdKukkSbMknSHpJZI+AawDXCHpilr2eElTJd1UkyBRz18pqbsePybpKEkzJU2pmXbbuRrYVtLSNZPwayh7mLbqPFzSjZLmSJpUA/BWW1+V9Bvg85Lm1kRM1H7/sda5gaSLJPVIulrSxovuNUdEREREDJ8EqfFCsjnQ0+HaP4A9bG9NCWb/pxX4UbbnmWR7S+AR4KO2vwf8GRhve3wt9/m6sHtL4I2StmzTzgrAFNtjKdvCHNihP6ZsS/NWylY35/a6fqztbWxvDixP2VO2ZVXbb7R9BGX09Y31/L8AF9t+CpgEfNx2F3AocFyHfgAg6aAagE+F+/oqGhERERExrBKkxouFgK9KmkUJDtdl/jTgP9pubetzMrBDhzreI2kaZd/ZzYB261D/CZxfj3uAMX306VTKNN99gV/2ujZe0vWSZgNvqu21nNbreJ96vC9wWh2Z3R44XdIM4EfA2n30A9uTbHeXIHyNvopGRERERAyrrGmLF5KbgE6Jh/anRF9dtp+SNBdYrl7rvQ/Tc/Zlqvu6HgpsY/tBSZMb9zc95fn7Os2jj39jdV/WzYEnbN/WGtiVtBxl5LPb9h8lTezV1uON43OBr0laDeii7Nu6AvCQ7XGd2u5LVxdkB5qIiIiIGCkZSY0XksuBZSU9O8VW0jaS3gisAtxbA9TxwCsb960v6fX1eD/gmnr8KLBSPV6ZEhw+XNeZvn0R9fmzlOROTa2A9P46Ktox46/tx4AbgO8C59ueZ/sR4E5Je0NJKCVp7CLqb0RERETEsMpIarxg2LakPYDvSDqMsg51LiVL703AeWXNJTOAWxu33gIcIOlHwO3A8fX8JOBXku6xPV7S9FrP74FrWQRs/6rNuYck/ZiSAXgucGM/1ZwGnA7s3Di3P3C8pC8AS1OmFg8qe3BERERExEjQ/JmJES8+ksZQRiA3H+GujBrd3d2emvm+ERERETHMJPXUxKQLyHTfiBEg6fN1K5tZkmZI2q5uJ/OyQdRxdK3j6D7KTJB0bD2eKOnQRdH/iIiIiIjhkum+8aJmey5l65rFpq5/fRewte0na2C6zBCq+g9gDdtPLsr+9fTAs5vzRMSLRiZWRUTEaJEgNWLxWxu4vxVc2r4foJHdd3ngbOBMYP1a9rv12lHAX4FdKFl8r5f0NeDvwBcowe4DwP62/7oYnykiIiIiYpHIdN+Ixe8SYD1Jt0k6rmYfblkROA/4he0fAz8BDgCQtARlL9RTbO9G2bpmnO3TKBmJX2d7K0qSpM8MpkOSDpI0tSSWum+hHzAiIiIiYqgykhqxmNl+TFIXsCMwHjitZiMG+D/gm7ZPqWXnSnpA0lbAWsB02w+0qfYVtZ61KaOpdw6yT5Mo2YyRujPpLyIiIiJGTEZSI0ZA3c/0SttfAg4G9qyXrgXeLi2wKvQEYALwfuDEDlV+HzjW9haUtarLdSgXERERETGqZSQ1YjGTtBHwjO3b66lxwF3AFsDhwBeB44CP1OtnA0dS9jv9tw7VrgLcXY8PWJj+dXVBdqCJiIiIiJGSkdSIxW9F4CRJN0uaBWwKTGxcPwRYTtI3AWz/E7gC+F/b8zrUORE4XdLVwP3D1fGIiIiIiOEmJ+d8xKhWEyZNA/ZujL4Om+7ubk/NUGpEREREDDNJPba7e5/PSGrEKCZpU+D/Ab9eHAFqRERERMRIS5A6wiStLmlG/fxF0t2N78sMU5vflnSTpK8PR/3DRdI2kizpzYuhreUlXV5/Dnv1unaypDsbP6er+6nrXyVt3Ph+lKTxA+mH7Zttv9r2f0laopEFGElL9td2RERERMTzTab7jiKSJgKP2f5Wr/Oi/KyeWQRtCHgYWN32UwO8ZynbTy9s2wtbn6RvA9sAv7P9oUXVnw5t7QAcYfs5AbGkk4EzbJ8zwLoGVb6PepYC7re96sLU03873YZM9414Mcl/BSIiYiRkuu/zjKTXSJoj6YeU9YhrS5okaWodBT28UfZPkiZKmi5plqTX1vNvkjSzjvZNk7QCcAGwAnCjpL0kvUrSFfW+SyW9ot57sqT/kXQF8FVJX5E0WdIlkuZK2r1enyPpghpAtUY7fyOpR9KvJK1Vz19TRxCvAg6WtG+9d2Zto7/3sQRlm5YDKFu0LNO4doSkW2v/T5N0SD2/oaSLa1+uar2XXvW+TNK59fl/K2lzSesAk4Hu+u7GDPBndpykz9Xjd9b3uiPwDuCYVl313e7ez89uJUknSZpdz+8OfB1YqdbzM0lLSXqo9X5URsjn1Hv2qud3kfRrSWdJ+p2knw3kWSIiIiIiRkqC1NFtU+AntreyfTdwWP1Nw1jgLSrrFVv+ansryp6an6rnPg0cZHscsBPwD2A34FHb42yfQdnq5ATbWwKnA99p1LkB8Gbbn6nfX0UJuPYEfgFcZHtz4BngbZKWBb4L7Gm7CzgZ+HKjvpVt72T7O8CXat1jgT0AJK0n6dwO72In4Fbbv6fsJfq2es/rgHfVd7InZaS1ZRLw0dqXzwLHtqn3y8D19fknApNt/xn4MHBFfU9z29zXCjpnNAK/TwPvlbQzcAzwAdtXAxcCn+yjrnY/u4nAfXXf07HAb4DDmP+ze1+vOvam/H0ZC7yl9m/Nem1r4GP1+ib1nS1A0kH1FyBT4b42XYyIiIiIWDwSpI5ud9i+sfF9P0nTKCOrm1CCjpaz6p89wJh6fC3wHUkfpwSI7bYv2Q44tR7/DNixce30XlOML6zTdGcD2L60np9d29wE2Ay4TNIMSlC1XuP+UxvH1wI/k/Qh6t9D23+0vVubPgLs17j/1PodYAfgHNtP2n4EOB9A0qrA64Aza19+AKzTpt4dgJ/X9i8B1qkjzv1pBZ3PBoy2H6cEt5cBx9i+cwD1QPuf3S61z7h4sJ86dgB+YXue7b8A1wCtqRNTbN9Tf/4zGm08y/Yk293llyBrDLDbERERERGL3lIj3YHo0+OtA0kbAv8JbGv7IZV1jss1yj5Z/5xH/bna/kodmXwnZXrvzsBAA6cF2u/VxjPAPxvnn6ltCphle0faa9Z3ICVAfhcwU9KWnQIxSUtTRlvfIelLlKB21RpMqkNboqzfHNfherNcX98HawvgAdoHxJ0852dX+zGYVWJ99fvJxnGzjYiIiIiIUScjqc8fKwOPAo9IWht4a383SNrA9izbXwOmAxu1KTYFeE89fi9w1UL08WZgXUnb1vaXkbRZh7Kvtj0F+CLwILBuH/XuCtxoez3bY2yvD5xHmbp8DbCbpGUlrUSZjkwNeO+R1JpKvISksW3qvgrYv5bZBfhTHREdNEmvBj4BjAPeLak1kvkosNIgq7sEOLjWK0kvbSWbaq3/7eUqYF+VjL9rAW9giNmPurpKEpV88snnxfOJiIgYTRKkPn9MowSBc4AfU6bL9ufQmkhnFvAQJfDp7WDgoFpmH+CTQ+2g7SeBvYBvS5pJCYy361D8GEmzKVOFL7M9p481qfsBZ/c6dybwb7avAy4CZgFnADdSshcD7At8uPblJsqobW+HA9vX5z8SeP/AnnaBNakzJC0JnEiZBnwP8CHgJ3Wd7i+Bzw0mCRNwBLCWpDmUKbqt0emfALPaJEA6A7gVmEmZbvwp2/cOsK2IiIiIiFEjW9DE856kFW0/Vqf/XgMcYHvWSPfr+aq7u9tTp2YLmoiIiIgYXuqwBU3WpsULwU8kbURZo3tiAtSIiIiIiOevTPeNhSJp9caU179IursePyTp5oWod4Kk++r+ober7He6fbuytvepWXY3tv3NXvVMlHRoP209W0bScir7rX6pn3uOrGtYB1Rvr/OrSvpoH/fNq+9wjqTzaqZiJK0j6Yy+2oyIiIiIeL7LSGosFNsPUBIFIWki8Jjtb9W1l+cvZPWn2W4lDxoPnCVpvO1bBnJzhwRDfZVfhrLWtcf2EX2VtX34YOruZVXgo5Q9att5opWVWNJJlD1Oj6r7t+61EO0OSE8PaGFzHEfEqJVVPhERMdplJDWG05KSfizpJkmXSFoeStZhSRdJ6pF0taSN+6vI9hXAJOCgWseBkm6UNFPSmZJeUs9PlvRtSVcA32jWUe/5VasfvSxF2X/1dtuH1fJjJN3S4RkmS9qrHr9D0q2SrpH0PUnN4HxTSVdK+r2kT9RzXwc2qKOlR/fz6NdRMx/X/sypx5tJuqHWMUtliyIkvbdx/kc12++Stb9zJM2WNOTkWBERERERwy1BagynDYEf2N6Mkl14z3p+EvBx213AoXQeUextGtAKaM+yvY3tscAtwAcb5V4L7GL7v1onJB0M/Auwu+0n2tT9GeBp24cM8Bla9S4H/Ah4u+0dgDV63b8xZbugbYEvqez5ehhwR52i/OlOD1szBr8ZaJfx+MPAd+uIazfwJ0mbUDI0v6Gen0fZXmccsK7tzW1vAfy0TVsHSZoqaSrc16lLERERERHDLtN9YzjdaXtGPe4BxkhaEdgeOF3z55QuO8D6mpNQN5f0FcrU2RWBixvXTrc9r/H934E/UQLUpzrUfQ3wekmvtX1bX8/Q676Ngd/bvrN+/yV1tLe6oG7N86Ske4G1+nzCYnlJM2pbPcClbcpcB3xe0isoAfvtkt4MdAE31ne7PHAvZU/ZV0v6PnABbbYisj2J8ssDpO5MBoyIiIiIEZOR1BhOTzaO51F+KbIE8FAdRWx9NhlgfVtRRk0BJgMH15HBIyiZfVse73XfHErA94o+6r4KOAT4laR1+nmGpv5Wb/Z3fzutNamvBJahrEldgO1fALsBTwAXS3pT7ctJjfe6ke2Jth8ExgJX1rpOGEAfIiIiIiJGREZSY7Gy/YikOyXtbft0lSG/LW3P7Os+SW+kjFCOr6dWAu6p02f3B+7u4/bpwPHAuZLeWhMQtevbmZLWAC6StNMAH+lWyijlGNtzKdNt+/No7X+fbD9c17H+n6Tjm9ckvZoygvu9erwlZYT0/yQdY/teSavVdh4H/lmf7w5KgN9RVxdkm9SIiIiIGCkZSY2RsD/wQUkzgZuAd3cot09NAHQb8Dlgz0Zm3y8C11Omwt7aX4O2r6Gsf71A0sv6KPdD4CzKOtDlOpVrlH+Ckqn3IknXAH8FHu7nngf4/+zde7xUVf3/8ddb8IICmte0VNJUvKPnQF8RDcvMTFMTQ9OSMv3aRctCf5V3rbQsLTQvVIrmNfKSl6+CFxAQFDjcRc1vSN9KzUveUETF9++PtcazGWbmzIFzOAf8PB+PeZyZNXuvvfaeofzMWvvzgYdzIqOaiZNsTwdmAkeUvTUYmJOXBfcGrrU9FzgdGC1pFunabEpKvDQ2bzsC+FFL5xVCCCGEEEJHkVuZi17Sh4DNbc9qnyGFsHKR1N32gjwr/FtShuCLO3pcy6qxsdFTYyo1hBBCCCG0M0lNthvL2+uaSc0lNHrm5YMzgaslXdTWgwxhJXVcnqV8DFiXlO03hBBCCCGEsAzqXe67ru3XgC8CV+fSIfu237BC6DiSNsjLjGdIek7Svwqv1yjf3vbFOVHRDraPsv1mlX7PzPVWZ0maLqlvbv9+LmXTHudyTa4lO1vSnySt0x7HCSGEEEIIoa3Umzipq6RNgS8Bp7XjeELocPme0T4Aks4GFtj+5fL0KWkvYD9gN9tv5wRNpX9/3weuAt5qRX9dysrsVHNi/oEJScOAbwI1z6WpCdRSzuIQwkqllXf2hBBCCB2q3pnUc0l1KP9me0rOJvpU+w0rhM5J0qk54dEcSSfmtvMlfbuwzc8lfats102BF2y/DWD7BdvPSjoZ2BgYL+n+vP/ReeZzjqSf5baukl6R9BNJk4HTJY0sHPNzkv5UPt5CgLoaKRFU/KdqCCGEEELo1FqdOCmED5LiTKqkfsDvgD2ALsBkUpbdN4CbbPeV1IX0A05Drk9a6qcnMAFYE7g/bz8+v/dPYCfbr0j6aN6ukZQl+H7gQuBe4B1ShuNbc9D5ONDf9ks5QL3a9j0VzuFaYH9gFnBQzkhcvs3xpBI/wBYN8PfluGohhM4m/q8+hBBCZ7S8iZO2lfSApDn59S6STm/rQYbQye0F3GL7TduvA7cDA2z/DXhd0s7A54DJxQAV3p/R3B04AXgJ+LOkr1Q4xieAB22/aPsd4AagVLP1beC23N97+b0v54RmDaQ6qUux/VXSTO7fgMOrbDPcdmP6H4mN6rwcIYQQQgghtL16l/v+jlRb8R2AXH6mvG5jCKu6Wndq/gEYAnyNdH/pUmy/a3uM7TOB75ISkbXmGAu95NKHq4CvkOrO3lzrHtX83p+qHDOEEEIIIYROo97ESWvbnqwls6m82w7jCaEzGwdcKelC0nLfg0nLfQFuAc7K7feX7yhpe+Ad2/+bm3aleU3t60AP4BXgEeBCSRuQlvseQZVER7b/IelF4IfAPhWOuRrQy/a8XMP1IOCJlk6yoQGiTGoIIYQQQugo9QapL0rampx0RdIg4Nl2G1UInVD+oeZGYEpuutz27PzeW5LGAc/lpbjlugPDJK0LLAae5P17QBkO3C/pH7b3lXQmMJY0q3qn7bslVfu3egPQ0/ZfK7zXBbhOUo/8egZQntAphBBCCCGETqWuxEk5m+9woD/wMvA0cLTt+e06uhBWEnnWcgZwiO15K/C4VwCTbF/TVn02NjZ6akylhhBCCCGEdlYtcVJdM6n5P7r3lbQOsFpOGhPCB4KkI4GmKrOV5IRJdwAjV3CAOoP0o9FJK+qYIYQQQgghtLeaiZMkHZ3/fl/S94H/Bo4rvK6172JJM3Ktx5GS1s7tE1s7SEk/bu0+rex/I0mPSpouaa+y975XGnt+vWA5j9VP0jhJT0p6QtLvi/3Xsf9mkv6cnw+RdGmFbXqVMjF3BElj8/nNyud4qaT12qjvgZLuqtJuSccW2nbLbUOX43jbAZ8n1QquyPZs2x+zfeqyHicfa2i+XnMkzZT01dw+X9KGFY7bx/Y+pdqrLfS9XoXarSGEEEIIIXQ6Lc2krpP/9qi5VWULbfcBkHQ9qfTGRbb7l28oqUutzKTAj4GfLcMY6vVp4Anbx1R473vAdcCby3sQSZsAI4EjbE/KyWwOI13fFvuX1NX2M8Cg5R3LCnCU7amS1gDOB/4CfLKdjzmblMjoD/n1EcDM5exzK+DbwO6SNrH971w79b9oTh7WlZTwiErtts9u6SCSTgA+A/Sz/Vq+d/WQ5Rx70Xqk+1Eva2nDpiZQrRzDIYSVStRIDSGEsLKpOZNq+8r89DLb55Q/WnGc8cDHoXkmMs98jZF0Aym4QNLtkpokPSbp+Nx2AdAtz8pen9uOljQ5t10pqUt+jMizULMlnVw+CElb5nqvs/LfLST1AX4BHJD761bY/iRgM2CMpDGF9p/mma5HcuBZmo29RdKU/NizwnX4NnCN7Un5+tr2n3Pg00/SxDybOzHP4JVmS0dKuhMYXWGWdHNJ9+aZy7MK7V0lXZPP9c+FmewGSQ/l6zxK0qa5/bg87pn5PErbj5A0LI9pnlLSrLrlWb5TgS0k7Vrt88vtl0uamj//979fkvbPM4wTqF1C5f+AtSRtkn8A2B+4p9BPq85RUndgKDAGGEYKQEuOsH2g7QNZshzTUu2S1pF0dz7uHEmDWdqPgW/leqrYfrXsPtMTJU3L3+3ehX6vyuc0XdLBuX3HwvWdJWkb4AJg69x2YY1rGEIIIYQQQoeqt07qREmjJR0r6UOtOYBSVtLPkQPRMv2A02zvkF9/3XYD0AicJGkD2z8kz8raPkqplMdgYM88U7uYVCeyD/AR2zvZ3hm4usLxLgWutb0LcD0wzPYM4ExSnck+theWNrY9DHgG2Md2qcTHOqTZsV1JJUmOy+2/AS623Zc0O/r7CsffCWiqcqmeAPa2vVseT3HmeA/gGNufqrBfv8L5Hy6pdOPxdsDwfK6vAd+StDpwCTAoX+ergJ/m7W+13Tef1+PAsYVjbAoMAA4kBTvA+/dEtijPks8Eetf4/CB9FxqBXYBPStpF0lqkOr0HAXsBH27hcH8GDicl+ZoGLCq819pzfAs41PbupBIvv8rBb2vtDzxje1fbOwH3Ft9Uyr7bw/bfavTxYh7H5aTAGeA04MH8nduHVLpmHdKqhd/k69sI/JNUpuZv+Tt+Snnnko7PPxBMhReW4RRDCCGEEEJoG/UmTtpGUj/SzNBpkuYCN9m+rsZu3QpBzHial2AWTbb9dOH1SZIOzc83B7YBXirb59NAAzAlxwvdgOeBO4GtJF0C3A2MrnC8PWieifsjaQa1td4GSvdENpGWaALsC+xQiGF6SurRiiRT6wLX5FkvA6sX3rvP9n+q7Hef7ZcAJN1KCrRuB/5h++G8zXWk5Dr3kgLl+/I4u9BcSmgnST8hLQvtDowqHOP2XFZlbmnmGNI9kXWeG6RyKlD98wP4ktIMeldS0LgD6YeUp20/lc/xOppLt1TyJ+BmoDdwIylYLWntOQr4maS9gfeAjwCb0HqzgV9K+jlwl+3xZe+LXN6phlvz3yaav8P7AV9Q8z23awFbAJNI/04/SgrMn2optrY9nJTBG6kxFgeGEEIIIYQOU2+dVGxPBiZL+hlwEXANKfipZmEdQcwbpSeSBpICvT1svylpLOk/usuJtGT2R0u9kZaTfpa0rPZLwNdbOP6y/Mf4O26u27OY5mu4Wh77wsq7AfAYKUD7S4X3zgPG2D5UUi9SncySNypsX1J+Dq7RLuAx23tU6GcEqXzKTElDgIGF94qzka2eSczLeXcmzV5uTIXPT9LHSDOEfW2/LGkEzZ9/3Z+T7eckvUP68eC7LBmkjqB153gUsBHQYPsdSfOp/J1saUx/ldQAHACcL2m07XML778m6Q1JW9XIDlwaX/E7J+Aw20+Wbfu4pEdJCZ9GSfoGUHfW4YYGiAo0IYQQQgiho9S13FdST0nHSLoHmEiafevXxmNZF3g5B6i9WfL+v3fyUlWAB4BBkjbOY1tf6V7TDUnlcW4BzgB2r3CMiTTfP3gUMKGOcb1OfYmjRgPfKb1Qute13KXAMZI+UdjuaEkfJp3/v3LzkDqOV/KZfA26kRLtlGZPt5BUCkaPJJ3rk8BGpXZJq0vaMW/TA3g2X+ejaCO5v/NJM7uzqPL5AT1JwfireSbzc7mLJ4CPSdq6cC4tORP4fxWScbX2HNcFns8B6j7AlnXssxRJmwFv5pUHv6Tyd/N84LeSeuZ9euZZ5VpGke5VVd5nt/x3K2BeXq5+B2n5dL3f4xBCCCGEEDpUvTOpM0lLSM8tJf1pB/cCJ0iaRQqmHim8NxyYJWlavi/1dFISodWAd0gzpwuBq3MbwFIzraQlr1dJOoV0493X6hjXcOAeSc8W7kut5CRSkDGLdF3Hke4NfF9OkHQEaennxqQlpONISzl/QVru+33gwTrGVTKBtHT548ANOaNuL9Ks5TGSrgSeAi63/bZSUqBhStljuwK/Js3wngE8CvydtDy1xYBG0owas+XXS1oErAncDxycr8HcSp+f7UckTc9jmUcOtm2/lYO1uyW9mM93p1rjsl2tzFFrz/F64M50nwqOWaEAACAASURBVCYzSAHzstiZdL/oe6Tz/WaFbS4nLUGekmeC3wF+1UK/55E+v1k5UJ1Puqd2MHB07uc50r/b/0h6WCnp1j2V7ksNIYQQQgihM5DryE0vSbadE7zY9nLVCg1hZaZUgubXtl/Jr9cjlSqiUns9JWg6k8bGRk+N9b4hhBBCCKGdSWrKiVOXUO9M6o6S/gisn/rSC6Rss3Na2C+EVdHzwLV5ZhTSsvlSxt5q7SGEEEIIIYQ61DuTOpFUHmRMfj0Q+Jnt/jV3DG1C0mLS8tSuwNPAV0qzdR0wlh1JZWw+Skrccy3wE9fzRVq2480E5tqueC+qUj3ZK0kZe9cExts+Pt8TvJnt/1mOY18M/N32r/PrUaR7a7+RX/8K+Jfti5b1GBWO2W7nU/8YGg0xkxrCyqp9/tc4hBBCaHvVZlLrrZO6TilABbA9llQvNKwYpTqxOwH/Id2Du8Ll5Ex3ABfY3hbYlZQ991vtdLztSd/RvZXqf1YyjFSfto/t7UkBNKS6sQe08njlKwsmkrMD5/tnNwR2LLzfn+ZEVS31rcL90rW05/mEEEIIIYTQ6dUbpM6TdIakXvlxOmlGL6x4k0j1OkuBz4WS5kiaLWlwbl9N0mWSHpN0l6T/yQmTkDQ/Z0JGUqNSqR8krSPpKklTJE2XdHCFY38ZeNj2aADbb5IyGv8w93F27mOspHmSTirtmLMYT5Y0Q9KVSmVpWvJlUlKo0cAXqmyzKfDP0gvbsyWtAZwLDM7HGyypn6SJ+dwm5hlLJA2RNFLSnSxdW/dhmkvY7AjMAV6X9CFJawLbA9MldZf0gKRp+XM4OPfdS9Ljki4DpgGbSxpR+LxOXo7zWV/S7ZJmSXpE0i75mGdLGi5pNGnp8XgVMk3n5Em7tHThQwghhBBC6Cj1zrR8HTiHlIVWpIy09WTGDW0oB3afBv6Qm75ImmHblTTLN0XSOGBPoBcpq+zGpEy/V7XQ/WnAg7a/nhP+TJZ0v+1ijdYdgabiTrb/loO0nrmpN7APKXPuk5IuJ2UeHgzsmcu5XEYqAXOtpN8DV9iutL50MKne6XakYPjGCttcDDyYl6SPBq62/YqkM4FG29/J164nsLftdyXtC/wMOCz3sQewi+3/lJ3bM5LelbQFKVgt/UCwB/AqMCtnTH4PODTXO90QeETSHbmb7YCv2f6WUq3Uj+QZ8VJipWU9n0uA6bYPkfQp0rLrUjDaAAywvVDSMaSSRt+TtC2wZi4FtASlDMq55M0WFYYVQgghhBDCilFXkGr7ZVKJldAxukmaQQo8m4D7cvsA4MZcD/Tfkh4C+ub2kbbfA56TNKZCn+X2A74gaWh+vRYpWnm8sI2Aanc7ldrvtr0IWCTpeWATUmDdQAqiAbqRkg9Rur+znKS+wAu2/y7pn6TSQR/K38Xmg9pXK90ruj+pzM1/S9q1Qpfrkkr8bJPHunrhvfvKA9SC0mxqf+AiUpDanxSklkrdCPiZpL1JZYU+ks8b0j2tpXJK84CtcoB5N0vP3LbmfAaQg2zbD0raQKmsEMAdthfm5yOBM5TKLn0dGFHpJG0PJ5VbyvekhhBCCCGE0DFqBqmF2aCKbFdbghna1kLbfXIQchfpntRhpOCokmrtAO/SvMx7rbJ9DrP9ZI19HwP2XuJA0lbAAtuv5wB0UeHtxaTvmIBrbFeqXVvNkUBvSfPz656koOz35RvafoY0U3yVUh3QSnVUzwPG2D5UqY7s2MJ7b1TYvqR0X+rOpOW+/wB+ALxG8+z0UcBGQEOeKZ5P87V9v2/bL+eA87Okz/BLpMBxWc6n0mdcCi6Lx3xT0n2kgPdLwFI3ppdraICoQBNCCCGEEDpKS/ek7kHK4joe+CXwq7JHWIFsv0qa0R4qaXXSsuvBkrpI2ogUQE4GJgCH5XtTNwEGFrqZT5rVhOblrgCjgBOVI01Ju1UYwvXAgLxctpRIaRjwixaG/gAwSNLGeb/1JW1ZbWOlBEOHk5bg9rLdixRkLZXhV9L++Vog6cPABsC/gNdJS45L1s3tkJa/1uth4EDgP7YX5xnX9Uj/NiYV+n4+B6j7ABXPLS8FXs32LcAZwO7LcT7jSMFxKdv2i7Zfq3IOvyd9TlNqzBiHEEIIIYTQKbQUpH4Y+DFpJuc3pPsDX7T9kO2H2ntwYWm2pwMzgSOA24BZ+fWDwKm2nwNuISXfmUMqZ/IoaXkqpHuLfyNpPGmms+Q80hLYWXn27rwKx15IChZPl/QkqSzOFODSFsY8FzgdGC1pFmm58qYAkn4vqXx2b29SaZd/FdrGATtI2rRs2/2AOUqlakYBp+RrMCZvP0MpodQvgPMlPQzUk7SpZDbpft9Hytpetf1ifn090ChpKilwfKJKXx8Bxual2yOASjPL9Z7P2fmYs4ALgGOqnYDtJtLM79Utn24IIYQQQggdq646qQA5m+mRwIXAubYvaWGX0IEkdbe9QNIGpNnVPXOwEz5gJG1GWt7cO9+nXFNjY6OnxnrfEEIIIYTQzlSlTmqLiZNycPp5UoDai7Rs8Na2HmBoc3fl7LFrAOdFgPrBJOmrwE+B79cToIYQQgghhNDRas6kSrqGtNT3HuAm23NWyKCkxaQllV1J2WWPyQlgJtruX3vvpfr6se2ftcc4c/8bkZIZrQGcZHt84b3vAcNzPVEkLbDdfTmO1Y90b/AmpCQ5E/Ix36xz/82AYbYHSRpCoaRJYZtewF2lMikrmlJN0F8AB5Ey5c4Fvm37nzV3XLKP7UjLnNcD1gTG2z4+1wvdzPb/tP3Il0+e8X4gv/wwaSn2C/l1P2Bspe++pBGkz+vPbTeWRkPMpIawMqpzcVQIIYTQKVSbSW3pntSvANsC3wUmSnotP16XVC1JS1tYaLtPDpTeBk4AqPIf6S3dX/jjdhhf0aeBJ2zvVgxQs+8Ba7fFQXICpJHA/7O9HbA9cC9LJtOptX9X28/YHtQW42lHPyOd07a2twFuB24tJXSq0zDg4vwd2h4oLU3vAxxQaQdJ9dYMbjPFY9p+KY+3D3AFzePvY/vt1v44E0IIIYQQwsqqZpBqezXbPfKjZ+HRw3bPFTTG8cDHIc1E5r8DJY2RdANpxhVJt0tqkvSYpONz2wXkGqOSrs9tR0uanNuuzJlxu0gaIWmOpNmSTi4fhKQtJT0gaVb+u0WemfsFcEDur1th+5OAzYAxKtQplfRTSTMlPZIDTyRtJOkWSVPyY88K1+HbpDIukwCc/Nn2vyX1kzRR0vT8d7vc7xBJIyXdSUpa1CsnRSrZXNK9kp6UdFahvauka/K5/lnS2rm/BkkP5es8qpTESNJxedwz83mUth8haVge0zxJNQPkvN/XgJNz7VdsX00qa/OpPP7HJf0uf86ji9e8YFNS4ihyH7PzDO25pGzIMyQNlnS2pOGSRgPX5v7HS5qWH/3zuAZKGpuvxROSri8FzZIOyG0T8rneldvXkXRVvi7TJR1c6TOpdT3Krk3puy9Jl0qaK+luYOPCNtU+n5Py9rMk3VTvMUMIIYQQQugQtjvdg1R3E9Jy378A3yxrH0iqBfmxwj7r57/dSFltNyjuk59vD9wJrJ5fXwZ8lVSS5b7CdutVGNOdpGXHkGpb3p6fDwEurXIe84ENC68NHJSf/wI4PT+/ARiQn28BPF6hr1uBg6scpyfQNT/fF7ilMLZ/Fq5NL2BO4b1nSSVOStesMW9jUqIlSPU6h5Iy/04ENsrtg4Gr8vMNCmP5CXBifj6CNPu7GrAD8L+F7WZUOI9dgOkV2i8mld7pRarz2ie3/wk4usL2XyNlM74HOLn0eZZ/VqQMuU1At/x6bWCt/HwbYGrh+/YqqRzTaqTSMwNItVD/Qf4eAjeSlt5CmhE+uvR9Av4KrFP+mVT5PM8Ghlb5N/FFUnbkLqQfQV4BBrXw+TwDrFntu53bjyet8Z0KWzgtGoxHPOKxsj1CCCGElUnpv7fLHyt8iWOduimV6YA0k/qHCttMtv104fVJkg7NzzcnBRkvle3zaVJAOiVPhHUDnicFoFtJugS4m8ozXHuQAgSAP9JybdBK3ibdvwopOPpMfr4vqbxIabueknrYfr3OftcFrpG0DWBSwFJyn6vXxrzP9ksAkm4lBV63A/+w/XDe5jpSgHgv6f7k+/I4u5CCXICdJP2EFIx1J5VOKbndKWHP3NLMMYDTstZyyuOv1f607dJ3o4kUuC7B9tWSRgH7k0rm/LekXatcgzucSutAum6X5hnyxaSl7iWTne+Lzd/NXsACYF7he3gjKdiDVErmC5KG5tdrkX6AgNqfSUv2Bm50mml+RtKDuX07qn8+s4DrJd1O+nyXYns4MDydX2OlzyCEEEIIIYQVorMGqQurBDFFb5SeSBpICvT2cEqwNJYUFJQTacnsUvUpcxDzWdKy2i+RZktrWZb/kH8n/2IAKQgqXf/V8tgXVt4NgMdIAfZfKrx3HjDG9qFKiY/GFt57o8L2JeXn4BrtAh6zvUeFfkYAh9ieqZSQaWDhvUWF5y3dV/q/wJYVAvTdST8klPe3mPRDw1JsP0OaBb4qL3GulgiqeH1OBv4N7Er6TN6qch6lz67W+Qg4zPaTSzRKn6D2Z1KPaoF8tc/n86Tg9gvAGZJ2tP1utc4bGiAq0IQQQgghhI7SUuKklcW6wMs5QO0N/FfhvXcklWYWHwAGSdoYQNL6SveabgisZvsW4AxSUFRuInBEfn4UKbNuS16nvsRGo4H3s+zmmbxylwLH5CCntN3Rkj5MOv9/5eYhdRyv5DP5GnQDDgFKs6dbSCoFO0eSzvVJYKNSu6TVJe2Yt+kBPJuv81GtOP4SbL8BXANcpJwQS6mEytrAg7X2LZK0f+kzz9dnA9L1aenzWBd4Ns/8foU0G1nLE6QZ+F759eDCe6OAEwv3ru5W7/hbMA44Quk+6k2BfXJ7xc9H0mrA5rbHAKfSPNsdQgghhBBCp7SqBKn3kpL9zCLNKj5SeG84MEvS9bbnAqeTkgjNIt3btynwEWBsXsY5AlhqppW05PVreb+vkDIet2Q4cI8KiZOqOAlozIlt5pKzGRfZ/jcpSP6lUqKjx4G9gNdIS4/Pl/QwLQdWRRNIS5dnkO5jLc2fPU4KiGcB6wOX236bdO/jzyXNzPuUMs6eATxKup5P1HPgwnLucj8izWD+VdJTwOHAoYUZ6HrsB8zJ4xwFnOJUJ3YMaVn1DEmDK+x3Gem8HyEt9a0545lnvr8F3CtpAmkW9tX89nmk5cOz8kzuea0Yfy23AU+REoZdDjyUx1Lt8+kCXCdpNjCdlDX4lTYaSwghhBBCCG2uZp3UEEJtkrrbXpBnTH8LPGX74o4e1/JobGz01FjvG0IIIYQQ2pmWsU5qCKG24/Ks8GOk5cJXdvB4QgghhBBCWKnFTGr4QJO0wPYKvUdT0kTb/VveEiSdDRwHvEBK1vRj23e04lhDgEbb32lp2+Z9Gp2q0YQQVibxf+chhBBWNjGTGsJyKiVzWl71BqgFF+ds14eTshXX9e9WUmfN3h1CCCGEEEJVEaSGDzxJAyXdVXh9aZ6BRNJ8SWfmxEiHSzpO0hRJMyXdImntvN3hkubk9nG5bUdJk3Oiplm5ji2SFhSOdaqk2Xm/C2qN0/bjwLvAhpIOkvSopOmS7i/VoJV0tqThkkYD15ad5+clTcrZrEMIIYQQQuiUYqYlhJa9ZXsAgKQNbP8uP/8JcCxwCXAm8Fnb/5K0Xt7vBOA3tq+XtAZlmZclfY5U+ucTuXzS+rUGkcsPvUda+jsB+C/blvQNUnmZH+RNG4ABthcWgu1Dge8DB9h+uULfxwPHp1db1H1hQgghhBBCaGsRpIbQspsLz3fKwWmp3uio3P4wMELSn4Bbc9sk4DRJHwVutf1UWb/7AlfbfhPA9n+qHP9kSUeT6rwOzoHpR4Gbc63UNYCnC9vfkcvjlOwDNAL72X6t0gFsDyeVTMr3pIYQQgghhNAxIkgNIS2hLS59X6vs/WK91BHAIbZn5lnKgQC2T8gznZ8HZkjqY/sGSY/mtlGSvmH7wUJfAuoJCC+2/cuytkuAi2zfIWkgcHaV8QLMA7Yi1X5tMSNSQwNEBZoQQgghhNBR4p7UEODvwA6S1pS0LvDpGtv2AJ6VtDpwVKlR0ta2H7V9JvAisLmkrYB5tocBdwC7lPU1Gvh64b7Wmst9y6wL/Cs/P6aFbf8OfBG4VtKOrThGCCGEEEIIK1wEqeEDK2e/XWT7H8CfgFnA9cD0GrudATwK3Ac8UWi/MCdAmgOMA2YCg4E5uY5qb8oSGdm+lxS8Ts3bDG3F8M8GRkoaTwqKa7L9JCmoHilp61YcJ4QQQgghhBUq6qSGDyxJuwK/s92vo8fSmTQ2NnpqrPcNIYQQQgjtLOqkhlAg6QTgRuD0jh5LCCGEEEIIoVnMpIaVjqTFwGxgdVLSo2uAX9t+rw2PcS4wzvb9rdxvIDDU9oEV3psPNNpucXlu3n4sKeHRls7/UCXdDuxru3srxnQvsCkpUdp44Nu2F1ffvtF15FcKIXQi8X/lIYQQVkYxkxpWJQtt97G9I/AZ4ADgrLY8gO0zWxugtpNXgD0Bcv3VTZehjy/Z3hXYCdgIOLzthhdCCCGEEELbiiA1rNRsPw8cD3xHSRdJF0qaImmWpP8GkLSppHGSZkiaI2mv3L5A0q8kTZP0gKSNcvsISYPy876SJkqaKWmypB6Sekkan/ebJql/YVg9Jd0maa6kKyQt9e9M0tG5rxmSrpTUpcop3gQckZ9/keYarKV+Timc6zlVrlGpNmpXUk3VmHMJIYQQQgidVgSpYaVnex7pu7wxcCzwqu2+QF/gOEkfA74MjLLdB9gVmJF3XweYZnt34CHKZmQlrQHcDHw3z0buCywEngc+k/cbDAwr7NYP+AGwM7A1Kbgs9rl93mfPPJ7FFMrZlHkA2DsHsUfksZT62Q/YJh+vD9Agae9KnUgalcf8OvDnCu8fL2mqpKnwQpWhhBBCCCGE0P66dvQAQmgjyn/3A3YpzYKS6oluA0wBrsr1TW+3XQpS36M58LuOsplKYDvgWdtToHlWUtI6wKWSSkHmtoV9JufAGUk3AgNYMjD8NNAATJEE0I0UQFayGJhACmq72Z6f9ymd6340l8zpns91XHkntj8raS1SiZ1PkUroFN8fDgxPY26MmdYQQgghhNBhIkgNKz1JW5GCuedJweqJtkdV2G5v4PPAHyVdaPva8m1YeimsKrQBnAz8mzQruxrwVo0+KvV5je0fVT6jpdwE3EaqjVrez/m2r6ynE9tvSboDOJiyILWooQGiAk0IIYQQQugosdw3rNTyPaRXAJfmDLijgG/mGVMkbStpHUlbAs/b/h3wB2D33MVqQGnW9cukWcuiJ4DNJPXN/fWQ1JU0Q/tszij8FaB4T2k/SR/L96IOrtDnA8AgSRvnPtfP46tmPHA+qWRO0Sjg65K6534+UuqzcH26S9o0P+9KSjL1RI1jhRBCCCGE0KFiJjWsjLpJmkFzCZo/Ahfl934P9AKmKa2LfQE4BBgInCLpHWAB8NW8/RvAjpKagFdJQeX7bL8taTBwiaRupPtR9wUuA26RdDgwJvdTMgm4gHRP6jjSLGixz7mSTgdG50D2HeDbwN8rnWwOvn9ZoX10vr91Ul4CvAA4miWXDq8D3CFpTVIg/SApqA8hhBBCCKFTijqp4QNN0oLW1Bz9IGhsbPTUWO8bQgghhBDaWdRJrYOk0yQ9lst5zJD0idz+PUlrL0e/60l6Kc/sIWkPSZb00fx6XUn/qVSqZHlIWpzPo/T44TL200vSnBa2eTQf4/8kvVA4Zi9JC5btDEDSQEmvSpou6XFJZ+X2IZIuXdZ+Kxyjf8tbLlPfY/M1UaHt9uW5JiGEEEIIIazKYrlvJmkP4EBgd9uLJG1IqikJ8D1S5tc3W9FfF9uLAWy/Iuk5YHtgLtCflJG1P/An4L+AR/P9jfX03dX2u3VsujCXOGl3tksB/RCg0fZ3Su8V4rNlNd72gTmj7gxJdy1vhyW2u0s6m7RUdmJb9VvmFWBPYIKk9YBN2+k4baKpCZb/IwshrAixGCqEEMKqKGZSm20KvGh7EYDtF20/I+kkYDNgjKQxAJIuzzUlH5N0TqkDSfMlnSlpAnB4Wf8Pk4JS8t+Ly15PzH0cJ2mKpJmSbinN4EoaIemiPIafS/pkYbZyuqQe9Z5oHufPJU3Oj4+37lK1nqSf5nN6RNImuW2jfI5T8mPPWn3YfgNoItUehZTQ6F5JT0n6ReFYtT6fcyRNkzRbUm9JvYATgJPztdxL0paSHsgz6g9I2iLvPyL3PUbSvPwZXJVneEfUGPpNpBqnkGqmLlHmRtIp+fxnlcabZ6Afl/S7fB6jle6JrfUd2UTSbbl9Zml2WNLR+XOeIelKpZqrIYQQQgghdEoRpDYbDWwu6a+SLpP0SQDbw4BngH1s75O3PS2vnd4F+KSkXQr9vGV7gO2byvqfSHNQuhUwEiitv+5PCmIBbrXd1/auwOPAsYU+tgX2tf0DYCjw7TxTuhcpoU+5blpyuW8xKdBrtvsBlwK/bvHqZJI2k/Q/9W6frQM8ks9pHHBcbv8NcLHtvsBhpKRHtY69AWnW+bHc1IeU6GhnYLCkzXN7rc/nRdu7A5cDQ23PJyUSuth2H9vjSdfkWtu7kOqKDivs/yFSndGTgTtJPzbsCOysVDO1kgeAvXNweATNdVmRtB+ptmm/fD4NSqVyyO2/tb0jaTb2sNxe7TsyDHgot+8OPKaUWGkwsGf+riwGjqpwbY/Pgf3UlGsqhBBCCCGEjhFBamZ7AdAAHE/6r/Sb89LVSr4kaRppye6OwA6F926uvEuaSZX0MWC+7bcAKZUPaQAm5+12kjRe0mxSMLFjoY+RpSXEub+L8kzvelWW/y7MgVfpURzbjYW/e1QZ81JsP2P7gHq3z94GSkt0m0jZdyFlyb1UKVPvHUDPKjPCe0maTvoh4QLbpSD1Aduv5ms5FyiVcan1+ZRmMYvjKLcHcEN+/kdgQOG9O3O23dnAv23Pzsu0H6vR32JSGZrBQLccGJfslx/TgWlAb1JwCvC07RkVxlvtO/IpUvCN7cW2XwU+Tfp+TcnX+dOkH0mWYHu47cYU3G9U5TRCCCGEEEJof3FPakEOAMcCY3MAcAwworhNDjKHAn1tv5yXea5V2KRYiqTY91OSPgQcRCpRAinw+BopGCkl0hkBHGJ7Zg6SB1bq2/YFku4m1b18RNK+tltT/9JVnreHd9ycRnoxzd+71YA9bFeaBS4ab/vACu2LCs8XA13r+HwWFbevc/zF61Pa/72y47/XQn83kUrRnF3WLuB821cu0ZiWIZefX7f8fATVvyPlBFxj+0c1tgkhhBBCCKHTiJnUTNJ2krYpNPWhuW7l60Bphq8nKVh8Nd9b+blWHGYS8F2ag9RJpKRMxYQ9PYBnJa1OhWWZhfFunWfxfg5MJc3Atcbgwt9JtTZsR6OBYoKltkjytCyfT/HzhfR5lO4hPYo0C7q8xgPn0zyDXTIK+HqeUUfSRyRt3EJf1b4jDwDfzP10kdQztw0q9SlpfUlblndY1NCQkrHEIx7x6PyPEEIIYVUUM6nNugOXKGVffRf4X9LSX4DhwD2SnrW9T156+hgwj+Z7SevxMGnms1SEchJp6WUxSD0DeJQUIM9myeCp6HuS9iHNsM0F7qmwTbe8xLPkXtulMjRrSnqU9EPFkQCSvkDKzHtmtROQtBnw+2VY8lvJScBvJc0ifRfHkZIYLbM8u9jaz+dO4M+SDgZOzOO6StIppKXfX1ueMeVxGfhlhfbR+b7RSUopdRcAR5M+12qqfUe+CwyXdGze/5u2J0k6HRitVOLoHeDbNP8AE0IIIYQQQqcix0+xHziS5pOC0Rc7eiyh82lsbPTUqVNb3jCEEEIIIYTlIKkpJzxdQiz3DSGEEEIIIYTQaUSQ+gFku1dHzaJKOlSSJfUutPWSNCc/b5Q0rHoPdR/nXEn7tmL76aV7YiV1lfSGpKML7zdJ2r0NxnW2pKGt3GeIpEuX99jLevwQQgghhBBWpLgnNaxoR5ISER3B0plusT2V5nt2l1mt+2qrKNWxnQHsCjyZX18naR3SvcMzl3dcrSVphf8bbWqCdHtsCKGzizt2QgghrIpiJjWsMDmD7Z7AsTRnzy3fZqCku0rbS7pa0mxJsyQdltv3kzRJ0jRJI0uZccv6GSFpUH4+X9I5efvZxVncgodJQSn57xWkDM8A/YBpthfn7Li35/E8ImmXfIyzJV0laaykebl+bWksp0l6UtL9wHaF9q0l3ZtnaceXxpXHfpGkMcDPy87rIEmP5pnf+3MG42U6fgghhBBCCJ1RBKlhRTqElGH4r8B/6lg+ewbwqu2dbe8CPChpQ+B0YF/bu5NmXb9fx7FfzNtfTqqjWq40k0r+Ow5YJKlHfl3KEnwOMD2P58fAtYU+egOfJQW1Z0laXVIDKSDfDfgi0Lew/XDgRNsNeUyXFd7bNp/jD8rGOQH4L9u7kWqvnrocx3+fpOMlTZU0NSU0DiGEEEIIoWPEct+wIh0J/Do/vym/nlZj+30pzLjaflnSgcAOwMO5ZMsa1Ffn9db8t4kUrC3B9nxJa0j6MCnYexKYAnyCFKRekjcdAByW93lQ0gaS1s3v3W17ESm4fR7YBNgLuM32mwCS7sh/u+d+R6p5be2ahSGNtF2pDM1HgZslbZrP/enCe3Ufv8L5DycFzUiNsYAwhBBCCCF0mAhSwwohaQPgU8BOkgx0ASzp1Fq7AeUBk4D7bB/ZyiEsyn8XU/17PwkYBDxr25IeIS1P7gc8Ujh+udIYFxXaisepFPStBrxiu0+F9wDeqNJ+CXCR7TskDWTJ+3pbc/wQQgghhBA6pVjuG1aUQcC1trfM2YU3J80CDqixz2jgO6UXkj5EChb3lPTx3La2pG3baIwPAyfTPDM7S2lY9QAAIABJREFUCfgq8JztV3LbOOCofOyBpGXEr9XocxxwqKRueenwQQB5n6clHZ77kqRd6xjjusC/8vNj6ti+4vFraWhIyVjiEY94dP5HCCGEsCqKIDWsKEcCt5W13QJ8ucY+PwE+JGmOpJnAPrZfAIYAN0qaRQpaKyVCWhYPk7L4TgKw/SxpxndiYZuzgcZ87AtoIVC0PQ24mZQ1+BZgfOHto4Bj87k9BhxcxxjPJi0RHg+0WEaoheOHEEIIIYTQ6cjxU2wIoaCxsdFTpy53FaAQQgghhBBqktRku7G8PWZSQwghhBBCCCF0GhGkhg8sSYslzSg8eklqlDSslf2cLWlofn6upH3baHzzc13X2ZLmSvqJpDVb3jOEEEIIIYSVV2T3DR9kCytk151Pqr26TGyfuVwjWto+tl/MJWtKZWJq3gdbIqlLlTI2NTU1gSrlMA4hdCpxt04IIYRVVcykhlAgaaCku/LzsyVdJWmspHmSTipsd5qkJyXdD2xXaB8haVB+Pl/SOZKm5dnQ3rl9I0n35fYrJf1d0oa1xmV7AXACcIik9XM24AtzUqnZkgYXxj9G0g3AbEnnSfpuYXw/LZ5HCCGEEEIInU3MpIYPsm6SZuTnT9s+tMI2vYF9gB7Ak5IuB3YBjgB2I/0bmgY0VTnGi7Z3l/QtYCjwDeAs4EHb50vaHzi+nsHafk3S08A2wEeBPsCuwIbAFEnj8qb9gJ1sPy2pF3Ar8BtJq+Vx9yvvW9LxzePYop7hhBBCCCGE0C4iSA0fZJWW+5a72/YiYJGk54FNgL2A22y/CSDpjhr735r/NgFfzM8HAIcC2L5X0sutGHNpIe4A4Ma8nPffkh4C+gKvAZNtP537ny/pJUm75bFPt/1Seae2S0uJkRpjEWEIIYQQQugwEaSGUNuiwvPFNP+bqTeQK+1f3HeZ7viU1APoBfy1hT7eKHv9e1Jt2Q8DVy3LsUMIIYQQQlhR4p7UEFpvHHCopG45cDyolftPAL4EIGk/4EMt7ZATJ10G3G775TyGwZK6SNoI2BuYXGX324D9STOto1o6VkNDSsgSj3jEo3M/QgghhFVVzKSG0Eq2p0m6GZgB/B0Y38ouzgFuzMmOHgKeBV6vsu0YSSL9oHQbcF5uvw3YA5gJGDjV9nOl5Exl431b0hjglWXJ9htCCCGEEMKKJMfPsSGsULnW6WLb70raA7i8jntjl+d4q5GSOx1u+6mWtm9sbPTUqctchSeEEEIIIYS6SGqy3VjeHjOpIax4WwB/ysHj28Bx7XUgSTsAd5ESPbUYoIYQQgghhNDRIkgNoY1IOpRUXqZoF+Dztu8pNeRgcbca/fQC+tu+YTnGMtF2f9tzga2WtZ8QQgghhBBWtFjuG0I7ybVHjwL2sf1eK/YbCAy1fWB7ja328RsNsdw3hM4s/q87hBDCqqDact/I7htCO5C0LXAm8BXAki6UNEfS7JwwCSVLtQMXAHtJmiHpZElrSbo6bzNd0j55/yGS/iLpXklPSjqrcPwF+W93SQ9Impb3P3iFXogQQgghhBBaKZb7htDGJK0O3ECaDf0/SYcBfYBdgQ2BKZLGAf2rtP+QwkyqpB8A2N45Z+8dnYNggH7ATsCbef+7bRenQd8CDrX9mqQNgUck3eGyJRR51vf49GqLtr0gIYQQQgghtELMpIbQ9s4DHrN9U349ALjR9mLb/yaVnelbo73cAOCPALafIJW9KQWp99l+yfZC4Na8bZGAn0maBdwPfATYpPwAtofbbkzLLTZa5hMPIYQQQghhecVMaghtKN9Pehiwe7G52ub1dlvjvfI708pfH0WKOhtsvyNpPrBWnccNIYQQQghhhYuZ1BDaiKQPAVcDX7X9euGtccBgSV0kbQTsDUyu0f460KNs/6PyMbYlrcd9Mr/3GUnrS+oGHAI8XDasdYHnc4C6D7BlS+fR0JCSssQjHvHovI8QQghhVRYzqSG0nROAjYHLpSUmP88HZgEzAQOn2n5O0m3AHhXaXwLelTQTGAFcBlwhaTbwLjDE9qJ8jAmkpcAfB24oux8V4HrgTklTgRnAE21/2iGEEEIIIbSdKEETwkpK0hCg0fZ32rLfxsZGT50aJWhCCCGEEEL7ihI0IYQQQgghhBA6vQhSW0nSBrl+5QxJz0n6V37+iqS5y9HvEEmXlrWNlbTULwtl2yyo0l5xX0lfkPTD/PwQSTu0Yoy/yefb6u9N+TgrnW9nIamPpAOWYb9q17zFz3FZ2B7R1rOoAE1NIMUjHvHozI8QQghhVRZBaivlch99bPcBrgAuzs/7AO917OhaZvsO2xfkl4cAdQWpOTA9FPgHKcHPqqwP0Oogtb1JinvIQwghhBDCKi+C1LbVRdLvJD0maXTOuIqkrSXdK6lJ0nhJvVvbsaQjJc2WNEfSz8ve+5WkaZIeyFliS46WNDHv0y9vO0TSpZL6A18ALswzwVu3MIR9gDnA5cCRhWOfLemqPFs4T9JJy3BuIyQNy2OdJ2lQ4b1TJE2RNEvSObmtb369lqR18vXeSdJASeMk3SZprqQrSrO+kvaTNClfp5GSuhf6mihppqTJktYFziVl3Z0haXA+xlV5HNMlHZz37SbppjyWm4FudZxrxc+xONMsaZCkEYVrc5GkMcDPa11vSUfnc5gh6UqlrMHHSrq4sM1xki5q7WcUQgghhBDCihJBatvaBvit7R2BV0j1MgGGAyfabgCGkrK1VlIKjGZImgE0AkjaDPg58CnSLF9fSYfkfdYBptneHXgIOKvQ3zq2+wPfAq4qHsj2ROAO4JQ8M/w3SSdIOqHK2I4EbgRuAw6UtHrhvd7AZ4F+wFll79VrU2AAcCBwQT7v/UjXtF8+7wZJe9ueksf+E+AXwHW25+R++gE/AHYGtga+KGlD4HRg33ydpgLfl7QGcDPwXdu7AvsCbwBnAjfn63IzcBrwoO2+pGD9QknrAN8E3rS9C/BToKHWCbbwOdaybR77D/Lrpa63pO2BwcCeeWZ/MalszU3AFwqfyddIZXLKx3a8pKmSpsILdQwphBBCCCGE9hHLB9vW07Zn5OdNQK88Y9cfGKnmG4nWrLL/zcV7DCWNzU/7AmNtv5Dbryctub2dtMT45rzddcCthf5uBLA9TlJPSevVGrztKyq152DuAOBk269LehTYD7g7b3K37UXAIknPA5sA/6x1rNIhC89vt/0eMFfSJrltv/yYnl93JwWt40iznVOAt4Di7O1k2/PyuG8kBb5vkZY1P5w/gzWAScB2wLM56MX2a3m/8nHuRwr0hubXa5Fqle4NDMv7zpI0q4XzrfU51jLS9uLC60rX+9OkIHlKHn83Un3UNyQ9SPph4XFgdduzyw9gezjpxxSkxkj5HUIIIYQQOkwEqW1rUeH5YlKgsBrwSp7dWlatSZPhKs8rva7X/sC6wOwcAK0NvElzkFp+3pW+VwslrWH77fx6feDFwvvFPlT4e77tKyv0tz4paF2dFDS+kdsrnbOA+2wfWXxD0i4Vtq9EwGG2nyzbv9LxWuqnmmI/a5W990bZ60rXW8A1tn9Uoe/fAz8m1Uhdaha1XEMDRAWaEEIIIYTQUWK5bzvLs3NPSzocQMmurezmUeCTkjaU1IW09Pah/N5qQOkezi8DEwr7Dc7HHAC8avvVsn5fB3rUcfwjgW/Y7mW7F/AxYD9Ja7fiHB4Cjs7j6QZ8CRjTwj6jgK8X7h/9iKSN83vDgTOA60lLaEv6SfpYvhd1MOl6PALsKenjuZ+1JW1LCto2k9Q3t/dQSk5Ufl1GAScqR6WSdsvt40hLapG0E7BLC+dT63P8t6Tt1ZygqrUeAAaVro+k9SVtCWD7UWBz0vfjxmXoO4QQQgghhBUmZlJXjKOAyyWdTpr5uwmYWe/Otp+V9CNSUCfgf2z/Jb/9BrCjpCbgVXJgmr0saSLQE/h6ha5vAn6Xk+8MAj6Tj/f+st8ciH4W+O/CeN6QNAE4qN5zAL4LXJmPJeBa2+Nq7WB7dL7XclKODxeQkkHtD7xr+4Yc7E2U9CnS0udJpHtadyYFkbfZfk/SEOBGSaWl1qfb/qukwcAlOXBeSLovdQzww3xf8PnAecCvgVk5UJ1Punf2cuDqvMx3BjC5yql0BRa18Dn+ELiLlD15DmmWuG625+bv1+gc6L4DfBv4e97kT0Af2y+3pt8QQgghhBBWNNlx+1lYNUgaCAy1fWBHj6UkB8X/C+xUYSZ7RY7jLlK5pAda2raxsdFTY71vCCGEEEJoZ5KabDeWt8dy3xDaiaRG0gzrZR0VoEpaT9JfgYX1BKghhBBCCCF0tFjuG1Y6kjYg3YMJ8GFS8qAXgF7AM8vR7xDgQlJm4u7APOCcXK6nNf2cDSyw/Utg+5a2kbQWcCcwwfY5Nfo9Fxhn+/46j43tV4Btc7D6LdvVyh+9r6kJlk5wHELoSLHoKYQQwgdJzKSGlY7tl3IN0z7AFaRlrH1ItUffW87ub7a9m+1tSPe23prvi61LTrxUt1ze5xagqVaACmD7zFoBagvWI9XLDSGEEEIIoVOLIDWsarpI+p2kxySNzgmRkLS1pHslNUkaL6l3Sx3ZHkPKInx87uM4SVMkzZR0Sym7saQRki6SNIYlMw2X9rmnNI4yXUnJq56y/cO8fS9Jj1c5hxGSBuXnB0h6QtIEScPyPaclO0gaK2leTlQFKeDeWtIMSRfWfTVDCCGEEEJYwSJIDauabYDf2t4ReAU4LLcPB0603QAMBVpc9ppNA0oB7a22+9reFXgcOLaw3bbAvrZ/UGqQ9B1SBuRDbC+s0PeppCzF36vzHEr9rgVcCXzO9gBgo7L9e5MyMvcDzpK0Oil78N/yDPQp5QORdLykqZKmppXTIYQQQgghdIy4JzWsap62PSM/bwJ65Tqr/YGRar7Zcs1KO1dQvDtzJ0k/IS2d7U6qn1oy0vbiwuuvkO5tPcT2O1X6ngDsIWlb23+tdQ5l+/UG5tl+Or++kTzbm91texGwSNLzwCY1zxCwPZwUyCM1xt1vIYQQQgihw0SQGlY1iwrPFwPdSCsGXvn/7J15mFXVsbffn+CAYvCqJI4RxSk4od2oIBqMQ24SozgFFXODs4lDNFGvSYwSzaDRGxJxRK+ihigRHNBEBhUERIZuZhDjZzA3xgmNqChOWN8fqza9+3BOn9NNQzdQ7/Psp/daew211t4+UqdqVfm51cayL8lqCjCYpHTO8iBLvXLtPijoN5d0RnY7YCHFGQ/cAzwh6WAzy4I+FVtDnnJhjQr7N+q/86oqiAw0QRAEQRAEQUsR7r7BWo+ZvQcslHQigBL7lOsn6askC+UdXrUp8Jq7z/Yt030GcA4wQtI2Dcg2nBRReKSkzcouJrEA2ElSJy/3qaDP+yT5gyAIgiAIgqBVE0pqsK7QFzhD0ixgHnBMiXZ9PLjQ34CfAsebWWZJ/TkwBRhDUhQbxMwmks6//kXSlg20uw14CBgBbFTBuEtJkXpHSpoIvAE0mIfVzN4GnpU0NwInBUEQBEEQBK0ZWSRfC4I1DkntzWyJ0iHbm0kRggc0x9jV1dVWE/6+QRAEQRAEwSpGUq2ZVRfWhyU1CNZMzpI0k2QV7kCK9hsEQRAEQRAEazwROClYJ5C0BfCUF7ciBRRaRIqc+6qZdWniuP2AajM7v6D+r8ApZra4qTL7OP2BJWZ2g6eeeQyYaGa/kHRiE4NBNUhtLahcaKYgCFY54egUBEEQrKuEkhqsE/iZzK6wguLXCXh8Fcz3zeYcT9IGwHCg1sx+4XP0aM45giAIgiAIgqA1EO6+QQBtJN0haZ6k0ZLaAUjqLGmkpFpJEyTtXumAkl7OgiVJ+pEHLJor6SKv6yTp+WLzFqEt8ADp3OnluTmW+N9eksZJGiZpgaQhflYVSd/0uomSbpTU7Ap5EARBEARBEDQnoaQGAewC3GxmewCLgeO9fhBwgZlVkaL03tLYgSVVAacBBwAHks6S7ltm3kIuAz4zs4samGpf4CKgC7ATcJC7B98OfMPMegIdG5DzbEk1kmqSF3QQBEEQBEEQtAyhpAYBLDSzmX5fC3SS1B7oATzoAYpuB7Zuwtg9gYfN7AMzW0JKNXNwqXlLjDER6C5p1wbmmWpmr5jZ58BMH2t34O9mttDb3F+qs5kNMrPqFF2tpC4bBEEQBEEQBKucOJMaBPBx7n4Z0I70A87iZghM1FAIomLzFmM8cA/whKSDzezVCsZqW2buklRVQWSgCYIgCIIgCFqKsKQGQRHM7D1goaQTAZTYpwlDjQd6S9pY0ibAscCEJsgzHLgeGClpswq7LQB28uBQAH0aO28QBEEQBEEQrG5CSQ2C0vQFzpA0i5SP9JgS7fpJeiV3bZc9MLPpwGBgKjAFuNPMZjRFGDO7jeQuPMLPm5ZrvxT4AUmxnQi8AbzblLmDIAiCIAiCYHUhi0RsQbDWIqm9mS3xaL83kyIED2ioT3V1tdWEv28QBEEQBEGwipFUm2Ki1CcsqUGwdnOWB36aB3QgBYAKgiAIgiAIglZLKKnBGoekZZJmen7RWZ6HtFm/ZUlXSzq8Cf16lcpFms+dWuFY4yT9X5bz1OseyfKjVsjtwL9I/613Ba4s16G2FqS44oqrJa4gCIIgCCK6b7BmsjSLuivpi8CfSFbCq5prAjMrq8ytJhYDBwETPWBSU9Lg3GBmYyVtADwl6Rtm9kSzShkEQRAEQRAEzURYUoM1GjN7EzgbON8j8LaRdL2kaZJmSzoHQNLWksa7BXaupIO9fomk/5E0XdJTkjp6/WBJJ/h9N0mT3Go7VdKmkjpJmuD9pkvqkRPrC5IeljRf0m3FrLySTvWxZkq6XVKbEkt8ADjJ748jBU7Kj3Npbq2/KLI/H5rZWL//BJgObFfYLgiCIAiCIAhaC6GkBms8ZvZ30rf8ReAM4F0z6wZ0I53J3BE4BRjlFth9gJnefRNgupntBzxDgTXWrY9DgR+a2T7A4cBS4E3gCO/XB7gx121/4MfAXkBnknKZH/Mr3ucgl2cZKZJwMZ4CDnEl9iSXJRvnSGAXn68rUCXpkFL75JbYb/uYhc/OllQjqQYWlRoiCIIgCIIgCFY54e4brC1kp7mOBPbOrKAkN+BdgGnAXZLWBx4xs0xJ/Zw6xe+PFFgqgd2A18xsGizPn4rnPL1JUqZk7prrM9UVZyTdD/QEhuWeHwZUAdP8uGk7ktJbjGXARJJS287MXs4dUT3SryylTXtf6/gVNkdqC9wP3JjJlsfMBgGDUtvqCPkdBEEQBEEQtBihpAZrPJJ2Iilzb5KU1QvMbFSRdocA3wLuk3S9md1bZLhCBU1F6gAuJuUd3Ydkxf2ogTGKjXmPmf2k+IpW4AHgYaB/kXF+Y2aVROwdREo/8/tyDauqIDLQBEEQBEEQBC1FuPsGazR+hvQ24CZLSX9HAd93iymSdpW0iaQdgDfN7A7gf4H9fIj1gMzqegrJaplnAbCNpG4+3qZulexAsrB+DnwXyJ8p3V/Sjn4WtU+RMZ8CTvCgT0ja3OUrxQTgNyRLaJ5RwOmS2vs422ZjFuzRL13eixqYIwiCIAiCIAhaBWFJDdZE2nnuz/WBz4D7gN/5szuBTsB0T92yCOgN9AIulfQpsAT4L2//AbCHpFrgXZJSuRwz+0RSH2CgpHak86iHA7cAwyWdCIz1cTKeA64lnUkdT7KC5secL+kKYLQrsp8C5wH/KLZYV75vKFI/2s+3PucuwEuAU8m5DkvaDvgZSdme7u1uMrM7i80VBEEQBEEQBC2N0r9/g2DdRNISM2vf0nK0Jqqrq60m/H2DIAiCIAiCVYykWjOrLqwPd98gKIOkkyXtWr5lEARBEARBEAQry1qnpEpaUlDuJ+mm1TBvJ0lLPe9lyfyYBe1PyZW7SvrmqpazHIX753WbSfpBrtxL0uMrMcduksb5Xj0vaVBTx1pZyllRJe1GCrZ09aqUQ9KBkqbk9qS/1/cqyMG6yqmtBSmuuOJqiSsIgiAIgjiTugKS2prZZ6XKZXjJzLp6YJ2nSWchC1OaZHQiBer5k5e7AtXAX5sq6ypkM+AHpHOYzcGNwAAzexRA0l6VdlzZNVfaP9duJ9J50f0kfcnM3nAF8kDSeVhI/x1N9vsV6s2sfwWi3QN8x8xmeU7U3by+F+ms6aQKxgiCIAiCIAiCNZ51SkmV9G3gCmAD4G2gb07p2IakOL4laTTJerYRsImkfwHDckrVEGComY0oNo+ZfSZpErCzB+/5LfANUiqSX5rZUFJgna94AKD7SYpQO0k9SZFcHwcGkoLvtAX6m9mjkvrlZQO+VrDGR4Dt/fkfPP8lbiH9A3AUKfjPMb72HUmKcltgZImtuxbo7LKOAf4CtJc0DNgTqAVONTOTVEUKYtQeeAvoZ2avFYy3NfBKbr/muIwbAbeSlPXPgB+Z2dhia5Z0GSmq7ufAE2Z2uaTOwM1AR+BD4CwzWyBpMPBvYF9S8KArK9lbSUcDlwD/QQrSdAXwqIt9kpktdrk3oy5y7gr1nlP1z8B2pCjA1/g3kOeLwGu+H8uA+ZI6AecCyySdClwA/B9wl69xEXCamf2fr/E937utgMvMbJjLcSnwHWBD4GEzu6pgbiSdDZydSl8ufBwEQRAEQRAEq421UUnNIr9mbA5kyuRE4EBXps4ELgN+7M+qgJ5mttSVle7A3mb2b0lfJeXFfFRSB6AH8L1SAkjaGDgMuBI4jmQl3QfYEpgmaTxwOXCJmR3lfd4Aqs3sfC//GnjazE53ZWeqpCd9iuWyFZn+dJe5nc813MzeJil3k83sZ5J+C5wF/JKkuN5qZvdKOq/Eki4H9jSzri5bL5LCtwfwKvAscJCkKSTl7xgzW+RRcX8FnF4w3gDgaVfkRwN3u2J3HoCZ7SVpd1L02+wsaP59fINkpT7AzD6UtLm3GQSca2YvSjqAZPnNlPhdgcPNbFmle+sW8WPN7D1JWwKTJRX9YaIM/wm8ambf8v3rUKTNAOAFSeNIPxbcY2YvS7oNWGJmN3jfx4B7zeweSaeTrNK9fYytgZ7A7qRvfpikI4FdgP0BASMkHWJm4/OT+48Z/oNGdURTC4IgCIIgCFqMtVFJXZopUwCucGYRo7YDhkrammRNXZjrN8LMlubKYzIl0MyekXSzUg7K44DhJVxGM2ujAY+a2ROSBgD3u3XsDUnPAN1IVq+GOBI4WtIlXt6IOhPXmBIKKsCFko71++1JCsrbwCck6ywky+cRfn8QcLzf3wdcV0aujKlm9gqAr7kTsJhkWR2TDMi0wa2DeczsbkmjSMrbMcA5kvYhKVgDvc0CSf8gKZeFaz6cpNh+6G3/rZQrtAfwoOoOdm2Ym/ZBfwdQ+d4K+LWkQ0gW222BL1W4P3nmADdIug543MwmFDYws6vdQn8kyQ38ZJKrbyHdSd8gpPf129yzRzxv63xJmZxH+jXDy+1J30Q9JTUIgiAIgiAIWgtro5LaEAOB35nZCLcG9s89+6CgbWH5PqAvcBIrWgYzXsoryE5TQ2EION7MXqhXmSyEhbJlz3qRFLjubmEcR1LAAD61unxDy6j/7ptiOfs4d5+NJ2CemXUv19nMXiW5rd4laS5JuW1or/JrFivKvB6wuMj+l+pfyd72JbnVVpnZp5Jepm4/K8bM/uZu0N8EfiNptJmtEIjJzF4CbpV0B7BI0haVDJ+7z78T5f7+xsxur1TeqiqIDDRBEARBEARBS7HWRfctQwfgX35f0l23BIPxc4dmNq8R/cYDfSS1kdQROASYCrwPbJprV1geBVzgZ1qRtG8Fc3UA3nEFdXdSEJ9yPEtSvCEpZcUolK0ULwAdJXUHkLS+pD0KG0n6T0nr+/1WwBak9zI+k8HdfL/sYxYyGjjd3aqRtLmZvQcslHSi18mts8WodG87AG+6gnoosEPZHSiCpG2AD83sj8ANwH5F2nwrk4dk6VxGskwX7v0k6r+viWWmH0Xaq/Y+z7buERAEQRAEQRAErZJ1TUntT3IHnUAK6lMxZvYG8DxwdyPnfBiYDcwiRfy9zMxe97rPJM2SdDEwFuiilIKkD3ANKVjPbLc0XlPBXCOBtpJme/vJZdoD/BA4T9I0klK2An6m9VlJcyVdX2ogM/sEOAG4TtIsYCbJBbeQI4G53mYUcKnvyS1AG0lzgKGkoEsfF3Y2s5GkM5c17mqcue32Bc7wceeRXImLUeneDgGqJdX42AtKrb0Me5HOvc4EfkY6C1zId0lnUmfiVnt3T34MONa/i4OBC4HT/B1/l/T+SmJmo0mBsZ7zfR1GZT84BEEQBEEQBEGLoDoP0KAh3Go3B9jPzN5taXmClkMpGvTvS0T3XaG+whQ0rYbq6mqrCX/fIAiCIAiCYBUjqdbMqgvr1zVLapOQdDjJijZwVSqoSmliVjuSrvY1IulOSV0aaLuZpLdzrrLdJZmk7bzcQdK/JZX8tiT1zwUtahEkdZX0zSb2eRO4V9ICt8Te63VZ/SNKqYCy+lLjjZO0wn+UK8uqGjcIgiAIgiAIVgfrWuCkJmFmT7IWJ480sytz92eWabtY0uvAV4D5JHfeGf73z6RzsFM8ymxrpisp6vNfG9vH0wTd4hbV5elhnFuaT8SWobYW1NRwX0EQNIlwagqCIAiCOsKS2sqQ1EvS47nyTUppdJD0sqRfS3pOUo2k/SSNkvSSpHO9TXtJT0maLmmOpGO8vpOk5yXdIWmepNFKuVSRNFjSCX5fiRXuWerOmvYg5fjMlyf5WJ0ljZRUK2mCB3MqXO/Okp70s7nTvY8kXe9nYOf4Gd1sb56R9GdJf5N0raS+kqZ6u87erqOk4ZKm+XVQwZwbAFeTAlrNlNRH0uZuAZ0tabKkvcv18UddfM/+LunCXPtTXa6Zkm6X1KahDc1b0SWdIGmw3w+WdKOkST5H9p7Wk3SLv8vHJf01e1Yw7pH+vUyX9KA8gFIQBEEQBEEQtFZCSV3OjhDNAAAgAElEQVTz+KeneJlAijh8Asl6maU0+Qg41sz2Aw4F/idzzSVFjb3ZzPYgRY49ngZw199iCusk6pTSnYAHqctF24OkxAIMAi4wsypScKNiVsYhLtM+3vc1Uh7QrsA+pJQ61yvltsXrfkgKRvRdYFcz2x+4E7jA2/wBGGBm3XyNd+Yn9ABPVwJDzayrmQ0FfgHMMLO9gZ+SXHXL9QHYHfg6sD9wlVJE468AfYCDPCXOMkpHTq6ErUk5ZI8CrvW640i5afcCziTlT62HpC2BK4DD/XuoAX5UbAJJZ/sPHzWwaCVEDYIgCIIgCIKVI9x91zxG+N85QHszex94X9JHSoF6PgB+LekQ4HNgW+BL3mehmc30+1qSklOSBlx/nwUul7Qj8LKZfeTWz/ZAFSmSbXuS0vlgnY7MhvlBJG0KbGtmD/t8H3l9T+B+j277hqRngG7Ae8A0M3vN271ESkeT7cehfn84ycKZTfUFSZv6XpWiJ660m9nTkraQ1KGCM8h/8QjEH0t6k7TXh/k+THMZ2tHA2dQKeMTdp+dLyt5lT+BBr39d0tgi/Q4EupAiMwNsADxXbAIzG0T6UQGpOhwPgyAIgiAIghYjlNTWx2fUt3BvVPA8S8nyee4+K7clWew6AlWe3/Pl3Bj59stIylOjMbMXJf0H8G3qlJ5a4DSSIrxE0heAxW5JLEWpk48NnYgsXHN+P7LveT2gu5ktbWCcSuasRFkr3NO2PtY9ZvaTRsyfn6vUO4c6OSs5NSpgjJmd3Ag5giAIgiAIgqBFCXff1sc/SFbADSV1IFnlGkMH4E1XUA8Fdmh2CRPPkdxun8uVL8LPo5rZe8BCSScCuKV1n/wA3uYVSb29zYZKqX7Gk85+tpHUETgEmNoI2UYD52cFScUU5fepny90PO6SK6kX8JbL11CfUjwFnCDpiz7e5pLKvYc3JH1FKSrysRXMMRE43s+mfgnoVaTNZOAgSTu7HBtL2rXcwFVVKYhLXHHFtfquIAiCIAjqCCW1lSCpLfCxmf2TFCV3Num85oxGDjUEqE5nC+lLSp1TCSv8M6mBM6mQXH63J51zhKSk7oQrqU5f4AxJs4B5wDFFxvkucKGk2d53K+Bh0vpnAU8Dl5nZ6xWuA+BC0h7MljQfOLdIm7GkHwOyIEj9sz6kc5/fq6BPUcxsPuks6GgfbwzpXGkhbamzkl4OPE5a72sVrHE48AowF7gdmALUc002s0VAP+B+l2My6QxtEARBEARBELRaZPETbqvArYx3eBCg1T33Y8DvzGzs6p57XUXShsD/A/Zsau5dSe3dtXoLkqX5oEYq80Wprq62mpqa8g2DIAiCIAiCYCWQVGtmKxjFwpLaClBKH3M/yfq2uue+C9iY5D4aNBFJW0s6u8K21cBM4JamKqjO45JmkiI9X9McCmoQBEEQBEEQtDStWkmVtMxdK+d6jseNvX5Sub5Fxvpp80tYb/yOkqZImiHp4IJnF2Wye3lJ/rmZ3WZmXcxsNBUgaX9J4yW9IGmBu+VuXL7n8v7bSBrmxfHA82b2aUGbTpLmVjrmqsD39FNJ5xTUF32Xkn4o6fe58u2SnsyVL5B0YyNleNlTuRTW95d0Sa6qP3Bg4bsvhpnVmNlXzOw3jZSlk6Sl/t/ETGAzkgW8i5kNrnCMJeVbBUEQBEEQBEHL0dqj+y7NosNKGkI6W/g7M+tR2FBSG09ZUoqfAr9eNWICKcDRAjMrdpbxIuCPwIcrO4kHyXkQOMnMnlPKLXI8KaBP2fEltTWzV0n5VVs7J5LOUZ5MOneZUepdTqJ+PtKuwHq5b6MH8EglE/u+VhJBF/+B4HFgJCnicVb/d2B+rmkXM9upVH0lcwEvlYmYvNLU1oIqWnkQBM1BnLoJgiAIgvq0aktqAROALErpEv/bS9JYSX8i5clE0iOSaiXNy9wvJV0LtHML1BCvO1XSVK+73SPJtpE02C23cyRdXCiEpB0kPeVBeZ6S9GWPHvtb4Js+Xrtc+wuBbYCxyuWylPQrSbMkTXbFM7McDpc0za+DiuzDeaT0Js8BWGKYmb3hFtZJbs2dJGk3H7efW6IfIwXzKbSSbi9ppFtmr8rVt5V0j691WM6SXSXpGd/nUZK29vqzXO5Zvo6s/WBJN7pMf5dUqYJ8MvBjYDtJ25Z6lzlmALtKaqcUGflDklvtXv68Bx7YSdKP/D3PlXSR13WS9LykW4DppMBQy5H0M9+jJ4Hdco/6AleSgkj1zVm1R5jZUdlFXY7bovWSTnR5ZkkaX+EeZbItKfFN7SjpOX8v1zRmzCAIgiAIgiBoCdYIJVUp8u03cEW0gP2Bn5lZFy+fbmZVQDUpauwWZnY5bpU1s76SvgL0IQWa6UrKb9mXZHnb1sz2NLO9gLuLzHcTcK+Z7U2KpHujmc0kKSlDfY7l+TnN7EbgVeBQMzvUqzcBJpvZPiR327O8/g/AADPrRrKO3llk/j1JOUmLsQA4xMz2dXny1sbuwPfM7GtF+u2fW/+JqovouxswyNf6HvADSesDA4ETfJ/vAn7l7R8ys26+rueBM3JzbA30BI4iRc8FwN1WV0DS9sBWZjaVFO24D0Dhu8z3MbPPSEppN+BAUsTbyUAPSduQAoX9U1IVKafrAd7uLEn75tZ8r5nta2b/yMlTBZwE7Asc53NkNLTuxnAl8HUf5+gSbTq7gp5dmXtxQ9/Urf5NlTyzKulsSTWSamBRE8UPgiAIgiAIgpWntbv7tsspMROA/y3SZqqZLcyVL5SU5ZncHtgFeLugz2FAFTBNya+xHfAm8Biwk6SBwF9I+TYL6U5SUgDuI1lQG8snJPdQSArnEX5/OCnFSdbuC5I2NbP3Kxy3A3CPpF1IKWXWzz0bY2b/LtFvjJm9DSDpIZIy+QjwTzN71tv8kZTaZSRJUR7jcrahLmXKnpJ+STor2R4YlZvjETP7HJifWfkAGnBdPYmknAI8QHr3v2tg7RnPkiym7UhpcV4kuQcvoi49Tk/gYTP7ILfmg0kWzX+Y2eQi4x7sfT70PiNyzxpad2N4Fhgs6c/AQyXalHL3LfVNHUT6wQPS93pdsUHNbBAwCECqDufDIAiCIAiCoMVo7Urq0gaUmIwPshtJvUiKXncz+1DSOGCjIn1Ecpn9yQoPUiqYr5Pcar8DnF5m/qb8g/5Tq8v9s4y697Cey760eDcg5RutAh4t8uwaYKyZHSupEzAu9+yDIu0zCtdgDdQLmGdm3YuMMxjobWazJPUDeuWefZy7r+TE48nAlyRl1tJtJO1iZi+W6TcJOIf03m8mKadd/G+mcDc0f2P2KWMwpdddMWZ2rqQDgG8BMyV1zX48qIBS3xQ07RsNgiAIgiAIghZhjXD3bQQdgHdcQd2d5MqZ8am7qgI8BZwg6YsAkjZXOmu6JbCemQ0Hfg7sV2SOSSQrHyQX2UpSt7xPCmxUjtHA+VlB6axrITcB33NlJmt3qqStSOv/l1f3q2C+jCN8D9oBvalT5r4sKVNGTyat9QWgY1YvaX1Je3ibTYHXfJ/rueI2Bj9Lu4mZbWtmncysE/Ab6vY9/y4LmUR67x3N7E1X3BYBx1BnSR0P9Ja0saRNgGNJlvqGGA8c6+ddNyUXIInmW3dnM5tiZlcCb1FwJraJPEv977UsVVUpkEtcccW1eq4gCIIgCOqztimpI0nBfmaTrIp5t81BwGxJQ8xsPikn6WhvO4Z0ZnJbYJy7GA8GVrC0klxeT/N+3wV+WIFcg4AnlAucVIILgWoPVDSfFM24Hmb2BknpuMGD+DxPckV9j+R6/BtJz5LccCtlIskVdCYw3MxqvP55kkI8G9icdLbxE1Jk4OskzfI+WbTln5POgY4hnY8tS4kzqScDDxfUDfd6yL3Lwo5m9g5JKZ2Xq34O+CIwy9tMJ73fqS7vnWY2oyE5vc9QfI+or9Q2et0luF4pYNdcklI8q0ibwjOpF5YZ84fAeZKmkX7ECIIgCIIgCIJWjSx+xg2CVYKk35vZRYXlUvUtI+WKVFdXW01NTfmGQRAEQRAEQbASSKo1s+rC+tZ+JjUI1mSqJeXzsm5Zpj4IgiAIgiAI1nlCSQ3WSCRtQTpbDLAVKVjQIqAT8GouJVFjx+0HVJvZ+eXalsPMehaOW1jfgBy9SMGxFpLc8t8ETjGzNxsrh6T+wBIzu6GxfYMgCIIgCIJgdRNKarBG4lFvu0J9JcyjGj9euucaxQQzOwpA0m9IEaevWtWT1taCKom/HARBsxCnboIgCIKgPmtb4KQgAGgj6Q5J8ySN9qjFSOosaaSkWkkTPAJ0SSQNlnRCrrzE//aSNE7SMEkLJA2RJ42V9E2vmyjpRkkrKMySOkoaLmmaXweVkUOkCMLveHlzSY94gK3JkvZuqL5grLMkPZHtSRAEQRAEQRC0NkJJDdZGdgFuNrM9gMXA8V4/CLjAzKqAS4BbVmKOfYGLSDlYdwIOkrQRcDvwDXfp7Vii7x+AAWbWzWW7s0S7gz368f+R8v/e5fW/AGaY2d7AT4F7y9QDIOl8Uuqc3oW5eCWdLalGUk3ymg6CIAiCIAiCliHcfYO1kYVmlqW2qQU6SWpPSpXzoOp8WTdciTmmmtkrsDyNTidgCfB3M1vobe4Hzi7S93CgS06OL0ja1MzeL2iXd/f9b1KKoXOBnrjibWZPS9pCUocG6iGlS3qFpKB+WiiQmQ0iKfFI1eF8GARBEARBELQYoaQGayMf5+6XAe1IXgOLzaxrI8b5zPtlLrcbNDBHW6DSk5zrAd0LrZllGEHKz0qJeayBeoC5pDO825GCMQVBEARBEARBqyTcfYN1AjN7D1go6URISqekfcp0exmo8vtjgPXLtF8A7OTBmwD6lGg3GlgePVhSJYpzT+Alvx8P9PW+vYC3fH2l6gFmAOcAIyRt09BEVVUpkEtcccW1eq4gCIIgCOoTltRgXaIvcKukK0gK5wPArII2bamzkt4BPCppKindzQcNDW5mSyX9ABgp6S1gaommFwI3S5rt840nufEWkp1JFfAucKbX9wfu9v4fAt8rU5/JN1HSJcBfJB1hZm81tJ4gCIIgCIIgaAlk8TNuECxH0gDgRTNrUlAlSe3NbIm7B9/sYw1oViFXMdXV1VZTU9PSYgRBEARBEARrOZJqzay6sD7cfYPAkfQEsDcwZCWGOcutn/OADqRov0EQBEEQBEEQVEirU1KzXJS5cj9JN62GeTtJWipppqT5km6TVHJ/vP0puXJXSd9c1XKWo3D/vG4zd0PNyr2K5e9sxBz9Jf3L9+pFSQ9J6rIS4/XO9/ccpCv8otJYuYt9O6XGBjCzb5jZYSQX32pv/7KkLSud08wGmFlXM+tiZn3N7MNK+/p8vSS9K2mGpOclXdXI/vXedZHnK3wfQRAEQRAEQdCaaHVK6soiqW1D5TK85NFf9yblv+zdQNtOwCm5clegUUpqI2VbGTYDSiouTSRTxnYBhgJPSyqVF7QcvUn7HSQmmNm+QDVwqqSqch0AJLWhGd51bS1IccUV1+q6giAIgiCozxqlpEr6tqQpbmV6UtKXvL6/pEGSRgP3ugXtQUmPAaMl3SfpmNw4QyQdXWoeM/sMmATs7FFgr5c0V9IcSVnE1mvxwDaew/JqoI+X+0jaRNJdkqa5vMf43PVkK7LGRyTVSpon6exc/RJJv5I0S9Lk3Np3lPScz3NNiSVdC3R22a73uvaShkla4PshH69K0jMuwyhJW5d7L2Y21NdySkNjSDrL5ZwlabikjSX1AI4Grnf5OvuwJ0qaKulvkg4u2KP13ILbMVf+f42xeHq/WyXV+F7/ooL2P/LvYK6ki7zuMkkX+v0ASU/7/WGS/iipjaTBue/n4krlM7MPSHleO0vqJGmCpOl+9fB5ekkaK+lPwByKv+sgCIIgCIIgWGNojdF92ymd6cvYnJQjEmAicKCZmaQzgcuAH/uzKqCnR1jtB3QH9jazf0v6KnAxyY2zA9CDgsineSRtDBwGXAkcR7KS7gNsCUyTNB64HLjEzI7yPm8A1WZ2vpd/DTxtZqdL2gyYKulJn2K5bEWmP91lbudzDTezt4FNgMlm9jNJvwXOAn4J/AG41czulXReiSVdDuyZ5QhVSk+yL7AH8CrwLHCQpCnAQOAYM1vkCvmvgNNL7VWO6cDuktZvYIyHzOwOl+GXwBlmNlDSCOBxMxvmzwDamtn+Si7UVwGHZxOZ2eeS/kiK1vt7fzarRLTaPpJ65so75+5/5nvdBnhK0t5mNrvY4pSsmacBBwACpkh6hhSZ98fAjSTL54a+Bz2BCaRvZ1sz29PH2cz/nutrua3UhkraAjgQuAZ4EzjCzD6StAtwv88HsD/p/S6U1Incu64U/0HEfxT5cmO6BkEQBEEQBEGz0hqV1KX5f2C7wpn9Y3w7YKhb5jYAFub6jTCzpbnymEwJNLNnJN0s6YskpXO4W0sL6ewKsgGPmtkTStFe7zezZcAbrph0A94r0j/PkcDRSik/ADai7l//Y0ooqAAXSjrW77cHdgHeBj4BsvOYtcARfn8QcLzf3wdcV0aujKlm9gqAr7kTsBjYExjjimIb4LUKx8uc1nZrYIw9XTndDGgPjGpgvIf8b63LVshdwKMkJfV04O4S4wzNfjgAkDQu9+w7rpy1BbYmuRwXVVJJSufDbt1E0kPAwcCtQJWkTUmpa6aTvteDSalmXiPlTh0I/AW3njeknJIs9DOAz4FrzWye/7hyk1JO1WXArrn2U81sYbGBKsXMBgGD0tqqI+R3EARBEARB0GK0RiW1IQYCvzOzEW4N7J97VpjDsrB8H8nydhKlLYMvFbFANfXEkIDjzeyFepXSAUVky571IlkFu5vZh65QbeSPP7W6fEHLqP/umqJUfJy7z8YTMM/MujdhvH2BmjJjDAZ6m9ks//GhVwXyFa4VADP7p6Q3JH2NZN3s2xhhJe0IXAJ0M7N3JA2mbq+LdilWaWafSnqZZGWdRFJyDwU6A8+71X8f4OvAecB3KG+ZnpBZ6HNcDLxBsuivB3yUe9Zg/tbGUlUFkYEmCIIgCIIgaCnWqDOppJQe//L7ku66JRgMXARgZvMa0W88yWW0jZ+BPASYCrwPbJprV1geBVwgLT/ruW8Fc3UA3nEFdXeSq2c5niUp3lBaUSuUrRQvAB0ldQeQtL6kPcp1knQ8yXJ8f5kxNgVec3fYvKyVylfIncAfgT+7pbsxfIGk3L2rdL73G2Xajwd6+znaTYBjSe682bNL/O8E4FxgpiuoWwLrmdlw4OfAfo2UM6MD8JqZfQ58l2ShLkZT9zIIgiAIgiAIWgVrmpLaH3hQ0gSg2PnDkpjZG8DzlHYLLcXDJOvYLOBp4DIze93rPlMKAnQxMBbo4gFr+pDOEa4PzJY018vlGAm0lTTb20+uoM8PgfMkTSMpMivgZ1qf9eA9JYPpmNknwAnAdZJmATNJ53eLcbGv9UXgVOBrZraozBg/B6YAY4AFubEeAC5VCjDVmcoZQXIbbuw7xcxmATNI+UzvIin7DbWfTvqhYyppDXea2Qx/PIHkLvycf2cfUafAbguMc5fqwcBPIJ1Jzc6lVsgtwPckTSa5+ha1nlb6roMgCIIgCIKgtaI6D9K1Gw+GNAfYz8zebWl5gpVHKZfpADM7uGzjoGKqq6utJvx9gyAIgiAIglWMpFozqy6sX9MsqU1C0uEky93AUFDXDiRdDgzHLZNBEARBEARBEKwdrDOW1ErxtB9PeXErUuCeRaQIs6+aWZcmjtuPXIoarxtHSmNT0mwlaYmZtS9SX7SvUv7XLmZ2raTewN/MbH4D43+duojAO5PO/C4luTM/XShzY/BgRF8lRUJuR3Jf/omZ/auhfo2coz+wxMxuaKBNvX2QdDUw3syeLNWnGeS6n5Ti524zG5Cr3w24nRTheENSkKSzi4/SMqTovmFJDYLVRfxvOAiCIFhXKWVJXdOi+65y/Exflk+0P64Aef7Jx0v3bB2Y2Qjq8sr2JslcUkk1s1F4KphCxdcV65XlUjMb5gGkLgLGStrTz66uLurtg5lduSonk7QV0MPMdijy+EaSi/Kj3navVSlLEARBEARBEKxprBPuvs1IG0l3SJonabSkdgCSOksaKalW0gSPzNsoJJ0saY4HvLmu4Nn/SJou6SmPMJxxqqRJ3md/b9tP0k2SegBHA9d7gKPGBCTKs42v7UVJv83JdKSk51yuByWtYO3NY4kBwOt4JN1SY0i6VtJ8SbMl3eB1O/j6Z/vfLxfOIeksSdM8mNVwj8S7wj5IGizpBO9zmAdsmiPpLkkbev3Lkn7hss0p9k4lbSTpbn8+Q9Kh/mg08EWfr/C87NbAK7l9meNj9ZP0iKTHJC2UdL6kH/m4kyVtXmqNXr98TV5e4n/Xk3SLf7OPS/prvl0QBEEQBEEQtDZCSW0cuwA3m9kewGLgeK8fBFxgZlWkVCS3lOjfxxWXmUrRXqsBJG1Dcrn9GsmK281dVAE2Aaab2X7AM8BVufE2MbMewA9IEWqXY2aTSBbVS82sq5m9pMZHlMXl6QPs5fJvr5RW5QrgcJerBvhRheNNB3YvNYYrY8cCe5jZ3sAvvd9NwL1eN4RkkSzkITPrZmb7kCI5n1FsH7LGkjYiRdztY2Z7kTwLvp8b7y2X7VbSey3kPADvezJwj495NJ5z18wmFPQZADwt6QlJF0vaLPdsT+AUYH/gV8CHZrYv8BzwX6XWWESuPMeRXNX3As4EiubAlXS2pBpJNcm7PQiCIAiCIAhahnD3bRwLzWym39cCndz614OUGidrt2GJ/kOLnEkF6AaMM7NFXj+ElI/1EeBzYKi3+yPwUG68+wHMbLykLxQoPCtgZreVXeGKPJUFm5I0H9iBdJ6yCynVCcAGJEWqErJNOrDEGO+RUrjcKekv1LlYdycpXAD3Acutujn2lPRLl6897sbcALuR3unfvHwPSfH8vZezva7NzZ2nJzAQwMwWSPoHKT3Me6UmNLO7JY0C/hM4BjhH0j7+eKyZvQ+8L+ld4DGvnwPs3cQ19gQe9Pyqr0saW0KuQaQfW/xMahAEQRAEQRC0DKGkNo6Pc/fLSMGA1gMWm1nXlRhX5Zssx0rcFys3B4VrbkuSd4yZndyE8fYlBaYqOYa7Lh8GnAScT7IwF1JsrYOB3mY2S+k8ba8yspTb92zt2bob278oZvYqyfJ9l1IO3T0L5oP048THufts/sEUX+NnuGeEkta/QVNlrKqCyEATBEEQBEEQtBTh7ruSmNl7wEJJJ0JSEHKWsUqZAnxV0paS2pBcR5/xZ+sB2RnCU4CJuX59fM6ewLtF0uu8D2zaSFkqYTJwkKSdff6NJe3aUAfflwtJZzJHlhrDLdMdzOyvpEBLmfI/iaS0AvSl/j5kbAq8Jml9b5NRah8WkKzhO3v5u9TteyWMz+bx9X8ZeKGhDpL+0+XLAixtQYqoXCml1vgyUOX3xwDr+/1E4Hg/m/olyivuQRAEQRAEQdCihCW1eegL3CrpCpJy8AAwq9LOZvaapJ8AY0mWr79m0V+BD4A9JNUC7+KKqfOOpEnAF4DTiwz9AHCHK4cnAEf4fE1x+83Lu8itePdngYZI50v/VqT59ZJ+DmxMUkwP9ci+pcZ4H3jUz3YKuNifXUiyPF5KOjR5WpG5fk5S+P9BcpHNFNPCfcjW8ZGk00iu2m2BaUBj9uYW4DZJc0iWzH5m9nHO7bsYRwJ/kPSRly81s9fL9MlTao13kPZtKslS/YHXDydZpeeS3s8U0ncUBEEQBEEQBK2SyJMaBGs5ktqb2RKlHMBTgYPM7PVS7aurq60m/H2DIAiCIAiCVYwiT2oQrLM87kG1NgCuaUhBDYIgCIIgCIKWZo0/kyppi1xal9cl/cvvF3s02qaO20/STQV14yStoOkXtFlSor5oX0lHS7rc73tL6lJm/K/n1rtE0gt+f28xmRuDUq7NhT7eAklXVdCnn6fQycoXyXN3evllTzezUkg6WCnX50x5flqv30zSD3LlXpIeLz5KRfP0z31DMyVd6/V3lns3jZijo6RPJZ3TDGNtI2lYQ23MrJenw+liZoPLjVlbC1JcccW1qq4gCIIgCBpmjVdSzext/wd4V9J5wgF+35UUFbVVY2YjzOxaL/YmpWVpqP2o3HprgL5e/q+G+jWCS3P79z1JO5Zp3w/YJle+iHT+tLnpC9zga12aq9+MlCe2ORmQ7bGZXQ5gZmeaWZN/9CjgRNL53JLRkT2AVlnM7FUzO6F8yyAIgiAIgiBYM1jjldQytJF0h1vgRmcWOEmdJY2UVCtpgqTdGzuwpJMlzZE0V9J1Bc/+R9J0SU9J6ph7dKqkSd5nf2/bT9JNknoAR5MCDc2U1LmJa97G1/aipOW5RCUdKek5l+tBj6LbEBv53w+8/5WSprnsg5Q4AagGhrjMPyQprGNVJB+npFMlTfW2txdTxCQdJmmG7+1dkjaUdCbwHeBKpRyyea4FOvuY13tde0nD3Bo8REq2C0lVkp7x9z5K0tZld7NOrnGSqiV9v2Bf+0kaWOn6nJOBHwPbSdo2N9YSSVdLmgJ0dyv0r/291Ujaz+V+SdK53qeTUhobJLWRdL2/p9mZpVbS1pLGu1xzJR1c6bqDIAiCIAiCYHWztiupuwA3m9kewGLgeK8fBFxgZlXAJaQorcXok3P7nElSyFByb72OlL+zK9BNUm/vswkw3cz2I6UzybvMbmJmPUiWv7vyE5nZJGAEbsk0s5cknZspI42gKykC8F4u//ZK7rZXAIe7XDXAj0r0v97X+grwgJm96fU3mVk3M9uTlB/2KDMbRn1r7h+AV0kRfA/NDyrpKy7XQW6pXUb9FCooRfQdDPQxs71IZ6a/b2Z35vamXh/gcuAln/9Sr9uXZNHtAuxESnWzPjAQOMHf+13Ar0rswcW59/71gmfDgONy5T7A0ErW52vcHtjKzKYCf6Z+tOZNgAQ4s2sAACAASURBVLlmdoCZZSl2/mlm3YEJvjcnAAcCVxeR+wxSKqJuQDfgLLeEnwKMcrn2AWYWketsV4RrUvDkIAiCIAiCIGgZ1vbASQvNLPsHeS0pJ2Z7oAcp7UjWbsNinYGhZnZ+VpA0zm+7AePMbJHXDwEOAR4huRgP9XZ/BB7KjXc/gJmNl/QFpWA2JWliqpinsnypSmdydyC5xHYBnvU1bwA8V6L/pWY2zPfpKUk9XIE+VNJlJFfezYF5wGONkOswUh7PaS5DO+DNgja7kd5ZlsrmHuA84PeNmAdgqpm9AuAKdyfSjxR7AmN8/jbAayX6DzCzG4o98PQ7f5d0IPCiy/ysy1lufZByvf7Z7x8A/hf4nZeXkVLG5Bnhf+cA7c3sfeB9SR8V+X6OBPZ2CzdAB9IPNdNI6XvWBx7J/TeRX9cg0o83SNUR8jsIgiAIgiBoMdZ2JfXj3P0ykuKwHrDYrUpNpTGhL6zEfbFyc1C45rYkeceYWckzkIV4ypJxQE9J00nW5moz+6ek/tS5A1eKgHvM7Cdl2jQHpfZgnlslV5ahJPfjBcDDZmbuUlxufZBcfb8kKbOybiNpFzN7EfjIzJYVtM/W8jn11/U5K/73K5KHwKjCSSUdAnwLuE/S9WZ2bykBq6ogMtAEQRAEQRAELcXa7u67Amb2HrBQ0okAfrZyn0YOMwX4qqQt/dzhySTXXkh7mlmyTgEm5vr18Tl7ktwy3y0Y931g00bKUgmTSS6vO/v8G0vataEOktoCBwAvUaeQvuUW1nygnkKZS63hKeAESV/08TeXtENBmwUka/fOXv4udftaikr37AWgo6TuPv/6kvaooF8xHiIFuTqZOqt52fVJ2o3k8r2tmXUys07Ab0jW1eZgFPB9t5giaVdJm7gcb5rZHSTL7X7NNF8QBEEQBEEQNDvrnJLq9AXOkDSL5LZ6TGM6m9lrwE+AscAs0hnUR/3xB8AekmpJZ1bzZwffkTSJFIX4jCJDPwBcqhQ4qHMTz6QWk3cRKQrv/ZJmk5TWUsGisjOps0kupg+Z2WLgDi8/QnIfzRgM3Ka61DCDgCdUEDjJI+NeAYx2GcYAWxe0+Qg4jeSKPYdkLWzQ5dnM3ia5Mc9VXeCkYu0+ISnX1/l7n0ly+240ZvYOMB/Ywc+WVrQ+klL7cEHdcBqI8ttI7nS5pnswpdtJ1tZewExJM0jnsv/QTPMFQRAEQRAEQbMjszh+FgRBHdXV1VYT/r5BEARBEATBKkZSrZlVF9avq5bUIAiCIAiCIAiCoBWyxiqpkpYUlPtJumk1zNtJ0lJ3b50v6TZJJffR25+SK3eV9M1VLWc5CvfP6zaT9INcuZekx1dynrOV8pUuUMoh2rPCfsvzfzY3kk6U9HyhS3KRd7VS35SkwZIW+rcyPXcedpykFX4xak4k3SmpS1P61taCFFdcca2qKwiCIAiChlljldSVxQMDlSyX4SWPDrw3KbVL7wbadiIFUMroCjRKSW2kbCvDZqQcrs2CpKOAc4CeZrY7cC7wJ0lbFWnbZiXnakz/M4AfFOZyZcV31Rxc6t/K5aQzoqsFMzvTz8kGQRAEQRAEwRrFWqmkSvq2pCkegOhJSV/y+v6SBkkaDdzrlrIHJT1GCnhzn6RjcuMMkXR0qXnM7DNgErCzRwm+3gP4zJHUx5tdCxzs1rT/JgVS6uPlPh599S5J01zeY3zuerIVWeMjkmolzZN0dq5+iaRfSZolaXJu7TtKes7nuabEkq4FOrtsWRCi9pKGuSV0iJTsAJKqJD3jMoySVBgkCOC/SUraW75f06nLfYqklyVdKWkicKKPOUvSc1kbb9fG93aapNmSzvH6XpLGSvoTKahT4R6d7O9irqTrvO5KoCcp2FNhoKX8u7rY67aRNFLSi5J+mxv7SN/P6f6e2pfY04zxwM658oluWf6bpIN9zI0k3e0yz5B0aAXrH1fi/YyTVC1pB5d9S0nrSZog6cgysgZBEARBEARBi7Em50ltpxSFNmNzYITfTwQO9PyVZwKXAT/2Z1Uky95SSf2A7sDeZvZvSV8FLgYeldSBFP31e6UEkLQxcBhwJXAcyUq6D7AlME3SeJIF7RIzO8r7vEHKN3q+l38NPG1mp0vaDJgq6UmfYrlsRaY/3WVu53MN90i3mwCTzexnrlSdBfySFNH1VjO7V9J5RcbDZd0zyyErqRewL7AH8CrwLCmVzRRgIHCMmS1yhfxXwOkF4+0B1BbU1VB/Tz8ys54+32xSns9nChTIM0gpe7pJ2pAUzTdT3Pd3mRfmJ5G0DXAd6X2/Q/oRoreZXS3pa6R3UhgdqPBd9SO9031JOUpfkDQQWEqK5Hu4mX3gPz78iPqRnAv5NvUV6bZmtr+S6/dVwOG4Ym5me0na3WXeFfivBta/wvshl/bIzP7hCvptpNRJ882s2I8eZwP+Y8eXG1hGEARBEARBEKxa1mQldWmmTMFyhSI757cdMNStexsAeQVmhJktzZXHZEqgK0c3K+W6PA4Y7tbSQjq7gmzAo2b2hKQBwP1mtgx4Q9IzQDfgvTLrOBI4WtIlXt6IOi1hTAkFFeBCScf6/fbALsDbwCdAdo60FjjC7w8ipR8BuI+kwFXCVDN7BcDX3AlYDOwJjHHDXRvgtQrHE2nfMob62B2AzczsmZyM3/D7I4G9JWX5WTuQ1vuJy1dPQXW6AeM8/Q6ShgCHkFLoNIansny2kuYDO5DcoruQlEVI39hzJfpfL+kKYBH10w495H9rSXsKycI7EMDMFkj6B7Ar5ddf+H7yuXkxszuV8gKfS1K6V8DMBpHSByFVR8jvIAiCIAiCoMVYk5XUhhgI/M7MRrg1sH/u2QcFbQvL95HyqJ7EipbBjJfyCrLT1HAYAo43sxfqVUoHFJEte9aLZHnrbmYfShpHUm4BPrW6vELLqP+Om6J8fJy7z8YTMM/MupfpO59kyXw6V7ef12dkayxUXvOIZGEdVa8y7UPRPaLp76OQUusfY2aV5De91MyGNTBu/h2Vkrmh9ReTj4J2G5N+uAFoD7zfkMBVVRAZaIIgCIIgCIKWYq08k0qyNP3L70u665ZgMHARgJnNa0S/8aSzpm0kdSRZ7aaSFIJNc+0Ky6OAC3JnCfetYK4OwDuuoO4OHFhBn2dJijckJbwYhbKV4gWgo+qi1a4vaY8i7X4LXCdpC2/XFegH3FLY0MwWA++qLvpvXsZRwPclre/j7CppkzIyTgG+6mcx2wAnA8+U6VPp+ieT3J53dnk2drfclWU8vm4f78ukvW7K+vNcBwwhuaXf0QxyBkEQBEEQBMEqY21VUvsDD0qaALzVmI5m9gbwPHB3I+d8GJgNzCJZDi8zs9e97jOlgEAXA2OBLvLAScA1wPrAbKWUK6WCGuUZCbT1M5zXkJSmcvwQOE/SNJKSuwJ+pvVZpUBDhUGF8u0+AU4gKaCzgJmk87uF7UYAdwGTJC0gKUinmlkp1+DTgJuVAiflXbLvJFlfp/se3U4ZLwCf4yek/Z4FTDezRxvqw4rvqtTYi0jK9v3+DiYDu5cZuxJuAdpImkNyg+5nZh/ThPVn+DnrbsB1ZjYE+ETSac0gaxAEQRAEQRCsElTnGRrActfIOcB+2VnEIFiXqK6utprw9w2CIAiCIAhWMZJqzay6sH5ttaQ2CUmHAwuAgaGgBkEQBEEQBEEQrH7W1sBJTcLMniTybwTNjKSfAaeQAht9DpxjZlMkvUxKR9Qol/TcuL3Ipcwp0eYIUv7XDUjRgC81s6dLtQeorQU1V9ipIAiWE45LQRAEQVAZoaQGwSrEg0sdRXIf/1jSliSFsdL+bUukQaqUt4Bvm9mrkvYkBWHadiXGC4IgCIIgCIJVSrj7BsGqZWvgLQ+AhJm9ZWav5p5fIGm6pDkeqRlJ/SUNkjQauNcjRl8vaZqk2ZLOKZxEUjdJMyTtlK83sxm5+eYBG0nacJWsNAiCIAiCIAiagVBSg2DVMhrYXtLfJN3i0XbzvGVm+wG3Apfk6quAY8zsFOAM4F0z60aK1HuWpB2zhpJ6ALd5+783IMvxwIxMYc4j6WxJNZJqYFFT1hkEQRAEQRAEzUIoqUGwCjGzJSSF82yS9vf/27vzeLvme//jr7ckJRUXJXWpIYpWjeGc0CBtlKpOQtFQLcHlapVymw7qXnK12mrcujVVwyXih7pC2ugghsqAyHAiI0JNt+ahZqkhPr8/vt8tKzt777P3yZmS834+Hvux1/6u7/qu71rr7Dzy2d/pOkkjClluzO8twIBC+sSIKC3Dsx9wpKS5pPVfNwC2yfs+AYwhden9v2r1yOvYngOs0Aqb6zkmIprT7Gr9679AMzMzM7N25jGpZh0sIpYCk4HJeQ3Uo4CxeXepVXMpy38f3yhsCzgpIiYVy80TJz0NrAXsAhS7ERfzbUpax/fIiHi4tfo2NYFXoDEzMzOzruKWVLMOJOnjkrYpJA0EHm+wmEnANyX1yWV+TNLaed/LwBeBn+agtfz86wF/BE6LiLsarb+ZmZmZWWdzkGrWsfoBV0q6T9J8YDtgVINlXAbcB8yRtBD4DYVW14h4FvgycJGk3cuO/TawNfAfkubm14fbdilmZmZmZh1P4YXbzKygubk5Zru/r5mZmZl1MEktaU6U5bkl1XoESUsLLYlzJQ2Q1Czp/AbLGSVpZN4+S9K+7VS/xyTdUPh8iKSx7VG2mZmZmdmqxBMnWU+xJCIGlqU9BrS5yTAizlipGq2oWdL2EbGoncttSEsLSF1ZA7PVkzsumZmZ1cctqdZjSRoq6Q95e5SkyyVNlvSIpJML+U6XtFjSbcDHC+ljJR2Stx+T9J+S5khaIGnbnN5f0q05/TeSHpe0YZUqnQv8qEI91851myXpXknDcvoISb+TdJOkRyV9W9K/5Tz3SPpQzjcwf54vaYKk9dvpFpqZmZmZtTsHqdZT9C109Z1QJc+2wOeA3YAzJfWR1AQcRlri5SvAoBrneCEidgV+DYzMaWcCf8npE4DNaxz/v8CukrYuSz89lzEI2BsYXZjddwfga7nOZwNvRsQuwHTgyJxnHPCDiNgJWJDrtBxJx0uaLWl2Ws7VzMzMzKxruLuv9RSVuvuW+2NEvAW8Jek5YCNgCDAhIt4EkDSxxvE35vcWUkALsBdwEEBE3CzppRrHLwVGA6cBfy6k7wccUBoLS1oXtRTs3hERrwGvSXoFuCmnLwB2krQusF5ETMnpVwLXl584IsYAY9I1NrtTopmZmZl1GQepZsu8VdheyrLvR71BW+n44rGNju68ihSkFselCjg4IhYXM+blZop1fq/w+T38/TYzMzOzVZC7+5rVNhU4SFJfSeuQ1iNtxJ3AVwEk7QfUHA8aEe8A5wGnFJInASdJaTojSbvUe/KIeAV4SdKQnPQNYEqNQ2hqShO8+OWXX+37MjMzs/o4SDWrISLmANcBc4EbgGkNFvGfwH6S5gCfB54GXmvlmP9h+VbQHwN9gPmSFubPjTiKNI51PjAQOKvB483MzMzMOo3CP++adRhJawJLI+JdSYOBX9cxNrZLNTc3x+zZbV6Zx8zMzMysLpJaIqK5PN1j1sw61ubA/0paA3gbOK6L62NmZmZm1q31+O6+kl4v+zxC0oWdcN4BkpbkJVHuk3RJDmRq5f9a4fNASV/o6Hq2pvz+5bT1JH2r8Pn99UjbeI5RhZltS2mP1VhvdIU8kk6WdL+kqyvkm5zXQZ2b8xzfyHlqiYiH8pIwE4DrImJWhWt7Mp97oaQDqlzLAZJ+2NZ6mJmZmZmtKtySupIk9Y6Id6t9bsXDETFQUm/gL8CBLFvGpNwA0nqY1+TPA4Fm4E9trWsHWg/4FnBxJ5yrXt8CPh8Rj1bZf0REzJb0IeBhSWMj4u1Oqtt5EXGupE8A0yR9OCLeK+3Mz20iUGv5m3bT0gJqdE5iM2uVR9eYmZnVp8e3pNYi6cuSZki6V9JtkjbK6aMkjZF0CzAut75eL+km4BZJV0kaVijn6motZAA5cLwb2FrJ6NyqtkDS8Jzt58CQ3OL2A9LkN8Pz5+GS1pZ0uaRZub7D8rmXq1uFa/ydpBZJi8paEF+XdLakeZLuKVz7lpKm5/NUm8Dn58BWuW6jc1o/SeMlPZDvR2mm2iZJU3IdJknauPUnU981FPZfAnwUmCjp1FaK6we8QVpGprycf8vPZaGkU+pIPz230N4GfLy164iI+4F3gQ0ljZX0S0l3AOeo0MKf950v6W5Jj0g6pHDO7+e/m3mSfp7TtpJ0c75H0yRt21pdzMzMzMy6iltSoa+kuYXPH2JZi9WdwCcjIiT9C/B94Lt5XxOwV0QskTQCGAzsFBF/l/Rp4FTg95LWBfYgzbBakaQPAvsAZwBfIbWS7gxsCMySNBX4ITAyIr6Uj3kWaI6Ib+fPPwX+EhHHSFoPmJmDI4p1q3D6Y3Kd++Zz3RARLwJrA/dExOmSfkEaS/kT4FekyX/GSTqxyiX9ENihNEGQpKHALsD2wFPAXcCekmYAFwDDIuL5HJCfDRxTocxTJX298HmTOq4BgIg4QdL+wN4R8UKVOl8t6S1gG+CUiFguSJXUBBwN7E5at3SGpCmkH3qqpR+Wr7s3MAdoqXLu0jl2J61v+nxO+hiwb0QszX9jRRsDewHbkv5ex0v6PKk1fveIeFOpVRhgDHBCRDyUz3Ex8Jmycx8P5AB/81rVNDMzMzPrUA5SYUlxttUcDJRmmNoUuC637n0AKHYVnRgRSwqfby0FgRExRdJFkj5MCjpvqNLNdqscIAfw+4j4s6TzgGtzkPRsDngGAa+2ch37AQdo2djNtVgWbdxaJUAFOFnSQXl7M1KQ9iJpkp/SONIW4LN5e0/g4Lx9FXBOK/UqmRkRTwDkax4AvAzsANyaG1Z7kZZoqeS8iDi39EHSY3VcQyNK3X37A3dLujkiHi/s3wuYEBFv5PPfCAwhBaaV0tfI6W/m9FpddUsB+GvA8PyjCMD15cFywe9yl+D7Sq3cwL7AFaVz5sC9H+lHkuu1rA/vmuWFRcQYUjCL1OxOiWZmZmbWZRyk1nYB8MuImJhbA0cV9r1Rlrf881XAEaTWtEotg5DHpJaltXU0oICDI2Lxcomp5ay8bqV9Q0mBzeDc8jaZFNwCvBPL1idayvJ/K20JYt4qbJfKE7AoIga3oTyg1WuodswkYCNgdkT8S3FfbtGdQ2oZLQap1Z5LredV731aLgAvqPjcsuL9VOG9/JxrAC9392VvzMzMzMxKPCa1tnWBJ/N21e66VYwFTgGIiEUNHDeVNNa0V27V+xQwk9TKtk4hX/nnScBJhbGeu9RxrnWBl3Jwty3wyTqOuYsUeEMKwispr1s1i4H+SuuHIqmPpO3rOK6o4WuIiM9FxMDyADXX4YOkLroPl+2aChwo6YOS1gYOAqa1kn6QpL6S1gG+3OB1tcUtwDH5GpD0oYh4FXhU0qE5TZJ2rlVIU1Oa4MUvv/xq35eZmZnVx0FqbaNI3SSnAdXGMlYUEc8C9wNXNHjOCcB8YB5pxt/vR8QzOe3dPCHOqcAdwHbKEycBPwb6APMlLcyfW3Mz0FvS/Jz/njqO+Q5woqRZpABxBXk86F15IqHRlfLkfG8Dh5AmBpoHzCV1TW1EW66hkqtzN+QWYGxELDd+NCLmkH54mAnMAC6LiHtbSb8uX9MNpMC1Q0XEzaTxqbPztZS6fh8BHJvv8SJgWJUizMzMzMy6nMI/73aI3Jq1ANg1Il7p6vqY1au5uTlmz57d1dUwMzMzs9WcpJaIaC5Pd0tqB5C0L/AAcIEDVDMzMzMzs/r1uCBV0ga5i+xcSc9IejJvvyzpvpUo9/11LCPitojYPCL+u41lDZX0h9ZzLnfMtZLmq2wdUEkHStqu8HmypBV+rWjgPEvz/Voo6aa83A2SNpE0vq3lNliHGbkO/yfp+cLzHCDp9TaW+blCOa8rrW86V9K4dqjvh6v8zc2V1GtlyzczMzMzW530uNl983jJ0vqdo4DXI+JcSQNYtuRKp5LUq8ZSI/Uc/8/AHhGxRYXdB5Kuq80BeJn3l+yRdCVwInB2RDxFGl/a4SJi93z+ERTWis1pbS1zEmnyKfIMwSMjol36vEbEcyz7m/sJ8EJbf8BoVFv+tlpaoI230cxq8OgaMzOz+vS4ltRW9JJ0qaRFkm6R1BdA0laSbpbUImlankW2LpIOl7QgtzyeU0h/XdJZkmYAgyXtL+kBSXeS1latVNZakq7I5d0rae+86xag1Fo3pJB/D+AAYHTet1XedaikmZIeLOVXmk14tKRZuUX2X+u4vOnAR/LxA/KETaVW5RvzPXtI0i8KdTo2n3dyvtcX5vRD8z2aJ2lqXTe3Ckln53LuUV5DVFJ/STfk65slac8Gyrul1Bqd7/2P8vbP8rWuIemXuf4LJDUUrEs6LR+7UNK3ctoZko7P27+W9Ke8/UVJl+XtL+VrvFepJb309/qMpH+XdDd57VxJ9+fnemUjdTMzMzMz62wOUpe3DXBRRGwPvAwcnNPHACdFRBNpxtSL6ylM0ibAOcBnSC1pgyQdmHevDSzMrYKzgUtJy5QMAf65SpEnAkTEjsDhwJWS1iIFog/nZVXen0U2Iu4mzfb6vbyvtKxK74jYjbREzpk57VjglYgYBAwCjpO0ZY1r6wXsk8uvZCAwHNiRtKTOZvl+/AdpmZjPAsVg/wzgcxGxc76eUhfiP1WrQxVrA/fkcqYCx+X0X5HWIx1Eeq6XNVDmVGCIpPWBfwB75fS9SLP2HgpsB+ycr+s8SR+up+D8Q8KhpHu+B/CdHBBPJf0tkMvdUNIapXPm1vORwN4RsQtpDPRJhaJfjYg9gN8B3wV2ioidSLMzV6rH8ZJmS5oNz9dTdTMzMzOzDuEgdXmPRsTcvN0CDJDUjxQ8XK+0rMdvgI3rLG8QMDkino+Id4GrSeueAiwlLU0CKVh7NCIeijTd8v+rUt5ewFUAEfEA8Djwsbqvbpkb83sLMCBv7wccma9xBrABKWgv1zfneRH4EHBrlXPcHhGvRMQ/SF2NtwB2A6ZExN8j4h3g+kL+u4Cxko4DeuVrfCoivtDgtb3Nsm7bxevbF7gw130i8E9K65fWYxrpuQ0Bfg+srzR780dy4L8XcE1ELM3LBd0J1DvudwgwPiKW5DVNJ+byZgCflLQB6QeTe0nB6pBcn71IgfH0fE3DC9cKafkb8t/TYuAqSYeT7s8KImJMRDSn2dX611l1MzMzM7P21+PGpLbircL2UqAvKZB/uTQOs0G1Rvb9o2ysYD2jldprpGDpOpey7G9ApNbiSa0cuyQiBkpalxQMngicX+McxfNUrX9EnCBpd+CLwFxJA/P44Ua9E8vWVSpe3xrA4IhY0oYyZ5BaXp8CbgI2JbXQzsz7V+a5VDw2IpZIep60xumdwP+RWmk3johHJDUBf4yIo6uU+0Zhe1/g08BBwOmSdizcIzMzMzOzbsUtqa3IrVuPSjoUQMnOdR4+A/i0pA1z99jDgSkV8j0AbFkYM3p4lfKmkoIWJH0M2JzUSlbLa0A9LYaTgG9K6lMqX9La1TLnpXVOBkaWjqnDTNL9WF9Sb5Z1p0bSVhExIyLOAF4ANquzzHrdAhQnWKr7R4fcGvwsaRKqGaSWzJH5HdJzOSyP690I2JPUhbseU4GDlcYbr0Pq8n1nYd/I/D6N1J23FBjfCeyjNOEXkvpJ2rq88PxsNomI20ndfjch/fhSVVNTmuDFL7/8at+XmZmZ1cdBan2OAI6VNA9YBAyrkm+EpCdKL1K31dOAO4B5wJyI+H35QTkIOh74o9LESY9XKf9i0uROC0jdOUdExFtV8pb8Fvhenlxnqxr5LiN1y52jNAHSb2ilpT0i7s3XdVgrdSjlfxL4KSnQuy2fr7SO7Og86dBCUlA2r41jUqs5GWjOkwfdB5zQ4PHTgKfz/Z5Gak0tBanjST80zCNd17/lGX1blccNjycFtdOB8yOiNBPzNFLf21kR8TgQpXNGxNOk1tzxkuaTukuvEKQCfYDf5jwtwE8i4s1GLtzMzMzMrDPJvf6sM0nqFxGv55bUCcDlETGhq+tlyzQ3N8fs2e2y+o6ZmZmZWVWSWtKcKMtzS6p1tlF5op+FwKOk2WfNzMzMzMwAB6ntRtLrZZ9HKK8B2sHnHSBpidI6qPdJuiQvVVIr/9cKnwdKanQG3TaLiJF5OZxtI+Lk0gQ+5fcvp61XWjc0fx4q6Q/l+Roh6eu5y+8ipbVUL5O0XivHPCZpwwrpoySNbOXYA/OSMo3Usb+kGbmL9pCyfZMlLc7Pe67ymqxKa6KamZmZma3yPLtvNyGpd16mpuLnVjycZ9ztDfyFNMHPjVXyDgC+BlyTPw8kLZdS99jPBuu2MtYDvkWd69K2RtL+wKnA5yPiyTyZ1VHARqRlXjrCgaRZkO9rLWPBPsADEXFUlf1HRMRy/XHzmqjLkdSrbAbpurS0gNprHmmzHsIjZ8zMzNqPW1I7gaQvF1rGbsszwJZa4sZIugUYl1tfr5d0E3CLpKskDSuUc7WkA6qdJweOdwNb51mIR0tamCckGp6z/RwYklvhfgCcBQzPn4dLWlvS5ZJm5foOy+derm4VrvF3klpyC+XxhfTXJZ2dWy3vKVz7lpKm5/P8uMol/RzYKtdtdE7rJ2m8pAfy/VAur0nSlFyHSZIqrWV7OjAyT+BEXtf08ohYnMvYJ1/zgnwP1iwc+z1JM/Or0iy6W0m6OZ9/mqRtJe0BHECaFGquyiaukrSFpNtzy+7tkjZXmnX4F8AX8jE1Z+It3uf8PlTSHZKuARbktK/nes+V9JscnJuZmZmZdUsOUttP30IXzLmk4K/kTuCTEbELabbd7xf2NQHDIqLUBXcwcFREfIY04+7RAErrku5BjRZPSR8ktcItAL5CaiXdmbRO5ugcuP0QmJa73J4DnAFclz9fRwrk/hIRg4C983GlpWiKG7b2QwAAEqVJREFUdSt3TEQ0kVplT5a0QU5fG7gnInYmzdp7XE7/FfDrfJ5nqlzSD8mtxBHxvZy2C3AKsB3wUWBPpWVWLgAOyXW4HDi7QnnbA3Oq3Lu1gLHA8IjYkdTL4JuFLK9GxG7AhcB/VyhiDGmd2SbSsjEX55l7JwLfy9fwcNkxFwLjImIn4GrSzL5zWf6ZVFrX9erC39oGFfbvBpweEdtJ+gQwHNgzr/W7lLyMUdn1Hy9ptqTZ8HylW2RmZmZm1inc3bf9LMlBAJBaHkkBG6TlSq7LQeIHSBMGlUwsC0RujYi/A0TEFEkXSfowKei8oUo3261yYBzA7yPiz5LOA67N3T2flTQFGAS82sp17AccoGVjLdcirce6XN0qOFnSQXl7M2Ab4EXgbVJ3V0hLoHw2b+/JsnVSrwLOaaVeJTMj4gmAfM0DSF11dwBuzQ2rvYCnaxUiacd83nWAH5GWkHk0Ih7MWa4ETmRZQHpt4f28srL6kX5AuF7L+skWW2GrGUx6ruS6/KKOY6BCd98yMyOi9De2D+mHkFm5bn2BFZbHiYgxpEAbqdkdF83MzMysyzhI7RwXAL+MiImShgKjCvveKMtb/vkqUsvXYcAxVcp/uBggZ20dVSjg4FIX2PcTpd0r1K20byiptXZwRLwpaTIpuAV4pzQ5EqkVr/g315ZgqLgubKk8AYsiYnArxy4CdgXuiIgFwEClya360vr9iirbkHokvFzhGTSqvYLD4nMScGVEnNZOZZuZmZmZdSh39+0c6wJP5u1qk+FUM5bUvZWIWNTAcVNJY017SeoPfAqYCbxGaj0sKf88CTipMNZzlzrOtS7wUg5QtwU+Wccxd5ECb6jQ/bRK3apZDPSXNBhAUh9J21fI9zPgXEmbFtJKYz4fAAYUxpt+A5hSyDe88D69WGhEvAo8KunQfH5J2rmOa7ib5e/BndUvsc1uBw7JrfFI+pCkLWod0NSUJoHxyy+/6n+ZmZlZ+3GQ2jlGkbqCTgNeaOTAiHgWuB+4osFzTgDmA/NIM/5+PyKeyWnv5omMTgXuALbL4xuHAz8G+gDzJS3Mn1tzM9Bb0vyc/546jvkOcKKkWaQgdwUR8SJwl9LkT6Mr5cn53gYOAc6RNA+YS+p+W57vT8D5wJ+Vluu5m9QaOyki/kEa/3u9pAXAe8AlhcPXlDQj1/vUCtU4Ajg2n38RUJrw6rekSZfuLZ84CTgZODrft2/ksttVRNwH/DtpIq75wK1ApUmlzMzMzMy6BYV/Au7W8mRIC4BdI+KVrq6Prf6am5tj9uxaQ17NzMzMzFaepJaIaC5Pd0tqNyZpX1I31AscoJqZmZmZWU/gILUbi4jbImLziKi05MkqQdLS3JV4nqQ5ee3QWvmHSvpDrTwrUZe726mcUZKezNd1n6TDC/smS1rh16DOJGlA7qptZmZmZrbK8ey+1tHeX5pH0udIkxd9uisqEhE1A+QGnRcR50raBmiRND4i3mnH8rtMSwuorXNDm/VQHjljZmbWftySap3pn4CX4P0ZcEfnSZEW5EmbSvpJGi/pAUlXF2YabpI0RVKLpEl53dlS6+V5kqZKul/SIEk3SnpI0k9KhUp6Pb/3k3R7btldIGlYTh+Qj79U0iJJt0jqSw0R8RDwJrB+IflQSTMlPShpSKHsafmc77co55bjqZIm5FbZSyStkWdlHlu4P6fm/AMl3SNpfj5m/cK9mSdpOml919I1T5NUXL/3Lkk7NfbYzMzMzMw6j4NU62h9c7fYB4DLWDZb8FeAgcDOpDVWR5eCTmAX0rI72wEfBfaU1Ie03uwhEdEEXA6cXTjP2xHxKdKMvL8nBWo7ACMkbVBWp38AB0XErsDewH+VAmFgG+CiiNgeeBk4uNbFSdoVeCginisk946I3fI1nJnTngM+m885nDTLcMluwHeBHYGtCvfmIxGxQ0TsyLLZnccBP4iInUgTapXKvwI4ucJasZcBI3JdPwasGRHzK1zH8ZJmS5oNz9e6ZDMzMzOzDuUg1TrakogYGBHbAvsD43JAuBdwbUQszcvsTAEG5WNmRsQTEfEeaTmZAcDHSUHnrZLmkpZVKa53OjG/LwAWRcTTEfEW8AiwWVmdBPw0L8lyG/ARYKO879GImJu3W/K5KzlV0mJgBmmJoaIbKxzfB7g0L29zPSkAL5kZEY9ExFLg2nxvHgE+KukCSfsDr0paF1gvIkrrt14JfKpC+lWFsq8HvpSD/GNI6+6uICLGRERzml2tf5VLNjMzMzPreB6Tap0mIqZL2pAUBdUa9fhWYXsp6e9UpOCzvKWw/Jj3yo5/jxX/zo/IdWiKiHckPQasVeXc1br7lsakfoUUeG+V11otllGqO6S1VZ8ltRyvQWrNLSkfzRYR8ZKknYHPkVqFv0rl9Vkh3ZuKI+Ii4k1Jt5LWbf0q0OqkTk1N4BVozMzMzKyruCXVOo2kbYFewIvAVGB4HnvZH/gUMLPG4YuB/pIG57L6SNq+jVVZF3guB6h7A1u0sRwi4kZgNnBUHed8OrcOf4N0H0p2k7SlpDVIXYHvzMH8GhFxA/AfLFsn96XSONdczpSIeBl4RdJeOf2IsnNfRupePCsi/t62KzUzMzMz6xxuSbWO1jd3z4XU4ndURCyVNAEYDMwjtQJ+PyKeyYHsCiLibUmHAOfn7q29gf8GFrWhTlcDN6Xxl8wlrUW7Ms4CrpF0aY08FwM3SDoUuAN4o7BvOvBz0pjUqcCEvH1FDlwBTsvvRwGXSPogqUvw0Tn9aOBySW8Ck4onjogWSa+ybFyrmZmZmVm3pfC8+WZdRtJQYGREfKkDz7EJMBnYNrfk1tTc3Byz3d/XzMzMzDqYpJY0J8ry3N3XbDUm6UjS5E6n1xOgmpmZmZl1NQep1uNIOj2vgzo/L4+zeyv5T8jBXnn6AEkLV7I6A4AvStqnUO5BkiJ3b15ZU0jL35Su+YTWDmhpAckvv/xq5GVmZmbtx2NSrUfJEy99iTQR0Vt5gqIP1DomIi5pp3P3ysvMlFsAHA7cnj8fRhqr2x6eBvbI19oPWChpYkQ81U7lm5mZmZm1K7ekWk+zMfBCXkOViHihFLBJekzSOZJm5tfWOX2UpJF5u0nSPEnTSUvDkNN7SRotaVZuof3XnD5U0h2SriEFo5VMI83w2ycHkluTJnQqlX1GLnehpDF5nVkkTS7U98HCrL/vi4i3S9cKrIm/82ZmZmbWzfk/rNbT3AJsloO6iyV9umz/qxGxG3AhafbgclcAJ1dYr/VY4JWIGAQMAo6TtGXetxtpTOh2VeoUwG2kNVGHARPL9l8YEYMiYgfSuq3FSZZ65/qeApxZqXBJm0maD/wNOKdSK6qk4yXNTjMeP1+lmmZmZmZmHc9BqvUoEfE60AQcT4rGrpM0opDl2sL7coFoXvpmvYiYkpOuKuzeDzgyL7czA9gA2CbvmxkRj7ZStd+SuvkeVqhDyd6SZkhaAHwGKK4Pe2N+byGNb11BRPwtInYitdAeJWmjCnnGRERzml2tfytVNTMzMzPrOB6Taj1OHhc6GZicA7+jgLGl3cWsZYeqQlpx30kRsdwapXmJmTcKn08Ejssfv1Co00xJOwBLIuLB3KMXSWuR1lhtjoi/SRoFrFU4Rakr71Ja+T5HxFOSFgFDgPHV8jU1gVegMTMzM7Ou4pZU61EkfVzSNoWkgcDjhc/DC+/Ti8dGxMvAK5L2yklHFHZPAr4pqU8+z8ckrV1+/oi4KCIG5ld5t9vTgB+VpZUC0hfyeNWGZvyVtKmkvnl7fWBPYHEjZZiZmZmZdSa3pFpP0w+4QNJ6wLvAX0ldf0vWlDSD9APO4RWOPxq4XNKbpMC05DJSd9s5eWKj54EDG6lYRPy5QtrLki4lTbr0GDCrkTKBTwD/JSlIrb3nRkS1CZzMzMzMzLqcIqr1XjTrWSQ9RupW+0JX16UrSXoNt7auLjYEevTf82rEz3L14We5evBzXH34WXatLSJihQlR3JJqZuUWpwmUbFUnabaf5erBz3L14We5evBzXH34WXZPDlLNsogY0NV1MDMzMzPr6TxxkpmZmZmZmXUbDlLNrNyYrq6AtRs/y9WHn+Xqw89y9eDnuPrws+yGPHGSmZmZmZmZdRtuSTUzMzMzM7Nuw0GqmZmZmZmZdRsOUs16KEn7S1os6a+Sflhh/5qSrsv7Z0ga0Pm1tHrU8SxHSHpe0tz8+peuqKfVJulySc9JWlhlvySdn5/zfEm7dnYdrT51PMuhkl4pfCfP6Ow6WuskbSbpDkn3S1ok6TsV8vh7uQqo81n6e9mNeAkasx5IUi/gIuCzwBPALEkTI+K+QrZjgZciYmtJhwHnAMM7v7ZWS53PEuC6iPh2p1fQGjEWuBAYV2X/54Ft8mt34Nf53bqfsdR+lgDTIuJLnVMda6N3ge9GxBxJ6wAtkm4t+/fV38tVQz3PEvy97DbckmrWM+0G/DUiHomIt4HfAsPK8gwDrszb44F9JKkT62j1qedZ2iogIqYCf6+RZRgwLpJ7gPUkbdw5tbNG1PEsbRUQEU9HxJy8/RpwP/CRsmz+Xq4C6nyW1o04SDXrmT4C/K3w+QlW/Mf6/TwR8S7wCrBBp9TOGlHPswQ4OHdFGy9ps86pmrWzep+1rRoGS5on6c+Stu/qylhtecjLLsCMsl3+Xq5iajxL8Pey23CQatYzVWoRLV+Pqp481vXqeU43AQMiYifgNpa1kNuqxd/J1cccYIuI2Bm4APhdF9fHapDUD7gBOCUiXi3fXeEQfy+7qVaepb+X3YiDVLOe6Qmg2Jq2KfBUtTySegPr4u5r3VGrzzIiXoyIt/LHS4GmTqqbta96vre2CoiIVyPi9bz9J6CPpA27uFpWgaQ+pKDm6oi4sUIWfy9XEa09S38vuxcHqWY90yxgG0lbSvoAcBgwsSzPROCovH0I8JeI8K/D3U+rz7JsfNQBpLE4tuqZCByZZxP9JPBKRDzd1ZWyxkn659IYf0m7kf4/9mLX1srK5Wf0P8D9EfHLKtn8vVwF1PMs/b3sXjy7r1kPFBHvSvo2MAnoBVweEYsknQXMjoiJpH/Mr5L0V1IL6mFdV2Orps5nebKkA0izG/4dGNFlFbaqJF0LDAU2lPQEcCbQByAiLgH+BHwB+CvwJnB019TUWlPHszwE+Kakd4ElwGH+EbBb2hP4BrBA0tyc9iNgc/D3chVTz7P097Ibke+9mZmZmZmZdRfu7mtmZmZmZmbdhoNUMzMzMzMz6zYcpJqZmZmZmVm34SDVzMzMzMzMug0HqWZmZmZmZlY3SZdLek7SwjrybiHpdknzJU2WtGlrxzhINTMzsx5D0lJJcyXNkzRH0h45fRNJ4/P2UEl/yNsjJF2Yt0+QdGQn1HFUR5/DzGwljQX2rzPvucC4iNgJOAv4WWsHOEg1MzOznmRJRAyMiJ2B08j/WYqIpyLikFoHRsQlETGuoyom6aC8huM3Jd0laceOOpeZ2cqIiKmktdffJ2krSTdLapE0TdK2edd2wO15+w5gWGvlO0g1MzOznuqfgJcAJA1orduapFGSRubtgZLuyd3XJkhaP6dPlnSOpJmSHpQ0JKdvn9Pm5mO2qXCKi4GvAr8GvgI8136XambW4cYAJ0VEEzCS9G8awDzg4Lx9ELCOpA1qFdS7w6poZmZm1v30za2VawEbA59pYznjSP8ZmyLpLOBM4JS8r3dE7CbpCzl9X+AE4FcRcbWkDwC9KpT5LrARQEQ828Z6mZl1Okn9gD2A6yWVktfM7yOBCyWNAKYCT5L+vavKQaqZmZn1JEsiYiCApMHAOEk7NFKApHWB9SJiSk66Eri+kOXG/N4CDMjb04HT84QhN0bEQxWKPgz4MbCjpE2AH0XEC43Uzcysi6wBvFz697UoIp4i9Q4pBbMHR8QrrRVmZmZm1uNExHRgQ6B/Oxf9Vn5fSm4QiIhrgAOAJcAkSSu04EbEXRHxGeBy4AXgnHaul5lZh4iIV4FHJR0KoGTnvL2hpFLceRrp37iaHKSamZlZj5Qn9egFvNjIcbkF4KXSeFPgG8CUGocg6aPAIxFxPjAR2KlCnlKL7hJgPrBOI/UyM+sskq4l9RD5uKQnJB0LHAEcK2kesIhlEyQNBRZLepA0pOHs1sp3d18zMzPrSUpjUgEEHBURSwtjqOp1FHCJpA8CjwBHt5J/OPB1Se8Az5CWYSj3E0kbAluSxmwd02ilzMw6Q0QcXmXXCsvSRMR4YHwj5Ssi2lIvMzMzM+sAkkZFxKiuroeZWVdxd18zMzOz7mVyV1fAzKwruSXVzMzMzMzMug23pJqZmZmZmVm34SDVzMzMzMzMug0HqWZmZmZmZtZtOEg1MzMzMzOzbsNBqpmZmZmZmXUb/x/xaDCVzoV0MwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph gross revenue movies\n",
    "\n",
    "ax1 = df_grossrev_99p.plot.barh(x= 'title', \n",
    "                                y= 'worldwide_gross', \n",
    "                                color = 'blue', \n",
    "                                stacked=False, \n",
    "                                rot=0, \n",
    "                                figsize=(12,10), \n",
    "                                label = '_nolegend_')\n",
    "ax1.set(\n",
    "    title='Top Revenue Grossing Movies',\n",
    "    xlabel='Billions $',\n",
    "    ylabel='Movies')\n",
    "ax1.invert_yaxis()\n",
    "\n",
    "ax2 = df_grossrev_99p.plot.barh(x= 'title', \n",
    "                                y = 'ROIpct', \n",
    "                                color = 'green', \n",
    "                                stacked=False, \n",
    "                                rot=0, \n",
    "                                figsize=(12,10),\n",
    "                                label = '_nolegend_')\n",
    "\n",
    "ax2.set(\n",
    "    title='ROI of Top Revenue Grossing Movies',\n",
    "    xlabel='ROI (%)',\n",
    "    ylabel='Movies')\n",
    "ax2.invert_yaxis()\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>month_num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5780.000000</td>\n",
       "      <td>5.780000e+03</td>\n",
       "      <td>5.233000e+03</td>\n",
       "      <td>5.414000e+03</td>\n",
       "      <td>5780.000000</td>\n",
       "      <td>5.233000e+03</td>\n",
       "      <td>5.414000e+03</td>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5780.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.369723</td>\n",
       "      <td>3.159652e+07</td>\n",
       "      <td>4.626630e+07</td>\n",
       "      <td>9.769777e+07</td>\n",
       "      <td>2003.965398</td>\n",
       "      <td>5.450590e+07</td>\n",
       "      <td>6.438370e+07</td>\n",
       "      <td>4.109852</td>\n",
       "      <td>410.989073</td>\n",
       "      <td>7.051384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>28.825690</td>\n",
       "      <td>4.181652e+07</td>\n",
       "      <td>7.030032e+07</td>\n",
       "      <td>1.788742e+08</td>\n",
       "      <td>12.726243</td>\n",
       "      <td>1.177941e+08</td>\n",
       "      <td>1.498716e+08</td>\n",
       "      <td>30.468579</td>\n",
       "      <td>3046.861304</td>\n",
       "      <td>3.480491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.100000e+03</td>\n",
       "      <td>3.880000e+02</td>\n",
       "      <td>2.600000e+01</td>\n",
       "      <td>1915.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-2.002376e+08</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-100.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>5.000000e+06</td>\n",
       "      <td>4.299773e+06</td>\n",
       "      <td>7.002417e+06</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>8.992000e+03</td>\n",
       "      <td>-1.863729e+06</td>\n",
       "      <td>-0.300000</td>\n",
       "      <td>-29.902500</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>1.700000e+07</td>\n",
       "      <td>2.199526e+07</td>\n",
       "      <td>3.331993e+07</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>9.400000e+06</td>\n",
       "      <td>1.189567e+07</td>\n",
       "      <td>0.880000</td>\n",
       "      <td>88.480000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75.000000</td>\n",
       "      <td>4.000000e+07</td>\n",
       "      <td>5.759825e+07</td>\n",
       "      <td>1.044737e+08</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>5.330000e+07</td>\n",
       "      <td>6.739077e+07</td>\n",
       "      <td>2.967500</td>\n",
       "      <td>296.537500</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>9.366622e+08</td>\n",
       "      <td>2.776345e+09</td>\n",
       "      <td>2020.000000</td>\n",
       "      <td>2.015838e+09</td>\n",
       "      <td>2.351345e+09</td>\n",
       "      <td>1799.000000</td>\n",
       "      <td>179900.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  production_budget  domestic_gross  worldwide_gross  \\\n",
       "count  5780.000000       5.780000e+03    5.233000e+03     5.414000e+03   \n",
       "mean     50.369723       3.159652e+07    4.626630e+07     9.769777e+07   \n",
       "std      28.825690       4.181652e+07    7.030032e+07     1.788742e+08   \n",
       "min       1.000000       1.100000e+03    3.880000e+02     2.600000e+01   \n",
       "25%      25.000000       5.000000e+06    4.299773e+06     7.002417e+06   \n",
       "50%      50.000000       1.700000e+07    2.199526e+07     3.331993e+07   \n",
       "75%      75.000000       4.000000e+07    5.759825e+07     1.044737e+08   \n",
       "max     100.000000       4.250000e+08    9.366622e+08     2.776345e+09   \n",
       "\n",
       "              year  foreign_gross   net_revenue          ROI         ROIpct  \\\n",
       "count  5780.000000   5.233000e+03  5.414000e+03  5414.000000    5414.000000   \n",
       "mean   2003.965398   5.450590e+07  6.438370e+07     4.109852     410.989073   \n",
       "std      12.726243   1.177941e+08  1.498716e+08    30.468579    3046.861304   \n",
       "min    1915.000000   0.000000e+00 -2.002376e+08    -1.000000    -100.000000   \n",
       "25%    2000.000000   8.992000e+03 -1.863729e+06    -0.300000     -29.902500   \n",
       "50%    2007.000000   9.400000e+06  1.189567e+07     0.880000      88.480000   \n",
       "75%    2012.000000   5.330000e+07  6.739077e+07     2.967500     296.537500   \n",
       "max    2020.000000   2.015838e+09  2.351345e+09  1799.000000  179900.000000   \n",
       "\n",
       "         month_num  \n",
       "count  5780.000000  \n",
       "mean      7.051384  \n",
       "std       3.480491  \n",
       "min       1.000000  \n",
       "25%       4.000000  \n",
       "50%       7.000000  \n",
       "75%      10.000000  \n",
       "max      12.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>month_num</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5.414000e+03</td>\n",
       "      <td>5.233000e+03</td>\n",
       "      <td>5.414000e+03</td>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5.233000e+03</td>\n",
       "      <td>5.414000e+03</td>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5414.000000</td>\n",
       "      <td>5414.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.225896</td>\n",
       "      <td>3.331407e+07</td>\n",
       "      <td>4.626630e+07</td>\n",
       "      <td>9.769777e+07</td>\n",
       "      <td>2003.598448</td>\n",
       "      <td>5.450590e+07</td>\n",
       "      <td>6.438370e+07</td>\n",
       "      <td>4.109852</td>\n",
       "      <td>410.989073</td>\n",
       "      <td>6.978020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>28.767517</td>\n",
       "      <td>4.248916e+07</td>\n",
       "      <td>7.030032e+07</td>\n",
       "      <td>1.788742e+08</td>\n",
       "      <td>12.547909</td>\n",
       "      <td>1.177941e+08</td>\n",
       "      <td>1.498716e+08</td>\n",
       "      <td>30.468579</td>\n",
       "      <td>3046.861304</td>\n",
       "      <td>3.444162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.100000e+03</td>\n",
       "      <td>3.880000e+02</td>\n",
       "      <td>2.600000e+01</td>\n",
       "      <td>1915.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-2.002376e+08</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-100.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>6.000000e+06</td>\n",
       "      <td>4.299773e+06</td>\n",
       "      <td>7.002417e+06</td>\n",
       "      <td>1999.000000</td>\n",
       "      <td>8.992000e+03</td>\n",
       "      <td>-1.863729e+06</td>\n",
       "      <td>-0.300000</td>\n",
       "      <td>-29.902500</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>1.900000e+07</td>\n",
       "      <td>2.199526e+07</td>\n",
       "      <td>3.331993e+07</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>9.400000e+06</td>\n",
       "      <td>1.189567e+07</td>\n",
       "      <td>0.880000</td>\n",
       "      <td>88.480000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75.000000</td>\n",
       "      <td>4.200000e+07</td>\n",
       "      <td>5.759825e+07</td>\n",
       "      <td>1.044737e+08</td>\n",
       "      <td>2012.000000</td>\n",
       "      <td>5.330000e+07</td>\n",
       "      <td>6.739077e+07</td>\n",
       "      <td>2.967500</td>\n",
       "      <td>296.537500</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>9.366622e+08</td>\n",
       "      <td>2.776345e+09</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>2.015838e+09</td>\n",
       "      <td>2.351345e+09</td>\n",
       "      <td>1799.000000</td>\n",
       "      <td>179900.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  production_budget  domestic_gross  worldwide_gross  \\\n",
       "count  5414.000000       5.414000e+03    5.233000e+03     5.414000e+03   \n",
       "mean     50.225896       3.331407e+07    4.626630e+07     9.769777e+07   \n",
       "std      28.767517       4.248916e+07    7.030032e+07     1.788742e+08   \n",
       "min       1.000000       1.100000e+03    3.880000e+02     2.600000e+01   \n",
       "25%      25.000000       6.000000e+06    4.299773e+06     7.002417e+06   \n",
       "50%      50.000000       1.900000e+07    2.199526e+07     3.331993e+07   \n",
       "75%      75.000000       4.200000e+07    5.759825e+07     1.044737e+08   \n",
       "max     100.000000       4.250000e+08    9.366622e+08     2.776345e+09   \n",
       "\n",
       "              year  foreign_gross   net_revenue          ROI         ROIpct  \\\n",
       "count  5414.000000   5.233000e+03  5.414000e+03  5414.000000    5414.000000   \n",
       "mean   2003.598448   5.450590e+07  6.438370e+07     4.109852     410.989073   \n",
       "std      12.547909   1.177941e+08  1.498716e+08    30.468579    3046.861304   \n",
       "min    1915.000000   0.000000e+00 -2.002376e+08    -1.000000    -100.000000   \n",
       "25%    1999.000000   8.992000e+03 -1.863729e+06    -0.300000     -29.902500   \n",
       "50%    2006.000000   9.400000e+06  1.189567e+07     0.880000      88.480000   \n",
       "75%    2012.000000   5.330000e+07  6.739077e+07     2.967500     296.537500   \n",
       "max    2019.000000   2.015838e+09  2.351345e+09  1799.000000  179900.000000   \n",
       "\n",
       "         month_num  \n",
       "count  5414.000000  \n",
       "mean      6.978020  \n",
       "std       3.444162  \n",
       "min       1.000000  \n",
       "25%       4.000000  \n",
       "50%       7.000000  \n",
       "75%      10.000000  \n",
       "max      12.000000  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q2: Is movie industry profitable? Analysis w/o outliers and from year 2000 - present\n",
    "\n",
    "# Create ROI df, remove NaN\n",
    "df_roi = df_financials[df_financials['ROI'].notnull()]\n",
    "display(df_financials.describe())\n",
    "df_roi.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1.0, 7.16)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Outlier detection\n",
    "min_roi_threshold, max_roi_threshold = df_roi['ROI'].quantile([0.00, 0.90]).round(2)\n",
    "min_roi_threshold, max_roi_threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "      <th>month_num</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10 Cloverfield Lane</td>\n",
       "      <td>54</td>\n",
       "      <td>2016-03-11</td>\n",
       "      <td>5000000.0</td>\n",
       "      <td>72082999.0</td>\n",
       "      <td>108286422.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>36203423.0</td>\n",
       "      <td>103286422.0</td>\n",
       "      <td>20.66</td>\n",
       "      <td>2065.73</td>\n",
       "      <td>10 Cloverfield Lane-2016</td>\n",
       "      <td>3</td>\n",
       "      <td>Mar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>12 Years a Slave</td>\n",
       "      <td>18</td>\n",
       "      <td>2013-10-18</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>56671993.0</td>\n",
       "      <td>181025343.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>FoxS</td>\n",
       "      <td>124353350.0</td>\n",
       "      <td>161025343.0</td>\n",
       "      <td>8.05</td>\n",
       "      <td>805.13</td>\n",
       "      <td>12 Years a Slave-2013</td>\n",
       "      <td>10</td>\n",
       "      <td>Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>20 Dates</td>\n",
       "      <td>9</td>\n",
       "      <td>1999-02-26</td>\n",
       "      <td>66000.0</td>\n",
       "      <td>541636.0</td>\n",
       "      <td>602920.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>61284.0</td>\n",
       "      <td>536920.0</td>\n",
       "      <td>8.14</td>\n",
       "      <td>813.52</td>\n",
       "      <td>20 Dates-1999</td>\n",
       "      <td>2</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>20,000 Leagues Under the Sea</td>\n",
       "      <td>15</td>\n",
       "      <td>1916-12-24</td>\n",
       "      <td>200000.0</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>1916</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800000.0</td>\n",
       "      <td>39.00</td>\n",
       "      <td>3900.00</td>\n",
       "      <td>20,000 Leagues Under the Sea-1916</td>\n",
       "      <td>12</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>2016: Obamaâs America</td>\n",
       "      <td>13</td>\n",
       "      <td>2012-07-13</td>\n",
       "      <td>2500000.0</td>\n",
       "      <td>33349941.0</td>\n",
       "      <td>33349941.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30849941.0</td>\n",
       "      <td>12.34</td>\n",
       "      <td>1234.00</td>\n",
       "      <td>2016: Obamaâs America-2012</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5739</th>\n",
       "      <td>You Only Live Twice</td>\n",
       "      <td>54</td>\n",
       "      <td>1967-06-13</td>\n",
       "      <td>9500000.0</td>\n",
       "      <td>43100000.0</td>\n",
       "      <td>111600000.0</td>\n",
       "      <td>1967</td>\n",
       "      <td>NaN</td>\n",
       "      <td>68500000.0</td>\n",
       "      <td>102100000.0</td>\n",
       "      <td>10.75</td>\n",
       "      <td>1074.74</td>\n",
       "      <td>You Only Live Twice-1967</td>\n",
       "      <td>6</td>\n",
       "      <td>Jun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5741</th>\n",
       "      <td>You're Next</td>\n",
       "      <td>17</td>\n",
       "      <td>2013-08-23</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>18494006.0</td>\n",
       "      <td>26887177.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>LGF</td>\n",
       "      <td>8393171.0</td>\n",
       "      <td>25887177.0</td>\n",
       "      <td>25.89</td>\n",
       "      <td>2588.72</td>\n",
       "      <td>You're Next-2013</td>\n",
       "      <td>8</td>\n",
       "      <td>Aug</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5745</th>\n",
       "      <td>Young Frankenstein</td>\n",
       "      <td>84</td>\n",
       "      <td>1974-12-15</td>\n",
       "      <td>2800000.0</td>\n",
       "      <td>86300000.0</td>\n",
       "      <td>86300000.0</td>\n",
       "      <td>1974</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>83500000.0</td>\n",
       "      <td>29.82</td>\n",
       "      <td>2982.14</td>\n",
       "      <td>Young Frankenstein-1974</td>\n",
       "      <td>12</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5749</th>\n",
       "      <td>Your Sister's Sister</td>\n",
       "      <td>73</td>\n",
       "      <td>2012-06-15</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>1597486.0</td>\n",
       "      <td>3090593.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>IFC</td>\n",
       "      <td>1493107.0</td>\n",
       "      <td>2970593.0</td>\n",
       "      <td>24.75</td>\n",
       "      <td>2475.49</td>\n",
       "      <td>Your Sister's Sister-2012</td>\n",
       "      <td>6</td>\n",
       "      <td>Jun</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5773</th>\n",
       "      <td>[Rec]</td>\n",
       "      <td>82</td>\n",
       "      <td>2009-07-14</td>\n",
       "      <td>2100000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23266821.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21166821.0</td>\n",
       "      <td>10.08</td>\n",
       "      <td>1007.94</td>\n",
       "      <td>[Rec]-2009</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>541 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             title  id release_date  production_budget  \\\n",
       "2              10 Cloverfield Lane  54   2016-03-11          5000000.0   \n",
       "13                12 Years a Slave  18   2013-10-18         20000000.0   \n",
       "30                        20 Dates   9   1999-02-26            66000.0   \n",
       "33    20,000 Leagues Under the Sea  15   1916-12-24           200000.0   \n",
       "37         2016: Obamaâs America  13   2012-07-13          2500000.0   \n",
       "...                            ...  ..          ...                ...   \n",
       "5739           You Only Live Twice  54   1967-06-13          9500000.0   \n",
       "5741                   You're Next  17   2013-08-23          1000000.0   \n",
       "5745            Young Frankenstein  84   1974-12-15          2800000.0   \n",
       "5749          Your Sister's Sister  73   2012-06-15           120000.0   \n",
       "5773                         [Rec]  82   2009-07-14          2100000.0   \n",
       "\n",
       "      domestic_gross  worldwide_gross  year studio  foreign_gross  \\\n",
       "2         72082999.0      108286422.0  2016   Par.     36203423.0   \n",
       "13        56671993.0      181025343.0  2013   FoxS    124353350.0   \n",
       "30          541636.0         602920.0  1999    NaN        61284.0   \n",
       "33         8000000.0        8000000.0  1916    NaN            0.0   \n",
       "37        33349941.0       33349941.0  2012    NaN            0.0   \n",
       "...              ...              ...   ...    ...            ...   \n",
       "5739      43100000.0      111600000.0  1967    NaN     68500000.0   \n",
       "5741      18494006.0       26887177.0  2013    LGF      8393171.0   \n",
       "5745      86300000.0       86300000.0  1974    NaN            0.0   \n",
       "5749       1597486.0        3090593.0  2012    IFC      1493107.0   \n",
       "5773             NaN       23266821.0  2009    NaN            NaN   \n",
       "\n",
       "      net_revenue    ROI   ROIpct                           title_yr  \\\n",
       "2     103286422.0  20.66  2065.73           10 Cloverfield Lane-2016   \n",
       "13    161025343.0   8.05   805.13              12 Years a Slave-2013   \n",
       "30       536920.0   8.14   813.52                      20 Dates-1999   \n",
       "33      7800000.0  39.00  3900.00  20,000 Leagues Under the Sea-1916   \n",
       "37     30849941.0  12.34  1234.00       2016: Obamaâs America-2012   \n",
       "...           ...    ...      ...                                ...   \n",
       "5739  102100000.0  10.75  1074.74           You Only Live Twice-1967   \n",
       "5741   25887177.0  25.89  2588.72                   You're Next-2013   \n",
       "5745   83500000.0  29.82  2982.14            Young Frankenstein-1974   \n",
       "5749    2970593.0  24.75  2475.49          Your Sister's Sister-2012   \n",
       "5773   21166821.0  10.08  1007.94                         [Rec]-2009   \n",
       "\n",
       "      month_num month  \n",
       "2             3   Mar  \n",
       "13           10   Oct  \n",
       "30            2   Feb  \n",
       "33           12   Dec  \n",
       "37            7   Jul  \n",
       "...         ...   ...  \n",
       "5739          6   Jun  \n",
       "5741          8   Aug  \n",
       "5745         12   Dec  \n",
       "5749          6   Jun  \n",
       "5773          7   Jul  \n",
       "\n",
       "[541 rows x 15 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_roi[df_roi['ROI'] > max_roi_threshold]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "      <th>month_num</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>A Dogâs Purpose</td>\n",
       "      <td>86</td>\n",
       "      <td>2017-01-27</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>64321890.0</td>\n",
       "      <td>203671625.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>139349735.0</td>\n",
       "      <td>178671625.0</td>\n",
       "      <td>7.15</td>\n",
       "      <td>714.69</td>\n",
       "      <td>A Dogâs Purpose-2017</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4425</th>\n",
       "      <td>The Descent</td>\n",
       "      <td>1</td>\n",
       "      <td>2006-08-04</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>26024456.0</td>\n",
       "      <td>57051053.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31026597.0</td>\n",
       "      <td>50051053.0</td>\n",
       "      <td>7.15</td>\n",
       "      <td>715.02</td>\n",
       "      <td>The Descent-2006</td>\n",
       "      <td>8</td>\n",
       "      <td>Aug</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4790</th>\n",
       "      <td>The Lord of the Rings: The Fellowship of the Ring</td>\n",
       "      <td>43</td>\n",
       "      <td>2001-12-19</td>\n",
       "      <td>109000000.0</td>\n",
       "      <td>315544750.0</td>\n",
       "      <td>887210985.0</td>\n",
       "      <td>2001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>571666235.0</td>\n",
       "      <td>778210985.0</td>\n",
       "      <td>7.14</td>\n",
       "      <td>713.96</td>\n",
       "      <td>The Lord of the Rings: The Fellowship of the R...</td>\n",
       "      <td>12</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4757</th>\n",
       "      <td>The Legend of God's Gun</td>\n",
       "      <td>37</td>\n",
       "      <td>2008-07-18</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>243768.0</td>\n",
       "      <td>243768.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>213768.0</td>\n",
       "      <td>7.13</td>\n",
       "      <td>712.56</td>\n",
       "      <td>The Legend of God's Gun-2008</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5074</th>\n",
       "      <td>The Signal</td>\n",
       "      <td>19</td>\n",
       "      <td>2008-02-22</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>251150.0</td>\n",
       "      <td>406299.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "      <td>155149.0</td>\n",
       "      <td>356299.0</td>\n",
       "      <td>7.13</td>\n",
       "      <td>712.60</td>\n",
       "      <td>The Signal-2008</td>\n",
       "      <td>2</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2055</th>\n",
       "      <td>Hotel Transylvania 3: Summer Vacation</td>\n",
       "      <td>77</td>\n",
       "      <td>2018-07-13</td>\n",
       "      <td>65000000.0</td>\n",
       "      <td>167500092.0</td>\n",
       "      <td>527079962.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>Sony</td>\n",
       "      <td>359579870.0</td>\n",
       "      <td>462079962.0</td>\n",
       "      <td>7.11</td>\n",
       "      <td>710.89</td>\n",
       "      <td>Hotel Transylvania 3: Summer Vacation-2018</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1800</th>\n",
       "      <td>Good Night, and Good Luck</td>\n",
       "      <td>98</td>\n",
       "      <td>2005-10-07</td>\n",
       "      <td>7000000.0</td>\n",
       "      <td>31501218.0</td>\n",
       "      <td>56586901.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25085683.0</td>\n",
       "      <td>49586901.0</td>\n",
       "      <td>7.08</td>\n",
       "      <td>708.38</td>\n",
       "      <td>Good Night, and Good Luck-2005</td>\n",
       "      <td>10</td>\n",
       "      <td>Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3992</th>\n",
       "      <td>Star Wars: The Clone Wars</td>\n",
       "      <td>32</td>\n",
       "      <td>2008-08-15</td>\n",
       "      <td>8500000.0</td>\n",
       "      <td>35161554.0</td>\n",
       "      <td>68695443.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33533889.0</td>\n",
       "      <td>60195443.0</td>\n",
       "      <td>7.08</td>\n",
       "      <td>708.18</td>\n",
       "      <td>Star Wars: The Clone Wars-2008</td>\n",
       "      <td>8</td>\n",
       "      <td>Aug</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3067</th>\n",
       "      <td>Nochnoy dozor</td>\n",
       "      <td>70</td>\n",
       "      <td>2006-02-17</td>\n",
       "      <td>4200000.0</td>\n",
       "      <td>1502188.0</td>\n",
       "      <td>33913542.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32411354.0</td>\n",
       "      <td>29713542.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>707.47</td>\n",
       "      <td>Nochnoy dozor-2006</td>\n",
       "      <td>2</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5673</th>\n",
       "      <td>Winter's Bone</td>\n",
       "      <td>8</td>\n",
       "      <td>2010-06-11</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>6531503.0</td>\n",
       "      <td>16131551.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>RAtt.</td>\n",
       "      <td>9600048.0</td>\n",
       "      <td>14131551.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>706.58</td>\n",
       "      <td>Winter's Bone-2010</td>\n",
       "      <td>6</td>\n",
       "      <td>Jun</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  title  id release_date  \\\n",
       "103                                   A Dogâs Purpose  86   2017-01-27   \n",
       "4425                                        The Descent   1   2006-08-04   \n",
       "4790  The Lord of the Rings: The Fellowship of the Ring  43   2001-12-19   \n",
       "4757                            The Legend of God's Gun  37   2008-07-18   \n",
       "5074                                         The Signal  19   2008-02-22   \n",
       "2055              Hotel Transylvania 3: Summer Vacation  77   2018-07-13   \n",
       "1800                          Good Night, and Good Luck  98   2005-10-07   \n",
       "3992                          Star Wars: The Clone Wars  32   2008-08-15   \n",
       "3067                                      Nochnoy dozor  70   2006-02-17   \n",
       "5673                                      Winter's Bone   8   2010-06-11   \n",
       "\n",
       "      production_budget  domestic_gross  worldwide_gross  year studio  \\\n",
       "103          25000000.0      64321890.0      203671625.0  2017    NaN   \n",
       "4425          7000000.0      26024456.0       57051053.0  2006    NaN   \n",
       "4790        109000000.0     315544750.0      887210985.0  2001    NaN   \n",
       "4757            30000.0        243768.0         243768.0  2008    NaN   \n",
       "5074            50000.0        251150.0         406299.0  2008    NaN   \n",
       "2055         65000000.0     167500092.0      527079962.0  2018   Sony   \n",
       "1800          7000000.0      31501218.0       56586901.0  2005    NaN   \n",
       "3992          8500000.0      35161554.0       68695443.0  2008    NaN   \n",
       "3067          4200000.0       1502188.0       33913542.0  2006    NaN   \n",
       "5673          2000000.0       6531503.0       16131551.0  2010  RAtt.   \n",
       "\n",
       "      foreign_gross  net_revenue   ROI  ROIpct  \\\n",
       "103     139349735.0  178671625.0  7.15  714.69   \n",
       "4425     31026597.0   50051053.0  7.15  715.02   \n",
       "4790    571666235.0  778210985.0  7.14  713.96   \n",
       "4757            0.0     213768.0  7.13  712.56   \n",
       "5074       155149.0     356299.0  7.13  712.60   \n",
       "2055    359579870.0  462079962.0  7.11  710.89   \n",
       "1800     25085683.0   49586901.0  7.08  708.38   \n",
       "3992     33533889.0   60195443.0  7.08  708.18   \n",
       "3067     32411354.0   29713542.0  7.07  707.47   \n",
       "5673      9600048.0   14131551.0  7.07  706.58   \n",
       "\n",
       "                                               title_yr  month_num month  \n",
       "103                              A Dogâs Purpose-2017          1   Jan  \n",
       "4425                                   The Descent-2006          8   Aug  \n",
       "4790  The Lord of the Rings: The Fellowship of the R...         12   Dec  \n",
       "4757                       The Legend of God's Gun-2008          7   Jul  \n",
       "5074                                    The Signal-2008          2   Feb  \n",
       "2055         Hotel Transylvania 3: Summer Vacation-2018          7   Jul  \n",
       "1800                     Good Night, and Good Luck-2005         10   Oct  \n",
       "3992                     Star Wars: The Clone Wars-2008          8   Aug  \n",
       "3067                                 Nochnoy dozor-2006          2   Feb  \n",
       "5673                                 Winter's Bone-2010          6   Jun  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# new DF without ROI outliers and with movies from year 2000 - present\n",
    "df_roi = df_roi[(df_roi['ROI'] < max_roi_threshold) & \n",
    "                       (df_roi['ROI'] > min_roi_threshold) & \n",
    "                       (df_roi['year'] >= 2000)]\n",
    "display(df_roi.sort_values('ROI', ascending = False).head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x7fc2017f5e10>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6,6))\n",
    "ax.hist(df_roi['ROI'], bins='auto', alpha = 0.5)\n",
    "ax.set_title('Distribution of ROI')\n",
    "ax.set_xlabel('ROI')\n",
    "ax.set_ylabel('Number of Movies')\n",
    "ax.axvline(df_roi['ROI'].mean(), color = 'black')\n",
    "ax.axvline(df_roi['ROI'].median(), color = 'red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mean      1.115363\n",
       "median    0.630000\n",
       "std       1.873178\n",
       "Name: ROI, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_roi.ROI.apply(['mean', 'median', 'std']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc180b7e898>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_roi.boxplot(column=['ROI'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>id</th>\n",
       "      <th>release_date</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>year</th>\n",
       "      <th>studio</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>title_yr</th>\n",
       "      <th>month_num</th>\n",
       "      <th>month</th>\n",
       "      <th>ROI_buckets</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(500) Days of Summer</td>\n",
       "      <td>55</td>\n",
       "      <td>2009-07-17</td>\n",
       "      <td>7500000.0</td>\n",
       "      <td>32425665.0</td>\n",
       "      <td>34439060.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2013395.0</td>\n",
       "      <td>26939060.0</td>\n",
       "      <td>3.59</td>\n",
       "      <td>359.19</td>\n",
       "      <td>(500) Days of Summer-2009</td>\n",
       "      <td>7</td>\n",
       "      <td>Jul</td>\n",
       "      <td>300% - 400%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10,000 B.C.</td>\n",
       "      <td>51</td>\n",
       "      <td>2008-03-07</td>\n",
       "      <td>105000000.0</td>\n",
       "      <td>94784201.0</td>\n",
       "      <td>269065678.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>NaN</td>\n",
       "      <td>174281477.0</td>\n",
       "      <td>164065678.0</td>\n",
       "      <td>1.56</td>\n",
       "      <td>156.25</td>\n",
       "      <td>10,000 B.C.-2008</td>\n",
       "      <td>3</td>\n",
       "      <td>Mar</td>\n",
       "      <td>100% - 200%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>102 Dalmatians</td>\n",
       "      <td>6</td>\n",
       "      <td>2000-11-22</td>\n",
       "      <td>85000000.0</td>\n",
       "      <td>66941559.0</td>\n",
       "      <td>66941559.0</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-18058441.0</td>\n",
       "      <td>-0.21</td>\n",
       "      <td>-21.25</td>\n",
       "      <td>102 Dalmatians-2000</td>\n",
       "      <td>11</td>\n",
       "      <td>Nov</td>\n",
       "      <td>Not profitable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10th &amp; Wolf</td>\n",
       "      <td>32</td>\n",
       "      <td>2006-08-18</td>\n",
       "      <td>8000000.0</td>\n",
       "      <td>54702.0</td>\n",
       "      <td>143782.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>NaN</td>\n",
       "      <td>89080.0</td>\n",
       "      <td>-7856218.0</td>\n",
       "      <td>-0.98</td>\n",
       "      <td>-98.20</td>\n",
       "      <td>10th &amp; Wolf-2006</td>\n",
       "      <td>8</td>\n",
       "      <td>Aug</td>\n",
       "      <td>Not profitable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12 Rounds</td>\n",
       "      <td>37</td>\n",
       "      <td>2009-03-27</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>12234694.0</td>\n",
       "      <td>17306648.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5071954.0</td>\n",
       "      <td>-2693352.0</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-13.47</td>\n",
       "      <td>12 Rounds-2009</td>\n",
       "      <td>3</td>\n",
       "      <td>Mar</td>\n",
       "      <td>Not profitable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12 Strong</td>\n",
       "      <td>64</td>\n",
       "      <td>2018-01-19</td>\n",
       "      <td>35000000.0</td>\n",
       "      <td>45819713.0</td>\n",
       "      <td>71118378.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>WB</td>\n",
       "      <td>25298665.0</td>\n",
       "      <td>36118378.0</td>\n",
       "      <td>1.03</td>\n",
       "      <td>103.20</td>\n",
       "      <td>12 Strong-2018</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "      <td>100% - 200%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>127 Hours</td>\n",
       "      <td>6</td>\n",
       "      <td>2010-11-05</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>18335230.0</td>\n",
       "      <td>60217171.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>FoxS</td>\n",
       "      <td>41881941.0</td>\n",
       "      <td>42217171.0</td>\n",
       "      <td>2.35</td>\n",
       "      <td>234.54</td>\n",
       "      <td>127 Hours-2010</td>\n",
       "      <td>11</td>\n",
       "      <td>Nov</td>\n",
       "      <td>200% - 300%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>13 Going On 30</td>\n",
       "      <td>96</td>\n",
       "      <td>2004-04-23</td>\n",
       "      <td>37000000.0</td>\n",
       "      <td>57139723.0</td>\n",
       "      <td>97658712.0</td>\n",
       "      <td>2004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>40518989.0</td>\n",
       "      <td>60658712.0</td>\n",
       "      <td>1.64</td>\n",
       "      <td>163.94</td>\n",
       "      <td>13 Going On 30-2004</td>\n",
       "      <td>4</td>\n",
       "      <td>Apr</td>\n",
       "      <td>100% - 200%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13 Hours: The Secret Soldiers of Benghazi</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-01-15</td>\n",
       "      <td>50000000.0</td>\n",
       "      <td>52853219.0</td>\n",
       "      <td>69411370.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>Par.</td>\n",
       "      <td>16558151.0</td>\n",
       "      <td>19411370.0</td>\n",
       "      <td>0.39</td>\n",
       "      <td>38.82</td>\n",
       "      <td>13 Hours: The Secret Soldiers of Benghazi-2016</td>\n",
       "      <td>1</td>\n",
       "      <td>Jan</td>\n",
       "      <td>0 - 100%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>13 Sins</td>\n",
       "      <td>51</td>\n",
       "      <td>2014-04-18</td>\n",
       "      <td>4000000.0</td>\n",
       "      <td>9134.0</td>\n",
       "      <td>47552.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>RTWC</td>\n",
       "      <td>38418.0</td>\n",
       "      <td>-3952448.0</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>-98.81</td>\n",
       "      <td>13 Sins-2014</td>\n",
       "      <td>4</td>\n",
       "      <td>Apr</td>\n",
       "      <td>Not profitable</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        title  id release_date  \\\n",
       "1                        (500) Days of Summer  55   2009-07-17   \n",
       "5                                 10,000 B.C.  51   2008-03-07   \n",
       "6                              102 Dalmatians   6   2000-11-22   \n",
       "7                                 10th & Wolf  32   2006-08-18   \n",
       "11                                  12 Rounds  37   2009-03-27   \n",
       "12                                  12 Strong  64   2018-01-19   \n",
       "14                                  127 Hours   6   2010-11-05   \n",
       "15                             13 Going On 30  96   2004-04-23   \n",
       "16  13 Hours: The Secret Soldiers of Benghazi  30   2016-01-15   \n",
       "17                                    13 Sins  51   2014-04-18   \n",
       "\n",
       "    production_budget  domestic_gross  worldwide_gross  year studio  \\\n",
       "1           7500000.0      32425665.0       34439060.0  2009    NaN   \n",
       "5         105000000.0      94784201.0      269065678.0  2008    NaN   \n",
       "6          85000000.0      66941559.0       66941559.0  2000    NaN   \n",
       "7           8000000.0         54702.0         143782.0  2006    NaN   \n",
       "11         20000000.0      12234694.0       17306648.0  2009    NaN   \n",
       "12         35000000.0      45819713.0       71118378.0  2018     WB   \n",
       "14         18000000.0      18335230.0       60217171.0  2010   FoxS   \n",
       "15         37000000.0      57139723.0       97658712.0  2004    NaN   \n",
       "16         50000000.0      52853219.0       69411370.0  2016   Par.   \n",
       "17          4000000.0          9134.0          47552.0  2014   RTWC   \n",
       "\n",
       "    foreign_gross  net_revenue   ROI  ROIpct  \\\n",
       "1       2013395.0   26939060.0  3.59  359.19   \n",
       "5     174281477.0  164065678.0  1.56  156.25   \n",
       "6             0.0  -18058441.0 -0.21  -21.25   \n",
       "7         89080.0   -7856218.0 -0.98  -98.20   \n",
       "11      5071954.0   -2693352.0 -0.13  -13.47   \n",
       "12     25298665.0   36118378.0  1.03  103.20   \n",
       "14     41881941.0   42217171.0  2.35  234.54   \n",
       "15     40518989.0   60658712.0  1.64  163.94   \n",
       "16     16558151.0   19411370.0  0.39   38.82   \n",
       "17        38418.0   -3952448.0 -0.99  -98.81   \n",
       "\n",
       "                                          title_yr  month_num month  \\\n",
       "1                        (500) Days of Summer-2009          7   Jul   \n",
       "5                                 10,000 B.C.-2008          3   Mar   \n",
       "6                              102 Dalmatians-2000         11   Nov   \n",
       "7                                 10th & Wolf-2006          8   Aug   \n",
       "11                                  12 Rounds-2009          3   Mar   \n",
       "12                                  12 Strong-2018          1   Jan   \n",
       "14                                  127 Hours-2010         11   Nov   \n",
       "15                             13 Going On 30-2004          4   Apr   \n",
       "16  13 Hours: The Secret Soldiers of Benghazi-2016          1   Jan   \n",
       "17                                    13 Sins-2014          4   Apr   \n",
       "\n",
       "       ROI_buckets  \n",
       "1      300% - 400%  \n",
       "5      100% - 200%  \n",
       "6   Not profitable  \n",
       "7   Not profitable  \n",
       "11  Not profitable  \n",
       "12     100% - 200%  \n",
       "14     200% - 300%  \n",
       "15     100% - 200%  \n",
       "16        0 - 100%  \n",
       "17  Not profitable  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3677 entries, 1 to 5781\n",
      "Data columns (total 16 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   title              3677 non-null   object        \n",
      " 1   id                 3677 non-null   int64         \n",
      " 2   release_date       3677 non-null   datetime64[ns]\n",
      " 3   production_budget  3677 non-null   float64       \n",
      " 4   domestic_gross     3517 non-null   float64       \n",
      " 5   worldwide_gross    3677 non-null   float64       \n",
      " 6   year               3677 non-null   int64         \n",
      " 7   studio             1106 non-null   object        \n",
      " 8   foreign_gross      3517 non-null   float64       \n",
      " 9   net_revenue        3677 non-null   float64       \n",
      " 10  ROI                3677 non-null   float64       \n",
      " 11  ROIpct             3677 non-null   float64       \n",
      " 12  title_yr           3677 non-null   object        \n",
      " 13  month_num          3677 non-null   int64         \n",
      " 14  month              3677 non-null   object        \n",
      " 15  ROI_buckets        3677 non-null   object        \n",
      "dtypes: datetime64[ns](1), float64(7), int64(3), object(5)\n",
      "memory usage: 488.4+ KB\n"
     ]
    }
   ],
   "source": [
    "#create new ROI buckets column \n",
    "def ROI_buckets(r):\n",
    "    if r < 0: \n",
    "        return 'Not profitable'\n",
    "    if r <= 1 : \n",
    "        return '0 - 100%'\n",
    "    elif r <= 2: \n",
    "        return '100% - 200%'\n",
    "    elif r <= 3: \n",
    "        return '200% - 300%'\n",
    "    elif r <= 4: \n",
    "        return '300% - 400%'\n",
    "    elif r <= 5: \n",
    "        return '400% - 500%'\n",
    "    elif r <= 6: \n",
    "        return '500% - 600%'    \n",
    "    elif r <= 7:\n",
    "        return '600% - 700&'\n",
    "    elif r <= 8:\n",
    "        return '700% - 800%'\n",
    "    else: \n",
    "        return 'Other'\n",
    "\n",
    "df_roi['ROI_buckets'] = df_roi['ROI'].apply(ROI_buckets)\n",
    "display(df_roi.head(10))\n",
    "df_roi.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year  ROI_buckets   \n",
       "2018  400% - 500%       0.048780\n",
       "      700% - 800%       0.008130\n",
       "2019  Not profitable    0.340909\n",
       "      0 - 100%          0.250000\n",
       "      200% - 300%       0.159091\n",
       "      100% - 200%       0.090909\n",
       "      300% - 400%       0.068182\n",
       "      500% - 600%       0.045455\n",
       "      400% - 500%       0.022727\n",
       "      600% - 700&       0.022727\n",
       "Name: ROI_buckets, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Distribution of ROI by year\n",
    "df_roi_yr = df_roi.groupby('year')['ROI_buckets'].value_counts(normalize = True)\n",
    "df_roi_yr.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>month_num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>51.0</td>\n",
       "      <td>23500000.0</td>\n",
       "      <td>20752058.5</td>\n",
       "      <td>32831338.0</td>\n",
       "      <td>7052479.5</td>\n",
       "      <td>3897150.5</td>\n",
       "      <td>0.430</td>\n",
       "      <td>42.905</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2001</th>\n",
       "      <td>53.0</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>25288103.0</td>\n",
       "      <td>29406132.0</td>\n",
       "      <td>4910354.0</td>\n",
       "      <td>5858355.0</td>\n",
       "      <td>0.480</td>\n",
       "      <td>47.790</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2002</th>\n",
       "      <td>49.5</td>\n",
       "      <td>21000000.0</td>\n",
       "      <td>19119407.0</td>\n",
       "      <td>28643729.5</td>\n",
       "      <td>4862618.0</td>\n",
       "      <td>6002986.5</td>\n",
       "      <td>0.375</td>\n",
       "      <td>37.625</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2003</th>\n",
       "      <td>43.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>19480739.0</td>\n",
       "      <td>27676370.0</td>\n",
       "      <td>8784561.0</td>\n",
       "      <td>6797282.0</td>\n",
       "      <td>0.405</td>\n",
       "      <td>40.205</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2004</th>\n",
       "      <td>50.5</td>\n",
       "      <td>26000000.0</td>\n",
       "      <td>21092751.0</td>\n",
       "      <td>34607966.0</td>\n",
       "      <td>10373171.5</td>\n",
       "      <td>3609476.5</td>\n",
       "      <td>0.390</td>\n",
       "      <td>38.800</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005</th>\n",
       "      <td>47.0</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>20370488.5</td>\n",
       "      <td>38273443.0</td>\n",
       "      <td>15122498.0</td>\n",
       "      <td>6977220.0</td>\n",
       "      <td>0.390</td>\n",
       "      <td>39.015</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006</th>\n",
       "      <td>47.5</td>\n",
       "      <td>17750000.0</td>\n",
       "      <td>16099104.5</td>\n",
       "      <td>27834762.5</td>\n",
       "      <td>9637502.5</td>\n",
       "      <td>8190612.5</td>\n",
       "      <td>0.465</td>\n",
       "      <td>46.690</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007</th>\n",
       "      <td>46.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>15036130.5</td>\n",
       "      <td>30261293.0</td>\n",
       "      <td>16713384.5</td>\n",
       "      <td>5238354.0</td>\n",
       "      <td>0.350</td>\n",
       "      <td>34.670</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008</th>\n",
       "      <td>50.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>15298133.0</td>\n",
       "      <td>30894247.0</td>\n",
       "      <td>11628440.0</td>\n",
       "      <td>9686263.0</td>\n",
       "      <td>0.640</td>\n",
       "      <td>63.960</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009</th>\n",
       "      <td>45.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>20727036.5</td>\n",
       "      <td>36736304.0</td>\n",
       "      <td>19652391.5</td>\n",
       "      <td>9292160.5</td>\n",
       "      <td>0.645</td>\n",
       "      <td>64.565</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>47.0</td>\n",
       "      <td>18000000.0</td>\n",
       "      <td>13601929.0</td>\n",
       "      <td>25941437.0</td>\n",
       "      <td>12896617.0</td>\n",
       "      <td>7719879.0</td>\n",
       "      <td>0.530</td>\n",
       "      <td>53.160</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011</th>\n",
       "      <td>52.0</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>21302340.0</td>\n",
       "      <td>38070192.0</td>\n",
       "      <td>16410548.0</td>\n",
       "      <td>12847078.0</td>\n",
       "      <td>0.765</td>\n",
       "      <td>76.660</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012</th>\n",
       "      <td>52.0</td>\n",
       "      <td>24200000.0</td>\n",
       "      <td>19106196.0</td>\n",
       "      <td>41294674.0</td>\n",
       "      <td>18500208.5</td>\n",
       "      <td>13374700.0</td>\n",
       "      <td>0.820</td>\n",
       "      <td>82.190</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013</th>\n",
       "      <td>49.5</td>\n",
       "      <td>22000000.0</td>\n",
       "      <td>22537881.0</td>\n",
       "      <td>47259977.0</td>\n",
       "      <td>25607930.0</td>\n",
       "      <td>19819614.5</td>\n",
       "      <td>1.115</td>\n",
       "      <td>111.345</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014</th>\n",
       "      <td>47.5</td>\n",
       "      <td>19000000.0</td>\n",
       "      <td>25167749.0</td>\n",
       "      <td>35444612.5</td>\n",
       "      <td>12359032.0</td>\n",
       "      <td>13859886.0</td>\n",
       "      <td>0.895</td>\n",
       "      <td>89.115</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015</th>\n",
       "      <td>47.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>17766658.0</td>\n",
       "      <td>30725430.5</td>\n",
       "      <td>15855043.0</td>\n",
       "      <td>8074976.0</td>\n",
       "      <td>0.390</td>\n",
       "      <td>38.810</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>47.0</td>\n",
       "      <td>22750000.0</td>\n",
       "      <td>21587519.0</td>\n",
       "      <td>39867403.5</td>\n",
       "      <td>21683203.0</td>\n",
       "      <td>15962184.0</td>\n",
       "      <td>0.945</td>\n",
       "      <td>94.200</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>51.0</td>\n",
       "      <td>29200000.0</td>\n",
       "      <td>30014534.0</td>\n",
       "      <td>47879572.0</td>\n",
       "      <td>29067867.0</td>\n",
       "      <td>22651864.0</td>\n",
       "      <td>1.230</td>\n",
       "      <td>122.990</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>52.0</td>\n",
       "      <td>32000000.0</td>\n",
       "      <td>40054284.0</td>\n",
       "      <td>66295121.0</td>\n",
       "      <td>26258314.5</td>\n",
       "      <td>33866088.0</td>\n",
       "      <td>1.190</td>\n",
       "      <td>119.200</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>51.5</td>\n",
       "      <td>40000000.0</td>\n",
       "      <td>35095904.0</td>\n",
       "      <td>42218261.5</td>\n",
       "      <td>16091339.0</td>\n",
       "      <td>14469567.0</td>\n",
       "      <td>0.375</td>\n",
       "      <td>37.360</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id production_budget domestic_gross worldwide_gross foreign_gross  \\\n",
       "     median            median         median          median        median   \n",
       "year                                                                         \n",
       "2000   51.0        23500000.0     20752058.5      32831338.0     7052479.5   \n",
       "2001   53.0        25000000.0     25288103.0      29406132.0     4910354.0   \n",
       "2002   49.5        21000000.0     19119407.0      28643729.5     4862618.0   \n",
       "2003   43.0        20000000.0     19480739.0      27676370.0     8784561.0   \n",
       "2004   50.5        26000000.0     21092751.0      34607966.0    10373171.5   \n",
       "2005   47.0        25000000.0     20370488.5      38273443.0    15122498.0   \n",
       "2006   47.5        17750000.0     16099104.5      27834762.5     9637502.5   \n",
       "2007   46.0        20000000.0     15036130.5      30261293.0    16713384.5   \n",
       "2008   50.0        20000000.0     15298133.0      30894247.0    11628440.0   \n",
       "2009   45.0        20000000.0     20727036.5      36736304.0    19652391.5   \n",
       "2010   47.0        18000000.0     13601929.0      25941437.0    12896617.0   \n",
       "2011   52.0        25000000.0     21302340.0      38070192.0    16410548.0   \n",
       "2012   52.0        24200000.0     19106196.0      41294674.0    18500208.5   \n",
       "2013   49.5        22000000.0     22537881.0      47259977.0    25607930.0   \n",
       "2014   47.5        19000000.0     25167749.0      35444612.5    12359032.0   \n",
       "2015   47.0        20000000.0     17766658.0      30725430.5    15855043.0   \n",
       "2016   47.0        22750000.0     21587519.0      39867403.5    21683203.0   \n",
       "2017   51.0        29200000.0     30014534.0      47879572.0    29067867.0   \n",
       "2018   52.0        32000000.0     40054284.0      66295121.0    26258314.5   \n",
       "2019   51.5        40000000.0     35095904.0      42218261.5    16091339.0   \n",
       "\n",
       "     net_revenue    ROI   ROIpct month_num  \n",
       "          median median   median    median  \n",
       "year                                        \n",
       "2000   3897150.5  0.430   42.905       7.0  \n",
       "2001   5858355.0  0.480   47.790       8.0  \n",
       "2002   6002986.5  0.375   37.625       7.0  \n",
       "2003   6797282.0  0.405   40.205       7.0  \n",
       "2004   3609476.5  0.390   38.800       7.0  \n",
       "2005   6977220.0  0.390   39.015       7.0  \n",
       "2006   8190612.5  0.465   46.690       7.0  \n",
       "2007   5238354.0  0.350   34.670       8.0  \n",
       "2008   9686263.0  0.640   63.960       8.0  \n",
       "2009   9292160.5  0.645   64.565       8.0  \n",
       "2010   7719879.0  0.530   53.160       7.0  \n",
       "2011  12847078.0  0.765   76.660       7.0  \n",
       "2012  13374700.0  0.820   82.190       7.0  \n",
       "2013  19819614.5  1.115  111.345       7.0  \n",
       "2014  13859886.0  0.895   89.115       7.0  \n",
       "2015   8074976.0  0.390   38.810       7.0  \n",
       "2016  15962184.0  0.945   94.200       7.0  \n",
       "2017  22651864.0  1.230  122.990       7.0  \n",
       "2018  33866088.0  1.190  119.200       7.0  \n",
       "2019  14469567.0  0.375   37.360       3.5  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analysis of ROI of movies in 90th percentile by ROI and after year 2000 (3,676 total movies)\n",
    "df_roi_yr_median = df_roi.groupby(['year']).agg(['median'])\n",
    "df_roi_yr_median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmcAAAGVCAYAAAC7AFaeAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3deVxVdeL/8fcFFBBkvYqCuGslYy5hmmaQUVOmDW3OuDVulTrpr5wmTcssKzFDGyu1HNPcs0Uc+1IWoViZhSmpqKnlCiq7gIgK3N8fPrwTCW7d5XB5PR+PHo+4957z/pwF7ttzzr3HZLFYLAIAAIAhuDl7AAAAAPgfyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDKhBTCaT9u/fL0kaOXKkpk6d6uQR1VzLli3TXXfdZfh5XqshQ4boueeec/Yw7C4iIkIbNmyQJE2ZMkWDBg1y7oAAG6CcAXbQvHlz1a1bVzk5OZUe79ixo0wmkw4ePPiHM+bNm6fnn3/+D8/n9zZs2CA3Nzf5+vqqfv36uu6667Rw4cJKr7FYLJoxY4batGkjb29vNW3aVBMmTNCZM2esr/mj5cBkMikkJERlZWXWx8rKytSwYUOZTKZrnu8FAwcO1BdffPGH52OreZ45c0ZPPfWUQkNDFRgYqNGjR+vcuXPW5/Py8nT//ffLx8dHzZo10/Lly63PLVq0SLfeeusfHr/RVbVPpaenKzo62jkDAuyEcgbYSYsWLbRixQrrzzt27NDp06edOKIrFxoaquLiYhUWFmrWrFl69NFH9fPPP1ufHzt2rN59910tXrxYRUVF+uyzz5ScnKx+/frZdBwBAQH67LPPrD8nJiYqMDDQphlGERcXpy1btmjnzp3au3evtm7dqpdfftn6/D/+8Q/VrVtXJ06c0LJlyzRq1Cilp6c7ccRV+22ZBnBtKGeAnQwePFiLFy+2/vz+++/rkUceqfSaM2fO6Omnn1bTpk0VEhKikSNHVipwM2bMUOPGjRUaGqr33nuv0rS/PYqQn5+vPn36qEGDBgoMDFSfPn109OhR62ujo6P1/PPPq0ePHqpfv77uuuuui47qVcVkMql3794KCgrS9u3bJUn79u3TnDlztGzZMt1yyy3y8PBQRESEPv74Y33++edKTk6++pVVjd+vw8WLF1+0DjMzM3XfffcpKChIrVu31vz5862Pe3t7Ky8vz/rabdu2yWw269y5cxcdbdqzZ4/uvPNOBQUF6brrrtOqVauszyUmJqpdu3aqX7++wsLC9Prrr1c53t/P02Qyad68eWrTpo0CAwP1j3/8Q9XdlGXt2rUaO3asgoKC1KBBA40dO9a6zU+dOqWPP/5YU6dOla+vr2699Vbdd999WrJkiXbv3q2RI0fqu+++k6+vrwICAqzzzM/P17333qv69eura9eu+uWXX6rMPnjwoEwmk959912FhoaqcePGio+Ptz5fUVGhuLg4tWrVSsHBwerXr591vV6YdsGCBWratKl69eolSfrmm2/UvXt3BQQEKDw8XIsWLZJ06X1+w4YNatKkieLj49WwYUM1btzYetT23Xff1bJly/Taa6/J19dXffv2lXT+KHVSUlKVy7V582brGDp06GA9/QkYHeUMsJNu3bqpsLBQu3fvVnl5uT744IOLrocZP3689u7dq7S0NO3fv18ZGRl66aWXJEmff/65Xn/9dX355Zfat29ftW9A0vk3z6FDh+rQoUM6fPiwvL299cQTT1R6zfLly7Vw4UJlZWXp7Nmz1RaM38/3v//9r3JyctS6dWtJ0ldffaUmTZro5ptvrvTa8PBwdevWTV9++eUVrZ8rERsbq40bN6qgoEAFBQX6+uuv9Ze//KXSa/r3768mTZooMzNTH330kSZOnKivvvpKoaGhuuWWW/Txxx9bX7t8+XI99NBDqlOnTqV5nDp1SnfeeacGDBigrKwsrVixQqNHj7YemRo+fLjeeecdFRUVaefOndYCciU+/fRTpaam6qefftKqVau0bt26Kl9nsVgqFTeLxaKjR4/q5MmT2rt3r9zd3dW2bVvr8x06dFB6erpuuOEGzZs3T7fccouKi4tVUFBgfc2KFSv0wgsvKD8/X61bt9akSZMuOdb169dr3759+uKLLxQXF2fd52bPnq2EhASlpKQoMzPTWjR/KyUlRbt379a6det0+PBh3XPPPRozZoyys7OVlpamjh07Srr0Pi9Jx48f18mTJ5WRkaEFCxboH//4h/Lz8/XYY49p4MCBeuaZZ1RcXKy1a9declkyMjJ077336rnnnlNeXp5ef/11Pfjgg8rOzr7kdIARUM4AO7pw5OfLL7/U9ddfr7CwMOtzFotF8+fP16xZsxQUFKT69etr4sSJWrlypSRp1apVGjp0qP70pz/Jx8dHU6ZMqTYnODhYDz74oOrVq6f69etr0qRJSklJqfSaoUOHqm3btvL29la/fv2UlpZW7fwyMzMVEBAgb29v3X///Zo5c6Y6deokScrJyVHjxo2rnK5x48ZXdETuSnl5ealv37764IMPtHLlSt13333y8vKyPn/kyBF98803mj59ury8vNSxY0eNGDFCS5YskSQNGDDAemrZYrFo5cqVGjBgwEU5n376qZo3b66hQ4fKw8NDnTt31oMPPqiPPvpIklSnTh3t2rVLhYWFCgwMVOfOna94GSZMmKCAgAA1bdpUt99+e7Xr/Z577tG///1vZWdn6/jx45o9e7YkqaSkRMXFxfL396/0en9/fxUVFV0y+4EHHtDNN98sDw8PDRw48JLbXJJeeOEF+fj4qH379ho6dKh13b3zzjt65ZVX1KRJE3l6emrKlCn66KOPKp3CnDJlinx8fOTt7a1ly5YpJiZG/fv3V506dRQcHKyOHTtedp+Xzq/ryZMnq06dOurdu7d8fX0rnVK/UkuXLlXv3r3Vu3dvubm56c4771RkZKQSExOvel6Ao1HOADsaPHiwli9frkWLFl10Oi47O1slJSW66aabFBAQoICAAN19993Wf9lnZmYqPDzc+vpmzZpVm1NSUqLHH39czZo1k5+fn2677TYVFBSovLzc+ppGjRpZ/79evXoqLi6udn6hoaEqKChQYWGhxo4dW+lUpdls1rFjx6qc7tixYzKbzdXO94J77rlHvr6+8vX11bJlyy752kceeUSLFy+u9pTmhTf5C5o1a6aMjAxJ0kMPPaTvvvtOmZmZ2rhxo0wmk3r27HlRxqFDh/T9999bt0NAQICWLVum48ePS5I+/vhjJSYmqlmzZoqKitJ333132WW84ErX+6RJk9SpUyd17NhR3bt3V2xsrOrUqaOGDRvK19dXhYWFlV5fWFhYabn/SPYFv9/fMjMzJZ1fP/fff7913dxwww1yd3fXiRMnqpz2yJEjatWq1UXzv9w+L53/h4aHh8dVjbsqhw4d0ocfflhpm37zzTfV7ruAkVDOADtq1qyZWrRoocTERD3wwAOVnjObzfL29lZ6err1tN3Jkyetb0SNGzfWkSNHrK8/fPhwtTnx8fH6+eef9f3336uwsFAbN26UpGqvb7pSnp6emj59unbs2KGEhARJUq9evXTkyBH98MMPlV575MgRbd68WXfcccdl5/vZZ5+puLhYxcXFGjhw4CVf27NnTx07dkwnTpy46BOJoaGhysvLq3QE6fDhw9YjlAEBAbrrrru0atUqLV++XP3796/yk57h4eGKioqyboeCggIVFxdr7ty5kqQuXbpozZo1ysrKUmxsrM0/+CBJ3t7eeuutt5SRkaFff/1VwcHBuummm6ynM8vKyrRv3z7r63/66SdFRERIkk0+vSrpov0tNDRU0vn189lnn1VaP6WlpZWOBP92DOHh4VVe33a5ff5yrmY5w8PDNXjw4EpjPnXqlCZMmHDF8wCchXIG2NmCBQuUnJwsHx+fSo+7ubnp0Ucf1VNPPaWsrCxJ56+TuXBNUr9+/bRo0SLt2rVLJSUlevHFF6vNKCoqkre3twICApSXl3fJ116tunXr6p///Kf1uqC2bdtq5MiRGjhwoDZv3qzy8nKlp6frwQcfVExMjGJiYmyWLZ1/Q167dq3++9//XvTmHB4eru7du+vZZ59VaWmptm/frgULFlQqfAMGDNDixYv18ccfV3lKU5L69OmjvXv3asmSJTp37pzOnTun1NRU7d69W2fPntWyZct08uRJ1alTR35+fnJ3d7fpMkrnt31mZqYsFos2b96sqVOnWrejj4+PHnjgAU2ePFmnTp3St99+qzVr1mjw4MGSpJCQEB09elRnz579Q2OYOnWqSkpKlJ6eroULF+qvf/2rpPPfqTdp0iQdOnRI0vkjYGvWrKl2PgMHDlRSUpJWrVqlsrIy5ebmKi0t7bL7/OWEhITo119/vaLXDho0SGvXrtW6detUXl6u0tJSbdiwodIHZQCjopwBdtaqVStFRkZW+dz06dPVunVrdevWTX5+foqJibFeX3PPPffoySefVK9evdS6detLXoT+5JNP6vTp0zKbzerWrZvuvvtumy7DsGHDdPjwYetF2G+99ZZGjBihQYMGydfXV3fffbeio6MrXXxvSxEREdajRL+3YsUKHTx4UKGhobr//vv14osv6s4777Q+f99992nfvn0KCQlRhw4dqpxH/fr19cUXX2jlypUKDQ1Vo0aNNH78eOv3ti1ZskTNmzeXn5+f5s2bp6VLl9p8GX/55Rd1795dPj4++vvf/664uLhKX2g7Z84cnT59Wg0bNlT//v01d+5c6zrp1auXIiIi1KhRoys6rVydqKgotW7dWnfccYeefvppa/7/+3//T/fdd5/uuusu1a9fX926ddP3339f7XyaNm2qxMRExcfHKygoSB07dtRPP/0k6dL7/OUMHz5cu3btUkBAgGJjYy/52vDwcK1Zs0avvvqqGjRooPDwcM2YMUMVFRVXuDYA5zFZ/uh5DwBAjXbw4EG1aNFC586dq3S9FwDn4MgZAACAgVDOAAAADITTmgAAAAbCkTMAAAADoZwBAAAYiEt9LOfCt1lfDbPZbNPbzZBHXk3Nc+VlI4888pyX58rL9kfyLnzJc1U4cgYAAGAglDMAAAADoZwBAAAYiEtdc/Z7FotFpaWlqqioqPaGuSdOnLDeosURjJRnsVjk5uYmLy8vm904GQAA/DEuXc5KS0tVp06dS96OxMPDwy43Ma4peWVlZSotLZW3t7fDxgQAAKrn0qc1KyoquE/cZXh4eHAjYAAADMSlyxmn6q4M6wkAAONw6XIGAABQ09Sqc35h88NsOr+MRzNsOr/Leeihh/T888+rQ4cOGjx4sN566y35+/s7dAwAAMC+alU5cyVLlixx9hAAAIAdcFrTzo4cOaLbbrtNTz/9tHr16qVRo0Zp48aN+stf/qIePXpo27ZtKikp0bhx49S7d2/dddddWrdunSTp9OnTGjVqlGJiYjRy5EiVlpZa59u1a1fl5eVJkoYNG6a7775bt99+u5YuXWp9TZs2bfTqq68qJiZGffr0UXZ2tmMXHgAAXDXKmQMcPHhQw4cPV1JSkvbv36+EhAQlJCRo8uTJevPNN/Xvf/9bPXr0UGJioj788ENNnTpVJSUlWrx4sby9vZWUlKSxY8dq+/btVc4/Pj5en3/+uRITE/Xee+9ZS1tJSYluuukmJSUlqVu3blq2bJkjFxsAAFwDTms6QHh4uG644QZJ0nXXXadbb71VJpNJ119/vY4cOaJjx47pyy+/1Lx58yRJZ86cUUZGhr7//nsNGzZMktSuXTvrPH7vvffe02effSbp/M3fDxw4oKCgINWtW1d33XWXysvL1b59e3399dcOWFoAAPBHUM4cwNPT0/r/bm5uqlu3rvX/y8vL5e7urnfffVetW7e+aNrLfc3Fpk2b9PXXX2vt2rXy9vbWQw89ZL0jgIeHh3V6d3d3lZWV2WqRAACAnVDODCAqKkoLFy7Uyy+/LJPJpJ07d+pPf/qTunbtqtWrV6tHjx7as2ePdu/efdG0RUVF8vf3l7e3t/bv36+tW7c6YQkAALXZtX4bgqO/9aCmqFXlrKqdwMPDw+lHlJ588km98MILiomJkcViUZMmTbR48WI98sgjGjdunGJiYtSuXTt17Njxommjo6O1ZMkSxcTEqGXLlurcubMTlgAAANiKyWKxWJw9CFvJzMys9HNJSYnq1at3yWkcXc6MmHcl6+lKmc1m5eTk2GRe5Dk2z5WXjTzyyLNvnpGOnNWUdRkaGlrtc3xaEwAAwEAcclpzzpw52rp1q/z9/RUfHy/p/Jeo/vjjj/Lw8FBISIhGjx4tHx8fSdLq1auVnJwsNzc3DR06tMrTeQAAAK7IIUfOoqOjNXHixEqP3XjjjYqPj9frr7+uxo0ba/Xq1ZKko0ePatOmTZo5c6YmTZqkBQsWqKKi4ppyXeiMrV2xngAAMA6HlLN27drJ19e30mMdOnSQu7u7JKlt27bWL05NTU1V9+7dVadOHTVs2FCNGjXS/v37rynXzc3N6Rf7G11ZWZnc3Di7DQCAURji05rJycnq3r27JCkvL09t2rSxPhcUFGQtbr+XlJSkpKQkSVJcXJzMZnOl5y0Wi/Ly8i5Z0CoqKhx65MhoeXXq1FFISMhlv0/tSnl4eFy0HeyJvJqZRR555NWuvOrYYwyusC6dXs4++eQTubu7q2fPnpKu7hRbTEyMYmJirD9X92mJC0foqlJTPtVhrzyLxaLc3FyH5dkaeTUzizzyyKtdedWxxxhqyrq81Kc1nVrONmzYoB9//FGTJ0+2HrkJDg6uVBby8vIUFBTkrCECAACDMdJXd9iD0y42SktL05o1azR+/PhKtzeKjIzUpk2bdO7cOWVlZenYsWNV3tYIAADAFTnkyNkbb7yhXbt2qaioSCNHjlS/fv20evVqlZWVaerUqZKkNm3a6LHHHlN4eLhuueUWjRs3Tm5ubho+fDgXrAMAgFrDIeXsySefvOixXr16Vfv6Bx54QA888IA9hwQAAGBIHJICAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAG4uHsAQAAIElh88OuabqMRzNsPBLAuThyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCAejgiZM2eOtm7dKn9/f8XHx0uSiouLNWvWLGVnZ6tBgwZ66qmn5OvrK4vFooULF2rbtm3y9PTU6NGj1bJlS0cMEwAAwOkccuQsOjpaEydOrPRYQkKC2rdvr9mzZ6t9+/ZKSEiQJG3btk3Hjx/X7Nmz9dhjj+k///mPI4YIAABgCA4pZ+3atZOvr2+lx1JTUxUVFSVJioqKUmpqqiRpy5Ytuu2222QymdS2bVudOnVK+fn5jhgmAACA0znktGZVTp48qcDAQElSYGCgCgsLJUl5eXkym83W1wUHBysvL8/62t9KSkpSUlKSJCkuLq7SdFfKw8Pjmqa7VuSRZ9Q8V1428mp+3qXYYxyuvj6Nsv0cPYaasq84rZxVx2KxXPSYyWSq8rUxMTGKiYmx/pyTk3PVeWaz+Zqmu1bkkWfUPFdeNvJqft6l2GMcrr4+jbL9HD0GI+0roaGh1T7ntE9r+vv7W09X5ufny8/PT9L5I2W/Xcjc3Nwqj5oBAAC4IqeVs8jISKWkpEiSUlJS1KVLF+vjGzdulMVi0d69e1WvXj3KGQAAqDUcclrzjTfe0K5du1RUVKSRI0eqX79+io2N1axZs5ScnCyz2axx48ZJkjp16qStW7dq7Nixqlu3rkaPHu2IIQIAABiCQ8rZk08+WeXjkydPvugxk8mkESNG2HtIAAAAhsQdAgAAAAyEcgYAAGAglDMAAAADoZwBAAAYCOUMAADAQChnAAAABkI5AwAAMBDKGQAAgIFQzgAAAAzEIXcIAAAAjhU2P+yapst4NMPGI8HV4sgZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCDcWxMAUCtx70kYFUfOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADMTD2QMAABhT2Pywa5ou49EMG48EqF04cgYAAGAgTj9y9umnnyo5OVkmk0nh4eEaPXq0CgoK9MYbb6i4uFgtWrTQmDFj5OHh9KECAADYnVOPnOXl5emzzz5TXFyc4uPjVVFRoU2bNmnp0qW69957NXv2bPn4+Cg5OdmZwwQAAHAYp5/WrKio0NmzZ1VeXq6zZ88qICBA6enp6tatmyQpOjpaqampTh4lAACAYzj1XGFQUJD69u2rUaNGqW7duurQoYNatmypevXqyd3d3fqavLy8KqdPSkpSUlKSJCkuLk5ms/mqx+Dh4XFN010r8sgzap4rLxt5juXocbhCXm3dfmy7auZp07ldpeLiYqWmpurtt99WvXr1NHPmTKWlpV3x9DExMYqJibH+nJOTc9VjMJvN1zTdtSKPPKPmufKykedYjh6HK+TV1u1Xm7ddaGhotc85tZzt2LFDDRs2lJ+fnySpa9eu+vnnn1VSUqLy8nK5u7srLy9PQUFBzhwmAACAwzj1mjOz2ax9+/bpzJkzslgs2rFjh5o0aaKIiAht3rxZkrRhwwZFRkY6c5gAAAAO49QjZ23atFG3bt00fvx4ubu7q3nz5oqJiVHnzp31xhtvaOXKlWrRooV69erlzGECAAA4jNO/PKxfv37q169fpcdCQkI0bdo0J40IAADAeZz+VRoAAAD4H8oZAACAgVDOAAAADMTp15wBAK5M2Pywa5ou49EMG48EgD1x5AwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABiIx+VeMGrUqMvOZO7cuTYZDAAAQG132XI2ZswYR4wDAAAAuoJy1q5dO0eMAwAAALqCciZJWVlZ+vDDD7V9+3YVFRWpfv36at++vR5++GGFhITYe4wAAAC1xmU/EHD06FGNHz9ehYWF6t+/v5555hn1799fRUVFmjBhgo4ePeqIcQIAANQKlz1ytnz5cv35z3/W3/72t0qPR0dHa+XKlVq6dKkmTJhgtwECwJUKmx92TdNlPJph45EAwLW77JGz3bt3q2/fvlU+16dPH+3Zs8fmgwIAAKitLnvkrKKiQu7u7lVP7OGhiooKmw8KgGvgSBYAXL3LHjlr1aqVNmzYUOVzGzZsUKtWrWw9JgAAgFrrskfO/vrXv+qVV15RZmamunXrpoCAABUUFOi7775TSkqKJk2a5IhxAgAA1AqXLWfXXXednnvuOS1btkxffPGFLBaLTCaT2rZtq4kTJ+q6665zxDgBAABqhSv6nrO2bdvqxRdf1NmzZ1VcXCwfHx95enrq0KFDmjlzpsaNG2fvcQIAANQKly1nZ86c0erVq3Xw4EE1btxYDz/8sAoKCrR48WJt375dUVFRjhgnAABArXDZcrZgwQIdOHBAHTp0UFpamg4fPqzMzExFRUXp8ccfl5+fnyPGCQAAUCtctpz99NNPeu211+Tv76977rlHo0eP1pQpU3TDDTfYZACnTp3SvHnzdOTIEZlMJo0aNUqhoaGaNWuWsrOz1aBBAz311FPy9fW1SR4AAICRXbaclZaWyt/fX5IUHBwsLy8vmxUzSVq4cKE6duyof/7znyorK7OeRm3fvr1iY2OVkJCghIQEDRo0yGaZAAAARnXZ7zkrLy/Xzp07rf9JqvTzhceuRUlJiXbv3q1evXpJOv+ltj4+PkpNTbVeyxYVFaXU1NRrzgAAAKhJLnvkzN/fX3PnzrX+7OvrW+lnk8mkt95665rCs7Ky5Ofnpzlz5ujQoUNq2bKlhgwZopMnTyowMFCSFBgYqMLCwiqnT0pKUlJSkiQpLi5OZrP5qsfg4eFxTdNdK/LIM2qeo5ftUhw9DnvksT7Juxq1dX9h21Uzz8u94O2337Zp4G+Vl5frwIEDGjZsmNq0aaOFCxcqISHhiqePiYlRTEyM9eecnJyrHoPZbL6m6a4VeeQZNc/Ry3Ypjh6HPfJYn+Rdjdq6v9TmbRcaGlrtc5c9rWlPwcHBCg4OVps2bSRJ3bp104EDB+Tv76/8/HxJUn5+Pp8IBQAAtYZTy1lAQICCg4OVmZkpSdqxY4eaNGmiyMhIpaSkSJJSUlLUpUsXZw4TAADAYa7oDgH2NGzYMM2ePVtlZWVq2LChRo8eLYvFolmzZik5OVlms5k7EAAAgFrD6eWsefPmiouLu+jxyZMnO2E0AAAAzuXU05oAAACojHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA3H6vTUBoKYKmx92TdNlPJph45EAcCUcOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA/Fw9gBcUdj8sGuaLuPRDBuPBAAA1DQcOQMAADAQyhkAAICBcFoTcDJOgwMAfosjZwAAAAZCOQMAAA/ocX0AABocSURBVDAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEBqxZfQ8iWfAACgpuDIGQAAgIFQzgAAAAyEcgYAAGAghrjmrKKiQhMmTFBQUJAmTJigrKwsvfHGGyouLlaLFi00ZswYeXgYYqgAAAB2ZYgjZ4mJiQoL+99F+0uXLtW9996r2bNny8fHR8nJyU4cHQAAgOM4vZzl5uZq69atuuOOOyRJFotF6enp6tatmyQpOjpaqampzhwiAACAwzj9XOGiRYs0aNAgnT59WpJUVFSkevXqyd3dXZIUFBSkvLy8KqdNSkpSUlKSJCkuLk5ms9mmY7P1/JyR5+HhYfP5ek7zvKbpzjx7xqbjkOyzfEbKuxRbj8OVl4088oyeV1t//9h21czTpnO7Sj/++KP8/f3VsmVLpaenX/X0MTExiomJsf6ck5Njy+HZfH7OyDObzQ5fjuq4wvK58vp05WUjjzyj59XW37/avO1CQ0Orfc6p5eznn3/Wli1btG3bNp09e1anT5/WokWLVFJSovLycrm7uysvL09BQUHOHCYAAIDDOLWcDRgwQAMGDJAkpaena+3atRo7dqxmzpypzZs3q0ePHtqwYYMiIyOdOUw4maPv8MAdJQDYA39bcKWc/oGAqgwcOFCffvqpxowZo+LiYvXq1cvZQwIAAHAIp38g4IKIiAhFRERIkkJCQjRt2jQnjwgAAMDxDFPOcO04VA4AgOugnAEAAFyCow+CGPKaMwAAgNqKcgYAAGAglDMAAAADoZwBAAAYCOUMAADAQChnAAAABsJXaQC1CN+JBwDGx5EzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA6GcAQAAGAjlDAAAwEAoZwAAAAZCOQMAADAQyhkAAICBUM4AAAAMhHIGAABgIJQzAAAAA/FwZnhOTo7efvttFRQUyGQyKSYmRr1791ZxcbFmzZql7OxsNWjQQE899ZR8fX2dOVQAAACHcGo5c3d31+DBg9WyZUudPn1aEyZM0I033qgNGzaoffv2io2NVUJCghISEjRo0CBnDhUAAMAhnHpaMzAwUC1btpQkeXt7KywsTHl5eUpNTVVUVJQkKSoqSqmpqc4cJgAAgMM49cjZb2VlZenAgQNq3bq1Tp48qcDAQEnnC1xhYWGV0yQlJSkpKUmSFBcXJ7PZbNMx2Xp+5JFXU/NcednII4885+W58rL9kTxDlLPS0lLFx8dryJAhqlev3hVPFxMTo5iYGOvPOTk5Nh2XredHHnk1Nc+Vl4088shzXp4rL9vl8kJDQ6t9zumf1iwrK1N8fLx69uyprl27SpL8/f2Vn58vScrPz5efn58zhwgAAOAwTi1nFotF8+bNU1hYmPr06WN9PDIyUikpKZKklJQUdenSxVlDBAAAcCinntb8+eeftXHjRjVt2lT/+te/JEn9+/dXbGysZs2apeTkZJnNZo0bN86ZwwQAAHAYp5az66+/XqtWraryucmTJzt4NAAAAM7n9GvOAAAA8D+UMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCCUMwAAAAOhnAEAABgI5QwAAMBAKGcAAAAGQjkDAAAwEMoZAACAgVDOAAAADIRyBgAAYCAezh7ApaSlpWnhwoWqqKjQHXfcodjYWGcPCQAAwK4Me+SsoqJCCxYs0MSJEzVr1ix9++23Onr0qLOHBQAAYFeGLWf79+9Xo0aNFBISIg8PD3Xv3l2pqanOHhYAAIBdmSwWi8XZg6jK5s2blZaWppEjR0qSNm7cqH379mn48OHW1yQlJSkpKUmSFBcX55RxAgAA2JJhj5xV1RlNJlOln2NiYhQXF/eHitmECROueVryyHOlPFdeNvLII895ea68bPbKM2w5Cw4OVm5urvXn3NxcBQYGOnFEAAAA9mfYctaqVSsdO3ZMWVlZKisr06ZNmxQZGensYQEAANiV+5QpU6Y4exBVcXNzU6NGjfTmm2/q888/V8+ePdWtWze7ZLVs2dIu8yWPvJqW58rLRh555Dkvz5WXzR55hv1AAAAAQG1k2NOaAAAAtRHlDAAAwEAoZwAAAAZCOQMAADAQQ9/43B5KSkqUlpamvLw8SVJQUJA6dOggHx8fJ4+sZiooKJAkBQQEqLCwULt371ZoaKjCw8Mdkr98+XINGDDAIVn4Y3bt2qWAgACFhoZqz5492rt3r5o0aaLOnTs7e2gAYCiG/SoNe0hJSdHs2bPl5uamunXrqry8XIcOHdLy5cvl4+Oj5s2bO2ws27dvV0hIiM3nW1JSotzcXPn6+lZ6/NChQwoICLBp1pdffqk5c+YoOTlZderU0dKlS3Xq1CmtXbtWnp6eatGihU3z3nvvPW3btq3Sf8nJycrLy9O2bdvUqVMnm+b9VlZWlnbu3CmTySQ/Pz+bzz8nJ0ceHh5yd3eXxWLRhg0btH79emVnZ6t58+Zyc7PtQe4tW7bIbDbL3d3dpvOtzqJFi5SSkqLNmzcrJydHSUlJatCggTZt2qTDhw+rQ4cONs8sLS3Vli1blJaWpl9++UWnTp1Sw4YNL7rTiK1kZGQoOTlZmzZtUlpamg4dOiRfX1+77C+Xsn79epv/7knnl+/QoUPy9/eXh8f//l2flpamRo0a2Txv//79ysvLU1BQkI4ePaqNGzequLhYjRs3tnnW77311lu6+eab7Z4jSXv27NHmzZt1+vRpu6zHffv2ydvbW3Xq1NHZs2f18ccfa+3atTp48KBat26tOnXq2DQvMTFRgYGBqlevnk3nW52ysjJ9/fXXKiwsVEhIiL755ht9+eWXysrKssvfTkk6fvy49Xd9x44dOnHihBo3bmzTdVmrjpx98skniouLu+goWXFxsSZNmqSoqCiHjWXu3LmaO3euTee5adMmvf/++/Lz81N5eblGjx6t1q1bS5LmzJmj6dOn2zTv888/18yZM3X27FmNHj1ab775pgICAlRcXKwXX3xRvXr1smneDz/8oHbt2qlDhw7W23t9++23dvk+m9dee03PPPOMJCk1NVWLFi1SRESEli9frvvvv1/R0dE2zZs2bZpeffVVSdKyZct04sQJdenSRTt37tT+/fs1evRom+bNmjVLXl5e6tixo3r06KGOHTva5Y/YBdu3b1d8fLzOnj2rkSNHat68efL09FRZWZnGjx+vwYMH2zRv06ZNWrt2rZo1a6b09HS1bdtW+/bt09KlSzV27Fg1bdrUpnkJCQn69ttv1aNHD+vvXF5env7973+rR48eio2NtWnepaxatUq33367TeeZmJiodevWKSwsTPPmzdOQIUPUpUsXSdKKFSvUsWNHm+Z9+OGHSktLU3l5uW688Ubt27dPERERWrNmjQ4ePKgHHnjAZlm//7tosViUnp6uU6dOSZLGjx9vsyxJevbZZzVt2jRJ5+8PvW7dOt1888366KOPdODAAZvvK3PnztWMGTMkSQsXLpSnp6diY2O1Y8cOzZkzR08//bRN8z744AOtWbNGISEh6tGjh2655Ra7/gNlzpw5Ki8v15kzZ5SSkqLS0lJ17dpVO3bs0P79+/XEE0/YNC8xMVE//vij2rVrp19++UXNmzdXbm6uJk2apBEjRigiIsImObWqnEkX359TOv+Ft/b4urfqypDFYlFxcbHN81avXq24uDgFBgZq//79euutt9S/f3917drVLsvn4eEhT09PeXp6qlGjRtYjc76+vnY5OjFr1ix98MEHSktL0+DBgxUUFKSPPvrI5kVJOn8k64I1a9bohRdeUMOGDVVYWKipU6faPLOiokKenp6SpB07dmjatGlyc3PTbbfdpn/96182zZKksLAwTZ48WZs3b9ann36quXPnqkuXLrr11lvVrl07m+eZTCbrfxd+ls7/7lVUVNg875NPPtErr7wiT09PFRYW6s0339SkSZN06NAhvfvuu3r55Zdtmrd+/XrFx8dXOqIkSX369NG4ceNs/oZb3RuqxWLRyZMnbZolSV999ZWmT58uLy8vZWVlaebMmcrOzlbv3r3t8rdl8+bNmjFjhs6dO6fHHntMc+fOVb16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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph median and mean ROI \n",
    "\n",
    "df_roi_yr_median['ROIpct'].plot.bar(figsize=(10,6), color = 'green')\n",
    "plt.title('Median ROI - Movies in 90th percentile', fontsize = 12)\n",
    "plt.xlabel('Year', fontsize = 12)\n",
    "plt.ylabel('ROI', fontsize = 12)\n",
    "\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Graph ROI of movies in 90th percentile by ROI and after year 2000 (3,676 total movies)\n",
    "\n",
    "#df_roi['ROI_buckets'].value_counts(normalize = True).plot.bar(figsize=(10,6), color = 'green')\n",
    "#plt.title('ROI - Movies in 90th percentile', fontsize = 12)\n",
    "#plt.xlabel('Worldwide gross revenue / production budget', fontsize = 12)\n",
    "#plt.ylabel('Share of movies', fontsize = 12)\n",
    "\n",
    "#plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year  ROI_buckets\n",
       "2000  0 - 100%       25.568182\n",
       "      100% - 200%    15.909091\n",
       "      200% - 300%     6.250000\n",
       "      300% - 400%     7.954545\n",
       "      400% - 500%     5.113636\n",
       "Name: ROI_buckets, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_roi_pct = ((df_roi.groupby(['year', 'ROI_buckets'])['ROI_buckets'].count()/df_roi.groupby(['year'])['ROI_buckets'].count()))*100\n",
    "display(df_roi_pct.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import cm\n",
    "viridis = cm.get_cmap('viridis', 9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = df_roi_pct.unstack().plot.bar(stacked = True, figsize=(14,8), color=viridis.colors)\n",
    "\n",
    "ax.set_title('ROI - Movies in 90th percentile', fontsize = 14)\n",
    "ax.set_xlabel('Year', fontsize = 12)\n",
    "ax.set_ylabel('Percent of movies (%)', fontsize = 12)\n",
    "ax.yaxis.set_ticks(np.arange(0, 110, 10))\n",
    "ax.tick_params(labeltop=False, labelright=True)\n",
    "\n",
    "# Reverse legend order\n",
    "handles, labels = ax.get_legend_handles_labels()\n",
    "ax.legend(reversed(handles), reversed(labels), loc='center left', bbox_to_anchor=(1.1,0.5))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAloAAAGGCAYAAACjTy8jAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOydeXxU1fn/P7MkE7IvQxICBMJWJKkovAQEFKQB7dev+WkVFFBAq33RFuteRSrgt+4bLkGtiAu2rrVabLVa1ILWpRqKClgqNCZAZMkGJCHbzPn9MZ3JzM29d+7M3DtzZ+bzfr14vZi7nPM855x775PzPOc5FiGEACGEEEII0R1rrAUghBBCCElUaGgRQgghhBgEDS1CCCGEEIOgoUUIIYQQYhA0tAghhBBCDIKGFiGEEEKIQdDQIgnN3/72NwwZMiTs+5cuXYpf//rXOkrUH4vFgt27d8ue+93vfoc5c+aEVe7q1atx8cUXRyIa0ZFIx2IkPPPMM5g+fbru5dbX1yMzMxMul0v3svVm+PDh2LRpU6zFIEkIDS1ieoYPH44BAwYgMzMTxcXFWLJkCdra2nSvR+5j9Pjjj+OWW27RvS6tLFy4EO+8807U640HI23JkiVITU1FZmYm8vPzMXv2bPzrX/8KuGbfvn1YuHAhCgoKkJGRgUmTJuFPf/pTwDVqhm40sVgsyMjIQGZmJgYPHoxrr73WdAaM1FgpLS1FW1sbbDab7nX5t4fT6cT8+fPR2tqqez2hEg/PBjEXNLRIXPDGG2+gra0N27Ztwz//+U/ceeedsRaJmIBf/vKXaGtrw/79+zF48GD8+Mc/9p1rbm7G9OnTkZqaih07dqCxsRHXXHMNFixYgN///vcxlFqZL774Am1tbXj33Xfx/PPPY926df2u6e3tjYFkscHbHv/5z3/Q0tKC1atXx1okQkKGhhaJK4qLi3HmmWdi27ZtvmNdXV24/vrrUVpaiqKiIixduhTHjx+Xvf+uu+7CyJEjkZWVhXHjxuG1114DAHz99ddYunQpPv74Y2RmZiI3NxeAZ9bkV7/6le/+devWYdSoUcjPz0dVVRUaGhp85ywWCx5//HGMHj0aeXl5+PnPfw7vxgu7d+/GjBkzkJOTA6fTiQsvvDBArk2bNsneJ51ls1gsePjhhzFixAg4nU7ccMMNcLvdiu3V2dmJCy+8EFlZWZgwYQK++OIL37mGhgacf/75GDhwIMrKyvDwww8DAP7yl7/gjjvuwEsvvYTMzEyMHz8e77//Pr7//e/77q2srMSkSZN8v6dPn47XX39dtVwAcLvdvj4oKCjAvHnz0NzcDAD49ttvYbFY8Oyzz6K0tBROpxO33367om7+DBgwAPPmzQsYF2vWrEFmZibWr1+P4uJiDBgwAPPnz8eKFStw3XXXQcumGH/+859x8sknIzs7G0OHDg340AeT9/jx41iyZAny8vIwbtw4fPbZZ5p0AYCxY8fitNNOw/bt2wF4ZpLuvvtunHjiicjIyEBvby++/vprzJw5E7m5uSgvL8fGjRt99zc1NaGqqgrZ2dmYNGkS9uzZ009uf4Nt5syZePLJJ32/161bhxNOOMH3nGzduhWXXHIJ6uvrcc455yAzMxP33HNPv7IaGhpQVVWF/Px8jBo1KsBQXL16NebNm4dFixYhKysL5eXl+PzzzzW1R3Z2NqqqqrBz507fMensmnSm6bnnnsOwYcNQUFDQbxwdP34cixcvRl5eHk444QTcc889AW7dUJ4NQoIiCDE5w4YNE3/961+FEELs3btXVFRUiF/84he+81dddZU455xzRFNTkzh69Kj43//9X3HTTTcJIYR4//33xeDBg33Xvvzyy2L//v3C5XKJF198UaSnp4uGhgYhhBBPP/20mDZtWkDdixcvFitWrBBCCPHuu++KgoICUVNTIzo7O8WyZcvEaaed5rsWgDj77LNFS0uLqKurE06nU7z11ltCCCEuuugicdtttwmXyyWOHz8uPvjgA033SWUCIGbOnCmamppEXV2dGD16tFi3bp1su61atUrY7XbxyiuviO7ubnHvvfeK4cOHi+7ubuFyucSECRPErbfeKrq6usSePXtEWVmZ+Mtf/uK7d+HChb6yjh8/LtLS0sThw4dFT0+PKCoqEoMGDRJHjx4VHR0dIi0tTTQ2NgYtd82aNWLy5Mli7969orOzU/zkJz8RF110kRBCiNraWgFAXH755aKjo0Ns27ZNpKamip07d8rq5983bW1t4uKLLxYnnnii7/zkyZPFypUr+933n//8RwAQ//rXv3xt+s0338jW8f7774svv/xSuFwu8cUXX4jCwkLx2muvaZL3xhtvFNOnTxdNTU2ivr5elJeXB4xFKf5y7NixQxQVFYknn3xSCOF5BsaPHy/q6+tFR0eH6O7uFiNHjhS333676OrqEu+++67IzMz06XThhReKuXPnira2NvHVV1+JkpIS3zjyyt3T0+Ore8aMGb5x9PLLL4uSkhLxj3/8Q7jdbvHNN9+Ib7/91ieH91mUK+v0008XP/3pT8Xx48fFP//5T+F0OsWmTZuEEJ4x5XA4xJ///GfR29srbrrpJjF58mRN7dHc3Cxmz54tbrnlFt95qSz+Y3bHjh0iIyNDbN68WXR2doprrrlG2Gw23/U33nijOP3000Vzc7PYu3ev+P73v+/rm1CfDUKCYWpDa+3ateLHP/6xuPbaa4Nee/jwYbF69Wpxww03iOuuu07U1NREQUISDYYNGyYyMjJEZmamACBmzZolWlpahBBCuN1ukZ6eLnbv3u27/qOPPhLDhw8XQvQ3tKSMHz9evP7660KI4IbWZZddJm644QbfuWPHjgm73S5qa2uFEJ4Pg78BNXfuXHHnnXcKIYS45JJLxBVXXCH27t3bTwa1++QMLa8RJoTnGZk1a5asbqtWrQr4kLlcLlFcXCy2bNkiPvnkEzF06NCA6++44w6xZMkS373Sj8n06dPFq6++Kj7++GMxe/ZsMXfuXPHWW2+J9957T3z/+98XQoig5Y4dO9b34RVCiIaGBmG320VPT4/vo+3fRqeccop44YUXZPVbvHixcDgcIicnR1gsFjF8+HDxxRdf+M6PHDlSPPbYY/3uO378uAAgPvzwQyGEuqEl5aqrrhJXX321EEIElbesrCygr37zm98ENbSysrJEbm6uGDFihFixYoVwuVxCCM8zsH79et+1W7ZsEUVFRb7zQniM+VWrVone3l5ht9vF119/7Tu3fPlyzYbWnDlzxIMPPigro5qhVV9fL6xWqzh69Kjv/E033SQWL14shPCMqR/84Ae+czt27BBpaWlB2yMnJ0dYrVbxve99T+zbt09RFv8xe+utt4oLL7zQd66trU2kpKT4rvc3nIQQYt26db6+CefZIEQNexQnz0Jm5syZOOuss7B27dqg17766qs49dRTMWfOHOzbtw933nknJkyYEAUpSTR4/fXXUVlZic2bN2PBggVobGxEbm4uDh8+jI6ODkycONF3rRBCMYh4w4YNeOCBB/Dtt98CANra2tDY2KhJhoaGhoAxlZmZiYKCAuzfvx/D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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Explore distributions and relationships\n",
    "df_roi.plot.scatter(x = 'ROIpct',\n",
    "                       y = 'production_budget', \n",
    "                       c = 'blue', \n",
    "                   figsize = (10,6))\n",
    "\n",
    "from scipy.stats import linregress\n",
    "x = df_roi.ROIpct\n",
    "y = df_roi.production_budget\n",
    "stats = linregress(x, y)\n",
    "\n",
    "m = stats.slope\n",
    "b = stats.intercept\n",
    "\n",
    "# Set the linewidth on the regression line to 3px\n",
    "plt.plot(x, m * x + b, color=\"red\", linewidth=3)\n",
    "\n",
    "plt.title('Relationship between ROI and Production Budget', fontsize = 12)\n",
    "plt.xlabel('ROI (%)', fontsize = 12)\n",
    "plt.ylabel('Production Budget ($)', fontsize = 12)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Production Budget ($)')"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_roi.groupby('ROI_buckets').production_budget.median().plot.bar(figsize=(14,8))\n",
    "plt.title('Production Budget', fontsize = 12)\n",
    "plt.xlabel('ROI', fontsize = 12)\n",
    "plt.ylabel('Production Budget ($)', fontsize = 12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>id</th>\n",
       "      <th>production_budget</th>\n",
       "      <th>domestic_gross</th>\n",
       "      <th>worldwide_gross</th>\n",
       "      <th>foreign_gross</th>\n",
       "      <th>net_revenue</th>\n",
       "      <th>ROI</th>\n",
       "      <th>ROIpct</th>\n",
       "      <th>month_num</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000</td>\n",
       "      <td>51.0</td>\n",
       "      <td>23500000.0</td>\n",
       "      <td>20752058.5</td>\n",
       "      <td>32831338.0</td>\n",
       "      <td>7052479.5</td>\n",
       "      <td>3897150.5</td>\n",
       "      <td>0.430</td>\n",
       "      <td>42.905</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2001</td>\n",
       "      <td>53.0</td>\n",
       "      <td>25000000.0</td>\n",
       "      <td>25288103.0</td>\n",
       "      <td>29406132.0</td>\n",
       "      <td>4910354.0</td>\n",
       "      <td>5858355.0</td>\n",
       "      <td>0.480</td>\n",
       "      <td>47.790</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2002</td>\n",
       "      <td>49.5</td>\n",
       "      <td>21000000.0</td>\n",
       "      <td>19119407.0</td>\n",
       "      <td>28643729.5</td>\n",
       "      <td>4862618.0</td>\n",
       "      <td>6002986.5</td>\n",
       "      <td>0.375</td>\n",
       "      <td>37.625</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>43.0</td>\n",
       "      <td>20000000.0</td>\n",
       "      <td>19480739.0</td>\n",
       "      <td>27676370.0</td>\n",
       "      <td>8784561.0</td>\n",
       "      <td>6797282.0</td>\n",
       "      <td>0.405</td>\n",
       "      <td>40.205</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2004</td>\n",
       "      <td>50.5</td>\n",
       "      <td>26000000.0</td>\n",
       "      <td>21092751.0</td>\n",
       "      <td>34607966.0</td>\n",
       "      <td>10373171.5</td>\n",
       "      <td>3609476.5</td>\n",
       "      <td>0.390</td>\n",
       "      <td>38.800</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year     id production_budget domestic_gross worldwide_gross foreign_gross  \\\n",
       "        median            median         median          median        median   \n",
       "0  2000   51.0        23500000.0     20752058.5      32831338.0     7052479.5   \n",
       "1  2001   53.0        25000000.0     25288103.0      29406132.0     4910354.0   \n",
       "2  2002   49.5        21000000.0     19119407.0      28643729.5     4862618.0   \n",
       "3  2003   43.0        20000000.0     19480739.0      27676370.0     8784561.0   \n",
       "4  2004   50.5        26000000.0     21092751.0      34607966.0    10373171.5   \n",
       "\n",
       "  net_revenue    ROI  ROIpct month_num  \n",
       "       median median  median    median  \n",
       "0   3897150.5  0.430  42.905       7.0  \n",
       "1   5858355.0  0.480  47.790       8.0  \n",
       "2   6002986.5  0.375  37.625       7.0  \n",
       "3   6797282.0  0.405  40.205       7.0  \n",
       "4   3609476.5  0.390  38.800       7.0  "
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_roi_yr_median.reset_index(inplace = True)\n",
    "df_roi_yr_median.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Gross Revenue</th>\n",
       "      <th>Production Budget</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>median</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000</td>\n",
       "      <td>32831338.0</td>\n",
       "      <td>23500000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2001</td>\n",
       "      <td>29406132.0</td>\n",
       "      <td>25000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2002</td>\n",
       "      <td>28643729.5</td>\n",
       "      <td>21000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>27676370.0</td>\n",
       "      <td>20000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2004</td>\n",
       "      <td>34607966.0</td>\n",
       "      <td>26000000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year Gross Revenue Production Budget\n",
       "               median            median\n",
       "0  2000    32831338.0        23500000.0\n",
       "1  2001    29406132.0        25000000.0\n",
       "2  2002    28643729.5        21000000.0\n",
       "3  2003    27676370.0        20000000.0\n",
       "4  2004    34607966.0        26000000.0"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yr = df_roi_yr_median[['year']]\n",
    "worldwide_gross = df_roi_yr_median[['worldwide_gross']]\n",
    "production_budget = df_roi_yr_median[['production_budget']]\n",
    "\n",
    "df_roi_comp = df_roi_yr_median[['year','worldwide_gross','production_budget']]\n",
    "df_roi_comp = df_roi_comp.rename(columns = {'year':'Year', 'worldwide_gross': 'Gross Revenue', 'production_budget': 'Production Budget'})\n",
    "df_roi_comp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc206dfcd68>"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph gross revenue and production budget by year\n",
    "\n",
    "df_roi_comp.plot(x=\"Year\", y=[\"Production Budget\", \"Gross Revenue\"], kind=\"bar\", figsize=(14,8))\n",
    "plt.title('Gross Revenue and Production Budget', fontsize = 12)\n",
    "plt.xlabel('Year', fontsize = 12)\n",
    "plt.yticks(np.arange (0, 7.5e7, 0.5e7))\n",
    "plt.ylabel('Dollars $', fontsize = 12)\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## ROI and year movie released\n",
    "df_roi.plot.scatter(x = 'year',\n",
    "                       y = 'ROI', \n",
    "                       c = 'blue', \n",
    "                   figsize = (10,6))\n",
    "\n",
    "plt.title('Relationship between ROI and Year', fontsize = 12)\n",
    "plt.xlabel('Year', fontsize = 12)\n",
    "plt.ylabel('ROI (X)', fontsize = 12)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ROI and month movie released\n",
    "df_roi.plot.scatter(x = 'ROIpct',\n",
    "                       y = 'month', \n",
    "                       c = 'blue', \n",
    "                   figsize = (10,6))\n",
    "\n",
    "x = df_roi.ROIpct\n",
    "y = df_roi.month\n",
    "stats = linregress(x, y)\n",
    "\n",
    "m = stats.slope\n",
    "b = stats.intercept\n",
    "\n",
    "# Set the linewidth on the regression line to 3px\n",
    "plt.plot(x, m * x + b, color=\"red\", linewidth=3)\n",
    "\n",
    "plt.title('Relationship between ROI and Release Month', fontsize = 12)\n",
    "plt.xlabel('ROI (%)', fontsize = 12)\n",
    "plt.ylabel('Month', fontsize = 12)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_roi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NET REVENUE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of movies in 75th, 99th percentiles - By worldwide net revenue\n",
    "print(f\"Number of movies in 75th percentile: {len(df_revenue[df_revenue['net_revenue']>6.735617e+07])}\")    \n",
    "print(f\"Number of movies in 99.5 percentile: {len(df_revenue[df_revenue['net_revenue']>3.187214e+08])}\")\n",
    "print(f\"Number of movies in 99.9 percentile: {len(df_revenue[df_revenue['net_revenue']>7.646151e+08])}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify top movies by worldwide net revenue\n",
    "df_revenue.sort_values(by = ['net_revenue'], axis=0, ascending=[False], inplace=False,\n",
    "               na_position='last', ignore_index=True)[['title', 'net_revenue', 'ROI', 'production_budget']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify movies with worldwide net revenue in 99.9 percentile\n",
    "\n",
    "# Create new df\n",
    "df_nr_999p = df_revenue[df_revenue.net_revenue >= 7.646151e+08].sort_values('net_revenue', ascending = False)\n",
    "df_nr_999p.head()\n",
    "\n",
    "# how to use .loc?\n",
    "#nr_99_3p = df_revenue['net_revenue'].loc[lambda x: x>8.407595e+08].sort_values(ascending = False, ignore_index = True)\n",
    "#nr_99_3p = df_revenue[['title','net_revenue']]['net_revenue'].loc[lambda x: x>8.407595e+08].sort_values(ascending = False, ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Graph net revenue and ROI of movies in 99.9 percentile by net revenue\n",
    "\n",
    "ax1 = df_nr_999p.plot.barh(x= 'title', y= 'net_revenue', color = 'blue', stacked=False, rot=0, figsize=(12,10))\n",
    "ax1.set(\n",
    "    title='Net Revenue - Movies in 99th Percentile',\n",
    "    xlabel='Billions $',\n",
    "    ylabel='Movies')\n",
    "ax1.invert_yaxis()\n",
    "\n",
    "ax2 = df_nr_999p.plot.barh(x= 'title', y = 'ROI', color = 'green', stacked=False, rot=0, figsize=(12,10))\n",
    "ax2.set(\n",
    "    title='ROI - Movies in 99th Percentile by Net Revenue',\n",
    "    xlabel='ROI (x)',\n",
    "    ylabel='Movies')\n",
    "ax2.invert_yaxis()\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge df_ROI_v2 with df4 (has info on genres, run time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Explore distributions and relationships\n",
    "pd.plotting.scatter_matrix(df_revenue[['production_budget', 'domestic_gross', 'foreign_gross', 'worldwide_net_revenue']], figsize=(6,6));\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Join with df4, which has info on genres, runtime, etc.\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4 = df4.rename(columns={\"primary_title\": \"title\"})\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4['title_yr'] = df4['title'].str.cat(df4.start_year.astype(str), sep = '-')\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.title.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.title_yr.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_main = df_revenue.join(df4, how='left', rsuffix='_right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QUESTIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# glyphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Clean up: Rename columns, convert dtypes to prepare dfs for joins and analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.rename(columns={\"nconst\": \"name_id\"})\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4 = df4.rename(columns={\"tconst\": \"title_id\"})\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df5 = df5.rename(columns={\"tconst\": \"title_id\"})\n",
    "df5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df6 = df6.rename(columns={\"tconst\": \"title_id\", \"nconst\": \"name_id\"})\n",
    "df6.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df7 = df7.rename(columns={\"tconst\": \"title_id\"})\n",
    "df7.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df8['theater_date'] = pd.to_datetime(df8['theater_date'])\n",
    "df8['dvd_date'] = pd.to_datetime(df8['dvd_date'])\n",
    "df8.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df8 = df8.rename(columns={\"runtime\": \"runtime_mins\"})\n",
    "df8['runtime_mins'] = df8['runtime_mins'].str.rstrip('minutes')\n",
    "df8.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df10['release_date'] = pd.to_datetime(df10['release_date'])\n",
    "df10.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Calculate worldwide_net_revenue and foreign_gross (revenue generated outside of US)\n",
    "df11['worldwide_net_revenue'] = df11.worldwide_gross - df11.production_budget\n",
    "df11['foreign_gross'] = df11.worldwide_gross - df11.domestic_gross"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Explore distributions and relationships\n",
    "pd.plotting.scatter_matrix(df11[['production_budget', 'domestic_gross', 'foreign_gross','worldwide_gross', 'worldwide_net_revenue']], figsize=(6,6));\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df11.apply(['mean', 'median', 'std'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Explore distribution of worldwide_net_revenue\n",
    "fig, ax = plt.subplots(figsize=(6,6))\n",
    "ax.hist(df11['worldwide_net_revenue'], bins='auto', alpha = 0.5)\n",
    "ax.set_title('Distribution of Worldwide Net Revenue')\n",
    "ax.set_xlabel('Net Revenue ($ Billions)')\n",
    "ax.set_ylabel('Number of Movies')\n",
    "ax.axvline(df11['worldwide_net_revenue'].mean(), color = 'black')\n",
    "ax.axvline(df11['worldwide_net_revenue'].median(), color = 'red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df11['worldwide_net_revenue'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Worldwide net revenue is positively skewed--mean is larger than median, with large outliers distorting the mean.\n",
    "# Identify movies with above-median worldwide net revenue\n",
    "above_median_worldwide_net_revenue = []\n",
    "\n",
    "#df11.query('worldwide_net_revenue'>=8.550286e+06)\n",
    "\n",
    "movies = df11.movie.values\n",
    "#ww_net_rev = df11.worldwide_net_revenue.values\n",
    "\n",
    "if df11['worldwide_net_revenue'] >= 8.550286e+06:\n",
    "    above_median_worldwide_net_revenue.append()\n",
    "\n",
    "above_median_worldwide_net_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Explore distribution of worldwide_net_revenue\n",
    "\n",
    "fig, ax = plt.subplots(4, figsize=(10,8))\n",
    "ax1 = plt.subplot(1,4,1)\n",
    "ax1.hist(df_revenue['net_revenue'], bins='auto', color = 'green', alpha = 0.5)\n",
    "ax1.set_title('Net Revenue', fontsize = 10)\n",
    "ax1.set_xlabel('Dollars $', fontsize = 10)\n",
    "ax1.set_ylabel('Number of Movies', fontsize = 10)\n",
    "ax1.axvline(df_revenue['net_revenue'].mean(), color = 'black')\n",
    "\n",
    "ax2 = plt.subplot(1,4,2)\n",
    "ax2.hist(df_revenue['domestic_gross'], bins='auto', color = 'green', alpha = 0.5)\n",
    "ax2.set_title('Domestic Gross Revenue' , fontsize = 10)\n",
    "ax2.set_xlabel('Dollars $', fontsize = 10)\n",
    "ax2.axvline(df_revenue['domestic_gross'].mean(), color = 'black')\n",
    "\n",
    "ax3 = plt.subplot(1,4,3)\n",
    "ax3.hist(df_revenue['foreign_gross'], bins='auto', color = 'green', alpha = 0.5)\n",
    "ax3.set_title('Foreign Gross Revenue', fontsize = 10)\n",
    "ax3.set_xlabel('Dollars $', fontsize = 10)\n",
    "ax3.axvline(df_revenue['foreign_gross'].mean(), color = 'black')\n",
    "\n",
    "ax4 = plt.subplot(1,4,4)\n",
    "ax4.hist(df_revenue['production_budget'], bins='auto', color = 'green', alpha = 0.5)\n",
    "ax4.set_title('Production Budget', fontsize = 10)\n",
    "ax4.set_xlabel('Dollars $', fontsize = 10)\n",
    "ax4.axvline(df_revenue['production_budget'].mean(), color = 'black')\n",
    "\n",
    "#plt.style.use('ggplot')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
